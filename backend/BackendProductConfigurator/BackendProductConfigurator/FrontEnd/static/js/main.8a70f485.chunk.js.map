{"version":3,"sources":["assets/img/notfound.jpg","assets/img sync /^/.*$","assets/img/Computer0.jpg","assets/img/Watch0.jpg","assets/img/vw-golf-r-2021--.jpg","lang/index.js","state/language/languageSelectors.js","api/general.js","state/language/languageSlice.js","components/header/LanguageSelect.js","state/user/userSelector.js","api/userAPI.js","state/alert/alertSlice.js","state/user/userSlice.js","state/inputDialog/inputDialogSelectors.js","state/inputDialog/inputDialogSlice.js","components/header/LoginButton.js","components/header/RegisterButton.js","components/header/Header.js","state/confirmationDialog/confirmationSelectors.js","state/confirmationDialog/confirmationSlice.js","state/configuration/configurationSelectors.js","components/configuration/Configurator/Options/OptionListItem.js","components/dialog/ConfirmationDialog.js","components/dialog/InputDialog.js","state/alert/alertSelectors.js","components/alert/GenericAlert.js","state/product/productSelector.js","components/products/Product.js","App.js","api/productsAPI.js","state/product/productSlice.js","components/Loader.js","components/products/ProductView.js","api/configurationAPI.js","state/configuration/configurationSlice.js","components/configuration/Configurator/SidePanel/PriceListItem.js","components/configuration/Configurator/SidePanel/Summary.js","components/account/ConfigurationList.js","components/account/ConfigurationTabs.js","components/account/AccountView.js","state/configurationBuilder/builderSelectors.js","state/configurationBuilder/builderSlice.js","components/configuration/Builder/ConfigurationProperties.js","components/configuration/Builder/EditButton.js","components/configuration/Builder/Model/Model.js","components/configuration/Builder/Model/CreateModel.js","components/configuration/Builder/Options/BuilderOption.js","components/configuration/Builder/Options/BuilderOptionGroup.js","components/configuration/Builder/SectionTabs.js","components/configuration/Builder/ConfigurationBuilderView.js","components/configuration/Configurator/ModelSelector/ModelOptionText.js","components/configuration/Configurator/ModelSelector/SectionOptionList.js","components/configuration/Configurator/ModelSelector/ModelButton.js","components/configuration/Configurator/ModelSelector/ModelSelector.js","components/configuration/Configurator/Options/Option.js","components/configuration/Configurator/Options/GroupInvalidError.js","components/configuration/Configurator/Options/OptionGroup.js","components/configuration/Configurator/OptionTabs.js","components/configuration/Configurator/Configurator.js","components/configuration/Configurator/ConfigurationView.js","Theme.js","state/store.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","languageNames","EN","DE","FR","defaultLang","languages","en","de","fr","translate","key","language","langData","translation","console","log","selectLanguage","state","baseURL","axios","defaults","timeout","setAuthorizationToken","token","headers","common","initialState","languageSlice","createSlice","name","reducers","changedLanguage","action","payload","setLanguage","lang","dispatch","values","includes","localStorage","setItem","setAcceptLanguage","actions","mapDispatchToProps","connect","Box","sx","minWidth","FormControl","variant","fullWidth","InputLabel","Select","labelId","value","autoWidth","label","onChange","event","target","MenuItem","selectIsAuthenticated","user","isAuthenticated","selectIsAdmin","admin","selectUserName","selectCurrentUser","userName","selectUserEmail","userEmail","selectSavedConfigurations","savedConfigurations","selectOrderedConfigurations","orderedConfigurations","selectAllOrderedConfigurations","allOrderedConfigurations","requestSaveConfiguration","configurationId","selectedOptions","Promise","reject","data","savedName","options","post","then","res","catch","err","fetchSavedConfigurations","get","fetchAllOrderedConfigurations","requestLogin","username","password","setTimeout","jwt","decode","loginTest","alertStatus","alertTypes","status","alerts","alertSlice","addAlert","push","closeAlert","shift","length","openAlert","message","type","a","userSlice","setCurrentUser","setSavedConfigurations","setOrderedConfigurations","setAllOrderedConfigurations","selectIsInputDialogOpen","inputDialog","open","selectInputDialogData","selectInputDialogHeaderMessage","headerMessage","inputDialogSlice","show","close","setData","onConfirm","inputDialogOpen","onConfirmCallback","getState","openLogInDialog","isPassword","openLogin","size","Button","onClick","openInputDialog","register","email","isEmail","confirmPassword","logout","removeItem","isLoggedIn","isAdmin","navigate","useNavigate","useState","drawerOpen","setDrawerOpen","mobileView","setMobileView","useEffect","setResponsiveness","window","innerWidth","addEventListener","removeEventListener","userButtons","startIcon","AccountCircle","Typography","maxWidth","overflow","textOverflow","Tooltip","title","IconButton","Logout","adminButtons","guestButtons","homeButton","Home","color","getMenuButtons","handleToggleDrawer","on","flexGrow","align","marginBottom","AppBar","position","Toolbar","Grid","container","direction","edge","mr","Menu","fontSize","Drawer","anchor","onClose","padding","gap","justifyContent","selectIsConfirmDialogOpen","confirmation","selectConfirmDialogMessage","selectConfirmDialogData","confirmationSlice","bodyContent","confirmDialogOpen","body","GROUP_ERRORS","OPTION_ERRORS","selectGroupId","groupId","selectOptionId","optionId","selectAllOptionIncompatibilities","configuration","rules","incompatibilities","selectAllOptionRequirements","requirements","selectConfigurationStatus","selectConfigurationId","configId","selectBasePrice","basePrice","selectPriceList","priceList","selectDefaultModel","defaultModel","selectSelectedModel","selectedModel","selectModels","models","selectConfigurationName","selectConfigurationDescription","description","selectConfigurationImages","images","selectOptions","selectOptionGroups","optionGroups","selectOptionSections","optionSections","selectSelectedOptions","extractModelNameFromModel","model","extractModelOptionsFromModel","getModelOptions","createSelector","modelName","find","m","getOptionsInSection","sectionId","groups","sections","section","s","groupsInSection","filter","g","optionGroupIds","forEach","optionIds","getOption","getOptionName","option","getIsOptionSelected","getOptionReplacementGroup","replacementGroups","replacementGroup","getOptionIncompatibilities","getIsOptionCompatible","compatible","incompatibleOptions","incompatibility","getOptionRequirements","getIsOptionRequirementsMet","reqMet","requiredOptions","requirement","getIsOptionSelectable","isRequirementsMet","isCompatible","getGroupRequirements","groupRequirements","allRequirements","getGroup","selectedGroup","getIsGroupValid","required","requiredGroups","requirementsMet","groupSelected","atLeastOneOptionSelected","getOptionPrice","getCurrentPrice","reduce","total","getDependentOptionsDeselect","selectedOptionId","dependencies","dependenciesFromDependencyLists","d","getDependentOptionsSelect","dependentOption","dependencyLists","dependencyList","dependency","ownProps","image","highlight","bgCol","green","red","margin","backgroundColor","cancel","confirm","content","isOpen","selectedOption","selected","deselectedOption","deselected","optionsToSelect","optionsToRemove","text","confirmationPrompt","youWantToSelect","youWantToRemove","theseOptionsWillBeRemoved","youAlsoNeedToSelect","handleClose","renderDialogContentOptions","alignItems","Dialog","scroll","DialogTitle","DialogContent","dividers","DialogContentText","DialogActions","autoFocus","setInputData","inputData","dialogTitle","submit","localData","setLocalData","valuesChanged","prevData","index","inputdata","isCheckBox","FormControlLabel","labelPlacement","control","Checkbox","checked","TextField","autoComplete","error","renderInputField","valid","selectIsAlertOpen","alert","selectCurrentAlert","Toast","Swal","mixin","toast","showConfirmButton","timer","timerProgressBar","didOpen","stopTimer","resumeTimer","didClose","isVisible","fire","icon","selectProducts","product","products","selectProductError","selectProductStatus","Product","extractIdFromProduct","extractNameFromProduct","extractDescriptionFromProduct","extractImagesFromProduct","imageSource","require","replace","default","getImageSource","ImageListItem","width","cursor","src","srcSet","alt","loading","ImageListItemBar","subtitle","fetchAll","toString","productSlice","loadingStarted","loadingSucceeded","loadingFailed","Loader","fetchProducts","isEmpty","renderLoadingProducts","columns","spacing","paddingTop","marginRight","item","sm","md","lg","xl","errorMessage","render","fetchId","productId","postConfiguration","newConfiguration","configurationSlice","selectOption","deselectOption","setSelectedOptions","setSelectedModel","reset","loadSelectedOptionsFromStorage","extraReducers","builder","fetchConfiguration","setModel","checkModel","containsAll","arr1","arr2","every","arr2Item","modelOptions","saveConfigurationToStorage","configurations","loadConfigurationsFromStorage","c","writeToLocalStorage","readFromLocalStorage","selectWithDependencies","replacementGroupOptionsToDeselect","incompatibleOptionsToDeselect","optionsToDeselect","deeperOptionsToDeselect","getDependenciesDeselect","allOptionsToDeselect","incompatibleOptionNames","dependentId","selectedOptionName","confirmMessage","join","selectAndDeselectOptions","deselectWithDependencies","dependentOptions","dependentOptionNames","deselectedOptionName","concat","subDependentOptions","x","price","loadedConfigurationId","currentPrice","renderSectionContent","sectionGroups","groupOptions","group","vairant","Divider","marginTop","Stack","Accordion","AccordionSummary","expandIcon","ExpandMoreOutlined","AccordionDetails","openConfirm","isOrdered","isAdminView","handleDeleteClicked","delete","requestDeleteSavedConfiguration","config","extractOptionsFromConfiguration","extractNameFromConfiguration","date","extractDateFromConfiguration","extractUsernameFromConfiguration","display","handleEditClick","Edit","Delete","handleShowSummaryClicked","Preview","Date","toLocaleTimeString","TabPanel","props","children","other","role","hidden","p","tabNames","forAdmin","tab","useParams","foundTab","t","tabName","tabIndex","setValue","tabProps","Tabs","scrollButtons","allowScrollButtonsMobile","newValue","Tab","path","getSavedConfigurations","saved","ordered","getAllOrderedConfigurations","adminActions","userActions","className","flexDirection","paddingBottom","selectCurrentBuilderLanguage","currentLanguage","selectBuilderConfiguration","selectBuilderStatus","selectBuilderError","selectBuilderInputLanguage","selectBuilderSections","selectBuilderGroups","selectBuilderModels","selectBuilderDefaultModel","selectBuilderBasePrice","selectBuilderOptionRequirements","selectBuilderOptionIncompatibilities","selectBuilderGroupRequirements","selectBuilderOptionsFromCurrentLanguage","selectBuilderGroupsFromCurrentLanguage","selectBuilderSectionsFromCurrentLanguage","selectName","getBuilderName","builderName","getBuilderDescription","builderDescription","getBuilderOptionById","getBuilderOptionPrice","getBuilderOptionRequirementsByOptionId","optionReq","getBuilderOptionIncompatibilitiesByOptionId","optionIncomp","getBuilderSectionById","getBuilderGroupsInSection","getBuilderGroupById","getBuilderGroupNameByOptionId","groupLangObj","getBuilderGroupRequirementsByGroupId","groupReq","getBuilderLanguageObject","getDoesSectionExist","sectionName","toUpperCase","getDoesGroupdExist","groupName","getDoesOptionExist","optionName","getGroupPropertiesFromBuilderGroup","langObj","getGroupNameFromBuilderGroup","getGroupDescriptionFromBuilderGroup","getModelPropertiesFromBuilderModel","modelObj","getModelNameFromBuilderModel","getModelDescriptionFromBuilderModel","initialConfiguration","builderSlice","addSection","newSection","changeSectionProperties","newName","removeSection","addOptionGroup","isRequired","isReplacementGroup","replacement","newGroup","changeGroupProperties","newDescription","setGroupRequirements","gId","setGroupIsRequired","setGroupIsReplacement","removeOptionGroup","addOption","newOption","changeOptionProperties","setOptionPrice","setOptionRequirements","oId","setOptionIncompatibilities","removeOption","addModel","newModel","changeModelProperties","modelId","setDefaultModel","setModelOptions","removeModel","setBasePrice","setDescription","setName","changeInputLanguage","newLanguage","resetBuild","loadingHandled","deleteOptionGroup","extractOptionsFromBuilderGroup","deleteOption","newOptions","extractModelOptionsFromBuilderModel","changeModelOptions","allIncompatibilities","setPrice","priceError","setPriceError","nameInput","setNameInput","descriptionInput","setDescriptionInput","rowGap","rowSpacing","columnSpacing","xs","onBlur","Number","defaultValue","InputProps","inputProps","min","startAdornment","InputAdornment","multiline","maxRows","propertyName","oldValue","textButton","valueChangedCallback","handleClick","openConfirmDialog","allOptions","multiple","split","input","OutlinedInput","renderValue","selectedIds","indexOf","ListItemText","primary","createModel","selectedDefaultModel","isSelected","modelDesc","Add","Multiselect","resultOptions","onChangeCallback","remove","optionPrice","optionReqirements","optionIncompatibilities","arrayFromMultiSelect","paddingLeft","newRequirements","newIncomps","CheckboxInput","callback","resultGroups","allGroups","createOption","deleteGroup","border","flexWrap","optionDescription","TooltipAsTab","createSection","deleteSection","extractGroupsFromBuilderSection","createGroup","getOptionGroupsInSection","renderSectionHeader","groupDescription","groupIsRequired","groupIsMultiselect","handleAddGroup","handleRemoveSection","borderBottom","borderColor","wrapped","a11yProps","handleAddSection","minHeight","mb","BuilderOptionGroup","saveBuilderToStorage","finish","inputLanguage","saveBuilderInterval","setInterval","clearInterval","justifySelf","newLang","Done","CreateModel","secondary","ListItem","selectModel","disabled","extractModelDescriptionFromModel","hover","setHover","handleHover","isHovering","ButtonBase","height","onMouseLeave","onMouseOver","List","dense","maxHeight","subheader","ListSubheader","isDesktop","useMediaQuery","theme","breakpoints","up","overflowX","clickedOption","selectableError","isSelectable","disabledReason","problematicOptions","selectable","placement","TransitionComponent","Zoom","arrow","enterTouchDelay","style","GroupInvalidError","ErrorOutline","groupError","isValid","OptionTabs","useSelector","resetConfig","configurationName","configurationDescription","configurationImages","isLoading","handleSaveClicked","handleResetClicked","handleFinishClicked","postOrderConfiguredProduct","promptOrderConfiguration","SaveAs","RestartAlt","renderConfiguration","responsiveFontSizes","createTheme","palette","typography","JSON","stringify","parse","getItem","App","ThemeProvider","Container","exact","element","store","configureStore","reducer","productReducer","configurationReducer","languageReducer","confirmationReducer","userReducer","inputDialogReducer","alertReducer","builderReducer","authToken","jwtToken","localStorageLang","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a70f485.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/notfound.b2542792.jpg\";","var map = {\n\t\"./Computer0.jpg\": 444,\n\t\"./Watch0.jpg\": 445,\n\t\"./notfound.jpg\": 250,\n\t\"./vw-golf-r-2021--.jpg\": 446\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 443;","export default __webpack_public_path__ + \"static/media/Computer0.e2b016a9.jpg\";","export default __webpack_public_path__ + \"static/media/Watch0.e6eda55c.jpg\";","export default __webpack_public_path__ + \"static/media/vw-golf-r-2021--.b97934f0.jpg\";","import en from './en.json'\r\nimport de from './de.json'\r\nimport fr from './fr.json'\r\n\r\nexport const languageNames = {\r\n    EN: 'en',\r\n    DE: 'de',\r\n    FR: 'fr'\r\n}\r\nexport const defaultLang = languageNames.EN\r\n\r\nconst languages = {\r\n    'en': en,\r\n    'de': de,\r\n    'fr': fr\r\n}\r\n\r\nexport const translate = (key, language = defaultLang) => {\r\n    let langData = languages[language]\r\n\r\n    if (!langData) {\r\n        console.log(`Trying to translate ${key} to a language that doesn't exist: '${language}'`)\r\n        return\r\n    }\r\n\r\n    const translation = langData[key]\r\n\r\n    if (!translation) {\r\n        // console.log(`There is no translation for ${key} in language ${language}!`)\r\n\r\n        // if there is a translation in the default language, at least return that\r\n        if (languages[defaultLang][key]) {\r\n            return languages[defaultLang][key]\r\n        }\r\n\r\n        // there is no translation for this key (not even in the default language) -> just return the key\r\n        return key\r\n    }\r\n\r\n    return translation\r\n}","export const selectLanguage = state =>      state.language.language\r\n","import axios from 'axios'\r\n\r\n// export const baseURL = `https://sqrt3.ddns.net:7187`\r\n// export const baseURL = `http://sqrt3.ddns.net:5187`\r\nexport const baseURL = `https://localhost:7187`\r\n// export const baseURL = ``\r\n\r\nexport const LOCAL_DATA = false\r\n\r\naxios.defaults.timeout = 5000\r\n\r\nexport const setAuthorizationToken = (token) => {\r\n    if (token) {\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`\r\n    } else {\r\n        delete axios.defaults.headers.common['Authorization']\r\n    }\r\n}\r\n\r\nexport const setAcceptLanguage = (lang) => {\r\n    if (lang) {\r\n        axios.defaults.headers.common['Accept-Language'] = lang\r\n    } else {\r\n        delete axios.defaults.headers.common['Accept-Language']\r\n    }\r\n}","import { createSlice } from '@reduxjs/toolkit'\r\nimport { setAcceptLanguage } from '../../api/general'\r\nimport { defaultLang, languageNames } from '../../lang'\r\n\r\n\r\nconst initialState = {\r\n    language: defaultLang\r\n    // status: 'idle', // | 'loading' | 'succeeded' | 'failed'\r\n    // error: null\r\n}\r\n\r\nexport const languageSlice = createSlice({\r\n    name: 'language',\r\n    initialState,\r\n    reducers: {\r\n        changedLanguage: (state, action) => {\r\n            console.log('Changed language to: ' + action.payload)\r\n            state.language = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nexport const setLanguage = (lang) => (dispatch) => {\r\n    // check if the language exists\r\n    if (!Object.values(languageNames).includes(lang)) {\r\n        console.log(`language '${lang}' does not exist!`)\r\n        lang = defaultLang\r\n    }\r\n\r\n    localStorage.setItem('language', lang)\r\n    setAcceptLanguage(lang)\r\n    dispatch(changedLanguage(lang))\r\n}\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { changedLanguage } = languageSlice.actions\r\n\r\nexport default languageSlice.reducer","import { FormControl, InputLabel, MenuItem, Select } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { languageNames } from '../../lang'\r\nimport { selectLanguage } from '../../state/language/languageSelectors'\r\nimport { setLanguage } from '../../state/language/languageSlice'\r\n\r\nfunction LanguageSelect({ language, setLanguage }) {\r\n\r\n    function handleChange(event) {\r\n        setLanguage(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ minWidth: 120 }}>\r\n            <FormControl variant='standard' fullWidth>\r\n                <InputLabel id=\"select-lang-label\">Language</InputLabel>\r\n                <Select\r\n                    labelId='select-lang-label'\r\n                    value={language}\r\n                    autoWidth\r\n                    label=\"Lang\"\r\n                    onChange={handleChange}\r\n                    >\r\n                    <MenuItem value={languageNames.EN}>English</MenuItem>\r\n                    <MenuItem value={languageNames.DE}>Deutsch</MenuItem>\r\n                    <MenuItem value={languageNames.FR}>Français</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    language: selectLanguage(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    setLanguage\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LanguageSelect)\r\n","export const selectIsAuthenticated = state =>       state.user.isAuthenticated\r\nexport const selectIsAdmin = state =>               state.user.user.admin || false\r\nexport const selectUserName = state =>              selectCurrentUser(state).userName || ''\r\nexport const selectUserEmail = state =>             selectCurrentUser(state).userEmail || ''\r\n\r\nexport const selectSavedConfigurations = state =>       state.user.savedConfigurations\r\nexport const selectOrderedConfigurations = state =>     state.user.orderedConfigurations\r\nexport const selectAllOrderedConfigurations = state =>  state.user.allOrderedConfigurations\r\n\r\nconst selectCurrentUser = state =>        state.user.user\r\n\r\nexport const extractUsernameFromConfiguration = (configuration) =>      configuration.user?.userName || ''\r\nexport const extractEmailFromConfiguration = (configuration) =>         configuration.user?.userEmail || ''\r\n\r\nexport const extractNameFromConfiguration = (configuration) =>          configuration.savedName\r\nexport const extractIdFromConfiguration = (configuration) =>            configuration.configId\r\nexport const extractOptionsFromConfiguration = (configuration) =>       configuration.options\r\nexport const extractDateFromConfiguration = (configuration) =>          configuration.date","import axios from 'axios'\r\nimport { baseURL, LOCAL_DATA } from './general'\r\nimport jwt from 'jsonwebtoken'\r\n\r\nexport const requestSaveConfiguration = (configurationId, name, selectedOptions) => {\r\n    if (LOCAL_DATA) {\r\n        return saveConfigTest(name, selectedOptions)\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const data = {\r\n            savedName: name,\r\n            options: selectedOptions\r\n        }\r\n        axios.post(`${baseURL}/account/configurations/${configurationId}`, data)\r\n        .then(res => {\r\n            resolve(res.data)\r\n        })\r\n        .catch(err => {\r\n            reject('Could not save configuration!')\r\n        })\r\n    })\r\n}\r\nexport const requestDeleteSavedConfiguration = (configurationId, name) => {\r\n    return new Promise((resolve, reject) => {\r\n        // reject('Not implemented!')\r\n\r\n        const data = {\r\n            savedName: name\r\n        }\r\n        axios.delete(`${baseURL}/account/configurations/${configurationId}`, data)\r\n        .then(res => {\r\n            resolve(res.data)\r\n        })\r\n        .catch(err => {\r\n            reject('Could not get saved configurations!')\r\n        })\r\n    })\r\n}\r\nexport const fetchSavedConfigurations = () => {\r\n    if (LOCAL_DATA) {\r\n        return fetchConfigsTest()\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(`${baseURL}/account/configurations/`)\r\n        .then(res => {\r\n            resolve(res.data)\r\n        })\r\n        .catch(err => {\r\n            reject('Could not get saved configurations!')\r\n        })\r\n    })\r\n}\r\nexport const fetchAllOrderedConfigurations = () => {\r\n    if (LOCAL_DATA) {\r\n        return fetchOrderedConfigsTest()\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(`${baseURL}/account/allorderedconfigurations/`)\r\n        .then(res => {\r\n            resolve(res.data)\r\n        })\r\n        .catch(err => {\r\n            reject('Could not get all ordered configurations!')\r\n        })\r\n    })\r\n}\r\n\r\nexport const requestRegister = (username, email, password) => {\r\n    return new Promise((resolve, reject) => {\r\n        reject('Not implemented')\r\n    })\r\n}\r\n\r\nexport const requestLogin = (username, password) => {\r\n    return loginTest(username, password)\r\n\r\n    // return new Promise((resolve, reject) => {\r\n    //     axios.post('/api/auth', {username, password})\r\n    //     .then(res => {\r\n    //         const token = res.data.token\r\n    //         const user = jwt.decode(token)\r\n    //         resolve({token, user})\r\n    //     })\r\n    //     .catch(err => {\r\n    //         reject('Invalid Credentials')\r\n    //     })\r\n    // })\r\n}\r\n\r\n\r\n// A mock function to mimic making an async request for the login\r\nfunction loginTest(username, password) {\r\n    return new Promise((resolve, reject) => {\r\n        if (username !== 'admin' && username !== 'user') {\r\n            reject('INVALID CREDENTIALS')\r\n        }\r\n        \r\n        setTimeout(() => {\r\n            // user token\r\n            let token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyTmFtZSI6InRlc3R1c2VyIiwidXNlckVtYWlsIjoidGVzdHVzZXJAdGVzdC1mdWNocy5jb20iLCJhZG1pbiI6ZmFsc2UsImlhdCI6MTYxNzQ0OTAyMn0.mNE0pAsXlfADoB9xvvPbyOqo4cO_nPJa2aCrUIeXMRY'\r\n            \r\n            // admin token\r\n            if (username === 'admin') {\r\n                token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyTmFtZSI6ImFkbWluIiwidXNlckVtYWlsIjoiY29uZmlndXJhdG9yLWFkbWluQHRlc3QtZnVjaHMuY29tIiwiYWRtaW4iOnRydWUsImlhdCI6MTYxNzQ0OTAyMn0.c3_WbsSenWEZTfCnesqIOz1067u2xL1FoE_efepoaBI'\r\n            }\r\n            \r\n            const user = jwt.decode(token)\r\n\r\n            resolve({token, user})\r\n        }, 250)\r\n    })\r\n}\r\n\r\nfunction saveConfigTest(name, options) {\r\n    return new Promise((resolve, reject) => {\r\n        resolve('Successfully saved ' + name)\r\n    })\r\n}\r\nfunction fetchConfigsTest() {\r\n    return new Promise((resolve, reject) => {\r\n        const data = [\r\n            {\r\n                savedName: \"Testspeicher\",\r\n                status: \"saved\", // or \"ordered\"\r\n                date: new Date(1644407751516).toISOString(),\r\n                configId: 0,\r\n                name: \"Auto\",\r\n                description: \"Das Auto der nächsten Generation\",\r\n                options: ['YELLOW']\r\n            },\r\n            // {\r\n            //     savedName: \"TestConfig2\",\r\n            //     status: \"saved\",\r\n            //     date: new Date().toISOString(),\r\n            //     configId: 0,\r\n            //     name: \"Car\",\r\n            //     description: \"This is a car\",\r\n            //     options: ['BLUE', 'DIESEL', 'D150']\r\n            // },\r\n            {\r\n                savedName: \"Persönliche Konfiguration 1\",\r\n                status: \"ordered\",\r\n                date: new Date(1644407751516).toISOString(),\r\n                configId: 0,\r\n                name: \"Auto\",\r\n                description: \"Das Auto der nächsten Generation\",\r\n                options: ['YELLOW', 'DIESEL', 'D150', 'PANORAMAROOF', 'PANORAMASMALL']\r\n            },\r\n            // {\r\n            //     savedName: \"TestOrderedConfig2\",\r\n            //     status: \"ordered\",\r\n            //     date: new Date().toISOString(),\r\n            //     configId: 0,\r\n            //     name: \"Car\",\r\n            //     description: \"This is a car\",\r\n            //     options: ['BLUE', 'PETROL', 'P220', 'HEATED_SEATS']\r\n            // }\r\n        ]\r\n        resolve(data)\r\n    })\r\n}\r\nfunction fetchOrderedConfigsTest() {\r\n    return new Promise((resolve, reject) => {\r\n        const data = [\r\n            {\r\n                savedName: \"TestOrderedConfig\",\r\n                userName: \"admin\",\r\n                userEmail: \"configurator-admin@test-fuchs.com\",\r\n                date: new Date().toISOString(),\r\n                configId: 0,\r\n                name: \"Car\",\r\n                description: \"This is a car\",\r\n                options: ['YELLOW', 'DIESEL', 'D150', 'PANORAMAROOF', 'PANORAMASMALL']\r\n            },\r\n            {\r\n                savedName: \"TestOrderedConfig2\",\r\n                userName: \"admin\",\r\n                userEmail: \"configurator-admin@test-fuchs.com\",\r\n                status: \"ordered\",\r\n                date: new Date().toISOString(),\r\n                configId: 0,\r\n                name: \"Car\",\r\n                description: \"This is a car\",\r\n                options: ['BLUE', 'PETROL', 'P220', 'HEATED_SEATS']\r\n            }\r\n        ]\r\n        resolve(data)\r\n    })\r\n}","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const alertStatus = {\r\n    CLOSED: 'closed',\r\n    OPEN: 'open'\r\n}\r\n\r\nexport const alertTypes = {\r\n    ERROR: 'error',\r\n    WARNING: 'warning',\r\n    INFO: 'info',\r\n    SUCCESS: 'success'\r\n}\r\n\r\n\r\n\r\nconst initialState = {\r\n    status: alertStatus.CLOSED,\r\n    alerts: [ // can be multiple -> when 1. closed, 2nd pops up\r\n        // {message: '', type: alertTypes.INFO}\r\n    ]\r\n}\r\n\r\nexport const alertSlice = createSlice({\r\n    name: 'alert',\r\n    initialState,\r\n    reducers: {\r\n        addAlert: (state, action) => {\r\n            state.status = alertStatus.OPEN\r\n            state.alerts.push(action.payload)\r\n        },\r\n        closeAlert: (state) => {\r\n            state.alerts.shift()\r\n\r\n            // set the status to closed, when all alerts are gone\r\n            if (state.alerts.length === 0) {\r\n                state.status = alertStatus.CLOSED\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const openAlert = (message, type) => async (dispatch) => {\r\n    dispatch(addAlert({ message, type }))\r\n}\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { addAlert, closeAlert } = alertSlice.actions\r\n\r\nexport default alertSlice.reducer","import { createSlice } from '@reduxjs/toolkit'\r\nimport { setAuthorizationToken } from '../../api/general'\r\nimport { fetchAllOrderedConfigurations, fetchSavedConfigurations, requestLogin, requestRegister } from '../../api/userAPI'\r\nimport { alertTypes, openAlert } from '../alert/alertSlice'\r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    savedConfigurations: [],\r\n    orderedConfigurations: [],\r\n    allOrderedConfigurations: []\r\n}\r\n\r\nexport const userSlice = createSlice({\r\n    name: 'user',\r\n    initialState,\r\n    reducers: {\r\n        setCurrentUser: (state, action) => {\r\n            console.log('getting user:', action.payload)\r\n            state.user = action.payload\r\n            if (Object.keys(action.payload).length > 0) {\r\n                // user is set\r\n                state.isAuthenticated = true\r\n            } else {\r\n                // user is removed\r\n                state.isAuthenticated = false\r\n                state.savedConfigurations = []\r\n                state.orderedConfigurations = []\r\n                state.allOrderedConfigurations = []\r\n            }\r\n        },\r\n        setSavedConfigurations: (state, action) => {\r\n            console.log('setting saved configurations:', action.payload)\r\n            state.savedConfigurations = action.payload\r\n        },\r\n        setOrderedConfigurations: (state, action) => {\r\n            console.log('setting ordered configurations:', action.payload)\r\n            state.orderedConfigurations = action.payload\r\n        },\r\n        setAllOrderedConfigurations: (state, action) => {\r\n            // console.log('setting all ordered configurations:', action.payload)\r\n            state.allOrderedConfigurations = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nexport const getSavedConfigurations = () => async (dispatch) => {\r\n    fetchSavedConfigurations()\r\n    .then(configurations => {\r\n        let saved = configurations.filter(config => config.status === 'saved')\r\n        let ordered = configurations.filter(config => config.status === 'ordered')\r\n\r\n        if (saved.length > 0) dispatch(setSavedConfigurations(saved))\r\n        if (ordered.length > 0) dispatch(setOrderedConfigurations(ordered))\r\n    })\r\n    .catch(err => {\r\n        console.log(err)\r\n        dispatch(openAlert(err, alertTypes.ERROR))\r\n    })\r\n}\r\nexport const getAllOrderedConfigurations= () => async (dispatch) => {\r\n    fetchAllOrderedConfigurations()\r\n    .then(configurations => {\r\n        dispatch(setAllOrderedConfigurations(configurations))\r\n    })\r\n    .catch(err => {\r\n        console.log(err)\r\n        dispatch(openAlert(err, alertTypes.ERROR))\r\n    })\r\n}\r\n\r\nexport const register = (username, password, email) => async (dispatch) => {\r\n    requestRegister(username, password, email).then(res => {\r\n        dispatch(openAlert('Registered!', alertTypes.SUCCESS))\r\n    })\r\n    .catch(err => {\r\n        dispatch(openAlert(err, alertTypes.ERROR))\r\n    })\r\n}\r\n\r\nexport const login = (username, password) => async (dispatch) => {\r\n    \r\n    requestLogin(username, password).then(res => {\r\n        const { token, user } = res\r\n\r\n        localStorage.setItem('jwtToken', token)\r\n        setAuthorizationToken(token)\r\n        dispatch(setCurrentUser(user))\r\n        dispatch(openAlert('Logged In!', alertTypes.SUCCESS))\r\n    })\r\n    .catch(err => {\r\n        dispatch(openAlert(err, alertTypes.ERROR))\r\n    })\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n    localStorage.removeItem('jwtToken')\r\n    setAuthorizationToken(false)\r\n    dispatch(setCurrentUser({}))\r\n}\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { setCurrentUser, setSavedConfigurations, setOrderedConfigurations, setAllOrderedConfigurations } = userSlice.actions\r\n\r\nexport default userSlice.reducer","export const selectIsInputDialogOpen = state =>             state.inputDialog.open\r\nexport const selectInputDialogData = state =>               state.inputDialog.data\r\nexport const selectInputDialogHeaderMessage = state =>      state.inputDialog.headerMessage","import { createSlice } from '@reduxjs/toolkit'\r\nimport { selectInputDialogData, selectIsInputDialogOpen } from './inputDialogSelectors'\r\n\r\nconst initialState = {\r\n    open: false,\r\n    headerMessage: '',\r\n    data: {}\r\n}\r\n\r\nexport const inputDialogSlice = createSlice({\r\n    name: 'inputDialog',\r\n    initialState,\r\n    reducers: {\r\n        show: (state, action) => {\r\n            const { headerMessage, data } = action.payload\r\n\r\n            // console.log('Opened input dialog:', data)\r\n            state.headerMessage = headerMessage\r\n            state.data = data\r\n            state.open = true\r\n        },\r\n        close: (state, action) => {\r\n            // console.log('Closed input dialog')\r\n            state.open = false\r\n            state.headerMessage = ''\r\n            state.data = {}\r\n        },\r\n        setData: (state, action) => {\r\n            // console.log('Set input dialog data:', action.payload)\r\n            state.data = action.payload\r\n        }\r\n    }\r\n})\r\n\r\n\r\nlet onConfirm = null\r\n\r\nexport const inputDialogOpen = (headerMessage, data, onConfirmCallback) => (dispatch, getState) => {\r\n    const isOpen = selectIsInputDialogOpen(getState())\r\n    if (isOpen) {\r\n        console.log('Input Dialog is already open!')\r\n        return\r\n    }\r\n\r\n    onConfirm = onConfirmCallback\r\n    \r\n    dispatch(show({headerMessage, data}))\r\n}\r\n\r\nexport const inputDialogConfirm = () => (dispatch, getState) => {\r\n    const isOpen = selectIsInputDialogOpen(getState())\r\n    if (!isOpen) {\r\n        console.log('Input Dialog is closed (can not confirm)!')\r\n        return\r\n    }\r\n\r\n    if (onConfirm) {\r\n        const data = selectInputDialogData(getState())\r\n        onConfirm(data)\r\n    } else {\r\n        console.log('no confirmation callback')\r\n    }\r\n    dispatch(close())\r\n    onConfirm = null\r\n}\r\n\r\nexport const inputDialogCancel = () => (dispatch) => {\r\n    dispatch(close())\r\n    onConfirm = null\r\n}\r\n\r\nexport const inputDialogSetData = (data) => (dispatch) => {\r\n    dispatch(setData(data))\r\n}\r\n\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { show, close, setData } = inputDialogSlice.actions\r\n\r\nexport default inputDialogSlice.reducer","import React from 'react'\r\nimport { Button } from '@mui/material'\r\nimport { connect } from 'react-redux'\r\nimport { inputDialogOpen } from '../../state/inputDialog/inputDialogSlice'\r\nimport { login } from '../../state/user/userSlice'\r\nimport { translate } from '../../lang'\r\nimport { selectLanguage } from '../../state/language/languageSelectors'\r\n\r\nexport const openLogInDialog = () => (dispatch) => {\r\n    const data = {\r\n        username: {name: 'Username', value: ''},\r\n        password: {name: 'Password', value: '', isPassword: true}\r\n    }\r\n    dispatch(inputDialogOpen('Login', data, (data) => {\r\n        dispatch(login(data.username.value, data.username.password))\r\n    }))\r\n}\r\n\r\nfunction LoginButton({ openLogin, language, size = 'small' }) {\r\n\r\n\r\n    return (\r\n        <Button\r\n            size={size}\r\n            variant=\"contained\" \r\n            onClick={openLogin}\r\n            >\r\n            {translate('login', language)}\r\n        </Button>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    language: selectLanguage(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    openLogin: openLogInDialog\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LoginButton)","import React from 'react'\r\nimport { Button } from '@mui/material'\r\nimport { connect } from 'react-redux'\r\nimport { inputDialogOpen } from '../../state/inputDialog/inputDialogSlice'\r\nimport { register } from '../../state/user/userSlice'\r\nimport { alertTypes, openAlert } from '../../state/alert/alertSlice'\r\nimport { translate } from '../../lang'\r\nimport { selectLanguage } from '../../state/language/languageSelectors'\r\n\r\nfunction RegisterButton({ openInputDialog, register, openAlert, language, size = 'small' }) {\r\n\r\n    function openRegisterDialog() {\r\n        const data = {\r\n            username: {name: 'Username', value: ''},\r\n            email: {name: 'Email', value: '', isEmail: true},\r\n            password: {name: 'Password', value: '', isPassword: true},\r\n            confirmPassword: {name: 'Confirm Password', value: '', isPassword: true}\r\n        }\r\n        openInputDialog('Register', data, (data) => {\r\n            if (data.confirmPassword.value !== data.password.value) {\r\n                openAlert(`${translate('passwordDontMatch', language)}!`, alertTypes.ERROR)\r\n                return\r\n            }\r\n            register(data.username.value, data.email.value, data.username.password)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Button\r\n            size={size}\r\n            variant=\"contained\" \r\n            onClick={openRegisterDialog}\r\n            >\r\n            {translate('register', language)}\r\n        </Button>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    language: selectLanguage(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    openInputDialog: inputDialogOpen,\r\n    register: register,\r\n    openAlert: openAlert\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(RegisterButton)","import React, { useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { /*Accordion, AccordionDetails, AccordionSummary,*/ AppBar, Button, Drawer, Grid, /*Button, */IconButton, Toolbar, Tooltip, Typography } from '@mui/material'\r\nimport { AccountCircle, /*ArrowBackIosNew, ExpandMoreOutlined,*/ Home, Logout, Menu } from '@mui/icons-material'\r\nimport { Box } from '@mui/system'\r\nimport LanguageSelect from './LanguageSelect'\r\nimport { translate } from '../../lang'\r\nimport { selectLanguage } from '../../state/language/languageSelectors'\r\nimport { connect } from 'react-redux'\r\nimport { selectIsAuthenticated, selectIsAdmin, selectUserName } from '../../state/user/userSelector'\r\nimport { logout } from '../../state/user/userSlice'\r\nimport { inputDialogOpen } from '../../state/inputDialog/inputDialogSlice'\r\nimport LoginButton from './LoginButton'\r\nimport RegisterButton from './RegisterButton'\r\n\r\nfunction Header({ language, isLoggedIn, isAdmin, username, logout }) {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const [drawerOpen, setDrawerOpen] = useState(false)\r\n\r\n    const [mobileView, setMobileView] = useState(false)\r\n    useEffect(() => {\r\n        const setResponsiveness = () => {\r\n            return window.innerWidth < 900\r\n                ? setMobileView(true)\r\n                : setMobileView(false)\r\n        }\r\n\r\n        setResponsiveness();\r\n        window.addEventListener('resize', () => setResponsiveness())\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', () => setResponsiveness())\r\n        }\r\n    }, [])\r\n\r\n    const userButtons = (\r\n        <>\r\n            <Button\r\n                size=\"large\"\r\n                variant=\"contained\"\r\n                startIcon={<AccountCircle />}\r\n                onClick={() => navigate('/account')}\r\n            >\r\n                <Typography variant=\"body1\" sx={{maxWidth: '180px', overflow: 'hidden', textOverflow: 'ellipsis'}}>\r\n                    {username}\r\n                </Typography>\r\n            </Button>\r\n            <Tooltip title={translate('logout', language)}>\r\n                <IconButton\r\n                    size=\"large\"\r\n                    variant=\"contained\"\r\n                    onClick={() => logout()}\r\n                >\r\n                    <Logout />\r\n                </IconButton>\r\n            </Tooltip>\r\n        </>\r\n    )\r\n\r\n    const adminButtons = (\r\n        <>\r\n            <Button\r\n                size=\"large\"\r\n                variant=\"contained\"\r\n                onClick={handleCreateConfigPressed}\r\n            >\r\n                {translate('createConfiguration', language)}\r\n            </Button>\r\n        </>\r\n    )\r\n\r\n    const guestButtons = (\r\n        <>\r\n            <LoginButton size=\"large\"></LoginButton>\r\n            <RegisterButton size=\"large\"></RegisterButton>\r\n        </>\r\n    )\r\n\r\n    const homeButton = (\r\n        <>\r\n            <IconButton onClick={() => navigate('/')}>\r\n                <Home sx={{color: 'white'}} />\r\n            </IconButton>\r\n        </>\r\n    )\r\n\r\n    function handleCreateConfigPressed() {\r\n        navigate('/create')\r\n    }\r\n\r\n    function getMenuButtons() {\r\n        return (\r\n            // <Grid container sx={{ gap: 2 }} >\r\n            <>\r\n                {/* <LanguageSelect></LanguageSelect> */}\r\n\r\n                {/* <Box sx={{ flexGrow: 1 }}></Box> */}\r\n\r\n                {/* <Button variant=\"contained\" onClick={() => openConfirmDialog('Example Message', {}, null, () => console.log('confirmed'))}>\r\n                    test dialog\r\n                </Button> */}\r\n\r\n                {isAdmin ? adminButtons : ''}\r\n\r\n                {isLoggedIn ? userButtons : guestButtons}\r\n\r\n            </>\r\n            // </Grid>\r\n        )\r\n    }\r\n\r\n    function handleToggleDrawer(on) {\r\n        setDrawerOpen(on)\r\n    }\r\n\r\n    function mobileToolbar() {\r\n        // const drawerBleeding = 56\r\n\r\n        return (\r\n            // <SwipeableDrawer\r\n            //     anchor=\"top\"\r\n            //     open={drawerOpen}\r\n            //     // onClose={handleToggleDrawer(false)}\r\n            //     // onOpen={handleToggleDrawer(true)}\r\n            //     swipeAreaWidth={drawerBleeding}\r\n            //     disableSwipeToOpen={false}\r\n            //     ModalProps={{\r\n            //         keepMounted: true,\r\n            //     }}\r\n            // >\r\n            //     <Box\r\n            //         sx={{\r\n            //             position: 'absolute',\r\n            //             top: -drawerBleeding,\r\n            //             borderTopLeftRadius: 8,\r\n            //             borderTopRightRadius: 8,\r\n            //             visibility: 'visible',\r\n            //             right: 0,\r\n            //             left: 0,\r\n            //         }}\r\n            //     >\r\n            //         <Menu fontSize=\"large\" />\r\n            //         <Typography sx={{ p: 2, color: 'text.secondary' }}>Open Menu</Typography>\r\n            //     </Box>\r\n            //     <Box\r\n            //         sx={{\r\n            //             px: 2,\r\n            //             pb: 2,\r\n            //             height: '100%',\r\n            //             overflow: 'auto',\r\n            //         }}\r\n            //     >\r\n\r\n            //     <Box sx={{ flexGrow: 1 }}></Box>\r\n\r\n            //     <IconButton onClick={() => navigate('/')}>\r\n            //         <ArrowBackIosNew></ArrowBackIosNew>\r\n            //     </IconButton>\r\n\r\n            //     <LanguageSelect></LanguageSelect>\r\n            //     </Box>\r\n            // </SwipeableDrawer>\r\n\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n\r\n                    <Grid container direction=\"row\">\r\n\r\n                        <IconButton\r\n                            size=\"large\"\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            sx={{ mr: 2 }}\r\n                            onClick={() => handleToggleDrawer(true)}\r\n                            >\r\n                            <Menu fontSize=\"large\" />\r\n                        </IconButton>\r\n\r\n                        {homeButton}\r\n                        \r\n                        <Box sx={{ flexGrow: 1 }}></Box>\r\n                        \r\n                        <LanguageSelect></LanguageSelect>\r\n                    \r\n                    </Grid>\r\n\r\n                    <Drawer\r\n                        anchor=\"top\"\r\n                        open={drawerOpen}\r\n                        onClose={() => handleToggleDrawer(false)}\r\n                    >\r\n                        <Grid container direction=\"column\" padding={5} gap={2}>\r\n\r\n                            {getMenuButtons()}\r\n\r\n                        </Grid>\r\n                    </Drawer>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            // <Accordion expanded={drawerOpen}>\r\n            //     <AccordionSummary\r\n            //         expandIcon={<ExpandMoreOutlined />}\r\n            //         aria-controls=\"panel1a-content\"\r\n            //         id=\"panel1a-header\"\r\n            //         onClick={() => handleToggleDrawer(!drawerOpen)}\r\n            //     >\r\n\r\n            //         <IconButton\r\n            //             size=\"large\"\r\n            //             edge=\"start\"\r\n            //             color=\"inherit\"\r\n            //             aria-label=\"menu\"\r\n            //             sx={{ mr: 2 }}\r\n            //             onClick={() => handleToggleDrawer(!drawerOpen)}\r\n            //         >\r\n            //             <Menu fontSize=\"large\" />\r\n            //         </IconButton>\r\n\r\n            //         {/* <Box sx={{ flexGrow: 1 }}></Box>\r\n                    \r\n            //         <IconButton onClick={() => navigate('/')}>\r\n            //             <ArrowBackIosNew></ArrowBackIosNew>\r\n            //         </IconButton> */}\r\n\r\n\r\n            //     </AccordionSummary>\r\n            //     <AccordionDetails>\r\n\r\n            //         <Grid container direction=\"column\" gap={2} alignItems=\"center\">\r\n            //             <LanguageSelect></LanguageSelect>\r\n\r\n            //             {isAdmin ? adminButtons : ''}\r\n\r\n            //             {isLoggedIn ? userButtons : guestButtons}\r\n            //         </Grid>\r\n\r\n            //     </AccordionDetails>\r\n            // </Accordion >\r\n        )\r\n    }\r\n\r\n    function desktopToolbar() {\r\n        return (\r\n            <AppBar position=\"static\">\r\n                <Toolbar variant=\"regular\">\r\n                    <Grid justifyContent=\"flex-end\" container gap={2}>\r\n                        {homeButton}\r\n\r\n                        <LanguageSelect></LanguageSelect>\r\n\r\n                        <Box sx={{ flexGrow: 1 }}></Box>\r\n\r\n                        {/* <Grid container justifyContent=\"flex-end\" gap={2}> */}\r\n                            {getMenuButtons()}\r\n                        {/* </Grid> */}\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <Box sx={{ flexGrow: 1 }}>\r\n                <Typography align='center' marginBottom={1} variant='h1'>\r\n                    {translate('productConfigurator', language)}\r\n                </Typography>\r\n\r\n                {mobileView ? mobileToolbar() : desktopToolbar()}\r\n            </Box>\r\n        </header>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    language: selectLanguage(state),\r\n    isLoggedIn: selectIsAuthenticated(state),\r\n    isAdmin: selectIsAdmin(state),\r\n    username: selectUserName(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    openInputDialog: inputDialogOpen,\r\n    logout: logout\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Header)\r\n","export const selectIsConfirmDialogOpen = state =>       state.confirmation.open\r\nexport const selectConfirmDialogMessage = state =>      state.confirmation.message\r\nexport const selectConfirmDialogData = state =>         state.confirmation.data\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { selectIsConfirmDialogOpen } from './confirmationSelectors'\r\n\r\nconst initialState = {\r\n    open: false,\r\n    message: '',\r\n    data: {}\r\n}\r\n\r\nexport const confirmationSlice = createSlice({\r\n    name: 'confirmation',\r\n    initialState,\r\n    reducers: {\r\n        show: (state, action) => {\r\n            const { message, data } = action.payload\r\n\r\n            // console.log('Opened confirmation dialog: ' + message)\r\n            state.open = true\r\n            state.message = message\r\n            state.data = data\r\n        },\r\n        close: (state, action) => {\r\n            // console.log('Closed confirmation dialog')\r\n            state.open = false\r\n            state.message = ''\r\n            state.data = {}\r\n        }\r\n    }\r\n})\r\n\r\n\r\nlet onConfirm = null\r\nlet bodyContent = null\r\n\r\nexport const confirmDialogOpen = (message, data, body, onConfirmCallback) => (dispatch, getState) => {\r\n    const isOpen = selectIsConfirmDialogOpen(getState())\r\n    if (isOpen) {\r\n        console.log('Confirmation Dialog is already open!')\r\n        return\r\n    }\r\n\r\n    onConfirm = onConfirmCallback\r\n    bodyContent = body\r\n    \r\n    dispatch(show({message, data}))\r\n}\r\n\r\nexport const confirmDialogConfirm = () => (dispatch, getState) => {\r\n    const isOpen = selectIsConfirmDialogOpen(getState())\r\n    if (!isOpen) {\r\n        console.log('Confirmation Dialog is closed (can not confirm)!')\r\n        return\r\n    }\r\n\r\n    dispatch(close())\r\n    if (onConfirm) {\r\n        onConfirm()\r\n    } else {\r\n        console.log('no confirmation callback')\r\n    }\r\n    onConfirm = null\r\n    bodyContent = null\r\n}\r\n\r\nexport const confirmDialogCancel = () => (dispatch) => {\r\n    dispatch(close())\r\n    onConfirm = null\r\n    bodyContent = null\r\n}\r\n\r\nexport const confirmDialogGetBody = () => bodyContent\r\n\r\n// class confirmationDialog {\r\n//     constructor() {\r\n//         this.onConfirm = null\r\n//     }\r\n\r\n//     open = (message, content, onConfirm) => (dispatch, getState) => {\r\n//         const isOpen = selectIsConfirmDialogOpen(getState())\r\n//         if (isOpen) {\r\n//             console.log('Confirmation Dialog is already open!')\r\n//             return\r\n//         }\r\n\r\n//         this.onConfirm = onConfirm\r\n        \r\n//         dispatch(show({message, content}))\r\n//     }\r\n\r\n//     confirm = () => (dispatch, getState) => {\r\n//         const isOpen = selectIsConfirmDialogOpen(getState())\r\n//         if (!isOpen) {\r\n//             console.log('Confirmation Dialog is closed (can not confirm)!')\r\n//             return\r\n//         }\r\n    \r\n//         dispatch(close())\r\n//         if (this.onConfirm) {\r\n//             this.onConfirm()\r\n//         } else {\r\n//             console.log('no confirmation callback')\r\n//         }\r\n//         this.onConfirm = null\r\n//     }\r\n\r\n//     cancel = () => (dispatch) => {\r\n//         dispatch(close())\r\n//         this.onConfirm = null\r\n//     }\r\n// }\r\n\r\n// export const useConfirmationDialog = new confirmationDialog() \r\n\r\n// export const openConfirmDialog = (message) => (dispatch, getState) => {\r\n//     const isOpen = selectIsConfirmDialogOpen(getState())\r\n//     if (isOpen) {\r\n//         console.log('Confirmation Dialog is already open!')\r\n//         return\r\n//     }\r\n\r\n//     dispatch(show({message}))\r\n// }\r\n// export const closeConfirmDialog = (isConfirmed = false) => (dispatch, getState) => {\r\n//     const isOpen = selectIsConfirmDialogOpen(getState())\r\n//     if (!isOpen) {\r\n//         console.log('Confirmation Dialog is already closed!')\r\n//         return\r\n//     }\r\n\r\n//     if (isConfirmed) {\r\n//         getState().confirmation.onConfirm()\r\n//         dispatch(confirm())\r\n//     } else {\r\n//         dispatch(cancel())\r\n//     }\r\n// }\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { show, close/*, confirm, cancel*/ } = confirmationSlice.actions\r\n\r\nexport default confirmationSlice.reducer","import { createSelector } from 'reselect'\r\n\r\nexport const GROUP_ERRORS = {\r\n    atLeastOne: 'groupErrorAtLeastOne' // the name is the key in the language file \r\n}\r\n\r\nexport const OPTION_ERRORS = {\r\n    requirementsNotMet: 'optionRequirementsNotMet',\r\n    hasIncompatibilities: 'optionHasIncompatibilities'\r\n}\r\n\r\n// input selectors:\r\nconst selectGroupId = (state, groupId) =>               groupId\r\nconst selectOptionId = (state, optionId) =>             optionId\r\nconst selectModelName = (state, modelName) =>           modelName\r\nconst selectSectionId = (state, sectionId) =>           sectionId\r\n\r\nconst selectAllOptionIncompatibilities = state =>       state.configuration.configuration.rules.incompatibilities\r\nconst selectAllOptionRequirements = state =>            state.configuration.configuration.rules.requirements\r\nconst selectReplacementGroups = state =>                state.configuration.configuration.rules.replacementGroups\r\n\r\nconst selectAllGroupRequirements = state =>             state.configuration.configuration.rules.groupRequirements\r\n\r\nexport const selectConfigurationStatus = state =>       state.configuration.status\r\n\r\nexport const selectConfigurationId = (state) =>         state.configuration.configuration.configId\r\n\r\nexport const selectBasePrice = state =>                 state.configuration.configuration.rules?.basePrice || 0\r\nexport const selectPriceList = state =>                 state.configuration.configuration.rules?.priceList || []\r\n// export const selectDefaultOptions = state =>            state.configuration.configuration.rules?.defaultOptions || []\r\nexport const selectDefaultModel = state =>              state.configuration.configuration.rules?.defaultModel || ''\r\nexport const selectSelectedModel = state =>             state.configuration.selectedModel\r\nexport const selectModels = state =>                    state.configuration.configuration.rules?.models || []\r\nexport const selectDefaultOptions = state =>            state.configuration.configuration.rules?.defaultOptions || []\r\nexport const selectConfigurationName = state =>         state.configuration.configuration.name\r\nexport const selectConfigurationDescription = state =>  state.configuration.configuration.description\r\nexport const selectConfigurationImages = state =>       state.configuration.configuration.images\r\n\r\nexport const selectOptions = state =>                   state.configuration.configuration.options\r\nexport const selectOptionGroups = state =>              state.configuration.configuration.optionGroups\r\nexport const selectOptionSections = state =>            state.configuration.configuration.optionSections\r\nexport const selectSelectedOptions = state =>           state.configuration.selectedOptions || []\r\n\r\n\r\nexport const extractModelNameFromModel = model =>           model.name || ''\r\nexport const extractModelDescriptionFromModel = model =>    model.description || ''\r\nexport const extractModelOptionsFromModel = model =>        model.options || []\r\n\r\n// export const getCurrentModel = createSelector([selectModels, selectSelectedModel, selectDefaultModel], (models, selectedModel, defaultModel) => {\r\n//     const modelName = selectedModel ? selectedModel : defaultModel\r\n\r\n//     return models.find(m => m.name === modelName)\r\n// })\r\nexport const getModelOptions = createSelector([selectModels, selectModelName], (models, modelName) => {\r\n    const model = models.find(m => m.name === modelName)\r\n    console.log('model: ', model)\r\n    console.log('model options: ', model.options)\r\n\r\n    return model ? model.options : []\r\n})\r\n\r\nexport const getOptionsInSection = createSelector([selectSectionId, selectOptionGroups, selectOptionSections], (sectionId, groups, sections) => {\r\n    \r\n    // find the specific section\r\n    const section = sections.find(s => s.id === sectionId)\r\n    \r\n    // get all groups in that section\r\n    const groupsInSection = groups.filter(g => section.optionGroupIds.includes(g.id))\r\n\r\n    // get all options from these groups\r\n    let options = []\r\n    groupsInSection.forEach(g => {\r\n        options.push(...g.optionIds)\r\n    })\r\n\r\n    return options\r\n})\r\n\r\nexport const getOption = createSelector([selectOptions, selectOptionId], (options, id) => {\r\n    // console.log('Option output')\r\n    // console.log('---> ' + id)\r\n    return options.find(o => o.id === id)\r\n})\r\nexport const getOptionName = createSelector([getOption, selectOptionId], (option, id) => {\r\n    return option.name\r\n})\r\n\r\n\r\nexport const getIsOptionSelected = createSelector([selectSelectedOptions, selectOptionId], (selectedOptions, id) => {\r\n    // console.log('Is option selected output')\r\n    return selectedOptions.includes(id)\r\n})\r\n\r\n// all options that are in the same replacement group (or null if the option is in no replacement group)\r\nexport const getOptionReplacementGroup = createSelector([selectReplacementGroups, selectOptionId], (replacementGroups, id) => {\r\n    // console.log('Option replacement groups output')\r\n\r\n    for (let groupName of Object.keys(replacementGroups)) {\r\n        const replacementGroup = replacementGroups[groupName]\r\n        if (replacementGroup.includes(id)) {\r\n            return replacementGroup\r\n        }\r\n    }\r\n\r\n    return null\r\n})\r\n\r\n// -- getIsOptionSelectable -->\r\nconst getOptionIncompatibilities = createSelector([selectAllOptionIncompatibilities, selectOptionId], (incompatibilities, optionId) => {\r\n    // console.log('Option Incompatitbilities output')\r\n    return incompatibilities[optionId]\r\n})\r\nconst getIsOptionCompatible = createSelector([selectSelectedOptions, getOptionIncompatibilities], (selectedOptions, incompatibilities) => {\r\n    // returns an array:\r\n    //  -> 1. index: if the option is compatible or not\r\n    //  -> 2. index: options that are incompatible\r\n\r\n    if (!incompatibilities) return [true, null]\r\n\r\n    let compatible = true\r\n    let incompatibleOptions = []\r\n    incompatibilities.forEach(incompatibility => {\r\n        // if there is an incompatibility in the selected options, the option is not compatible\r\n        if (selectedOptions.includes(incompatibility)) {\r\n            compatible = false\r\n            incompatibleOptions.push(incompatibility)\r\n        }\r\n    })\r\n    return [compatible, incompatibleOptions]\r\n})\r\nconst getOptionRequirements = createSelector([selectAllOptionRequirements, selectOptionId], (requirements, optionId) => {\r\n    // console.log('Option Requirements output')\r\n    return requirements[optionId]\r\n})\r\nconst getIsOptionRequirementsMet = createSelector([selectSelectedOptions, getOptionRequirements], (selectedOptions, requirements) => {\r\n    // returns an array:\r\n    //  -> 1. index: if the options requirements are met or not (required options are selected)\r\n    //  -> 2. index: options that are required for this option\r\n\r\n    // console.log('Is option requirements met output')\r\n\r\n    if (!requirements) return [true, null] // if there are no requirements, return true\r\n    \r\n    let reqMet = true\r\n    let requiredOptions = []\r\n    requirements.forEach(requirement => {\r\n        // if there is a requirement not in the selected options, the option does not meet its requirements\r\n        if (!selectedOptions.includes(requirement)) {\r\n            reqMet = false\r\n            requiredOptions.push(requirement)\r\n        }\r\n    })\r\n    return [reqMet, requiredOptions]\r\n})\r\n// returns null ()\r\nexport const getIsOptionSelectable = createSelector([getIsOptionRequirementsMet, getIsOptionCompatible], (isRequirementsMet, isCompatible) => {\r\n    // console.log('Is option selectable output')\r\n\r\n    if (!isRequirementsMet[0])      return [OPTION_ERRORS.requirementsNotMet, isRequirementsMet[1]]//.join(', ') + (isRequirementsMet[1].length > 1 ? ' are ' : ' is ') + 'required!']\r\n    if (!isCompatible[0])           return [OPTION_ERRORS.hasIncompatibilities, isCompatible[1]]//'Not compatible with: ' + isCompatible[1].join(', ')\r\n\r\n    return null\r\n})\r\n// <-- getIsOptionSelectable --\r\n\r\n// -- group logic -->\r\nconst getGroupRequirements = createSelector([selectAllGroupRequirements, selectGroupId], (allRequirements, groupId) => {\r\n    const groupRequirements = allRequirements[groupId]\r\n    if (!groupRequirements) return []\r\n    return groupRequirements\r\n})\r\nconst getGroup = createSelector([selectOptionGroups, selectGroupId], (groups, groupId) => {\r\n    const selectedGroup = groups.find(g => g.id === groupId)\r\n    if (!selectedGroup) {\r\n        console.log('Can not get is group valid because there is no group with the id')\r\n        return null\r\n    }\r\n    return selectedGroup\r\n})\r\n// returns null (no error) or the specific error from 'GROUP_ERRORS'\r\nexport const getIsGroupValid = createSelector([getGroup, getGroupRequirements, selectOptionGroups, selectSelectedOptions], (selectedGroup, requirements, groups, selectedOptions) => {\r\n\r\n    // if the group is not required it is valid\r\n    if (!selectedGroup.required) return null\r\n\r\n    // if the group is required, but one of the required groups is not yet selected, it is also valid\r\n    const requiredGroups = groups.filter(g => requirements.includes(g.id))\r\n    let requirementsMet = true\r\n    requiredGroups.forEach(requirement => {\r\n        let groupSelected = false\r\n        requirement.optionIds.forEach(option => {\r\n            if (selectedOptions.includes(option)) {\r\n                groupSelected = true\r\n            }\r\n        })\r\n        // if just one group that is required for this group has not selected any options -> the requirements are not met\r\n        if (!groupSelected) requirementsMet = false\r\n    })\r\n    // the requirements are not yet selected -> this group is valid (cant select if the requirement is not selected)\r\n    if (!requirementsMet) return null\r\n\r\n    // the group is required and there is no option selected -> error at least has to be selected\r\n    let atLeastOneOptionSelected = false\r\n    selectedGroup.optionIds.forEach(option => {\r\n        if (selectedOptions.includes(option)) {\r\n            atLeastOneOptionSelected = true\r\n        }\r\n    })\r\n    if (!atLeastOneOptionSelected) {\r\n        return GROUP_ERRORS.atLeastOne\r\n    }\r\n\r\n    return null\r\n})\r\n// <-- group logic --\r\n\r\nexport const getOptionPrice = createSelector([selectPriceList, selectOptionId], (priceList, id) => {\r\n    // console.log('Option price output')\r\n    return priceList[id]\r\n})\r\n\r\n// the total price of all selected options plus the base price\r\nexport const getCurrentPrice = createSelector([selectSelectedOptions, selectBasePrice, selectPriceList], (selectedOptions, basePrice, priceList) => {\r\n    // console.log('Current Price output')\r\n\r\n    const price = selectedOptions.reduce((total, optionId) => {\r\n        if (priceList[optionId]) {\r\n            return total + priceList[optionId]\r\n        } else {\r\n            return total\r\n        }\r\n    }, basePrice)\r\n\r\n    return price\r\n})\r\n\r\n// the options that cant be used if this option is deselected\r\nexport const getDependentOptionsDeselect = createSelector(\r\n    [selectSelectedOptions, selectOptionId, selectAllOptionRequirements], \r\n    (selectedOptions, selectedOptionId, requirements) => {\r\n\r\n    let dependencies = dependenciesFromDependencyLists(selectedOptionId, requirements)\r\n\r\n    // only get the dependencies from the selected options\r\n    dependencies = dependencies.filter(d => selectedOptions.includes(d))\r\n\r\n    return dependencies\r\n})\r\n// the options that cant be used if this option selected\r\nexport const getDependentOptionsSelect = createSelector(\r\n    [selectSelectedOptions, selectOptionId, selectAllOptionIncompatibilities], \r\n    (selectedOptions, selectedOptionId, incompatibilities) => {\r\n\r\n    let dependencies = dependenciesFromDependencyLists(selectedOptionId, incompatibilities)\r\n    \r\n    // only get the dependencies from the selected options\r\n    dependencies = dependencies.filter(d => selectedOptions.includes(d))\r\n\r\n    return dependencies\r\n})\r\nfunction dependenciesFromDependencyLists(dependentOption, ...dependencyLists) {\r\n    let dependencies = []\r\n\r\n    // for every dependency list\r\n    for (const dependencyList of dependencyLists) {\r\n\r\n        // for every dependency in the dependency list\r\n        for (const dependency in dependencyList) {\r\n            // check if the dependent option is included in the dependencies\r\n            if (dependencyList[dependency].includes(dependentOption)) {\r\n                // add the dependency (the option that depends on the dependentOption)\r\n                dependencies.push(dependency)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return dependencies\r\n}","import { Typography } from '@mui/material'\r\nimport { green, red } from '@mui/material/colors'\r\nimport { Box } from '@mui/system'\r\nimport React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getOption } from '../../../../state/configuration/configurationSelectors'\r\n\r\nfunction OptionListItem({ optionId, highlight, name, description, image }) {\r\n    let bgCol = 'none'\r\n    if (highlight === 'add')    bgCol = green[500]\r\n    if (highlight === 'remove') bgCol = red[500]\r\n    \r\n    return (\r\n        <Box padding={1} margin={1} sx={{backgroundColor: bgCol}}>\r\n            <Typography variant=\"body1\">{name}</Typography>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const option = getOption(state, ownProps.optionId)\r\n    return {\r\n        name: option.name,\r\n        description: option.description,\r\n        image: option.image\r\n    }\r\n}\r\nconst mapDispatchToProps = {}\r\nexport default connect(\r\n    mapStateToProps, \r\n    mapDispatchToProps\r\n)(OptionListItem)\r\n","import React from 'react'\r\nimport Button from '@mui/material/Button'\r\nimport Dialog from '@mui/material/Dialog'\r\nimport DialogActions from '@mui/material/DialogActions'\r\nimport DialogContent from '@mui/material/DialogContent'\r\nimport DialogContentText from '@mui/material/DialogContentText'\r\nimport DialogTitle from '@mui/material/DialogTitle'\r\nimport { selectConfirmDialogData, selectConfirmDialogMessage, selectIsConfirmDialogOpen } from '../../state/confirmationDialog/confirmationSelectors'\r\nimport { connect } from 'react-redux'\r\nimport { confirmDialogCancel, confirmDialogConfirm, confirmDialogGetBody } from '../../state/confirmationDialog/confirmationSlice'\r\nimport { translate } from '../../lang'\r\nimport { selectLanguage } from '../../state/language/languageSelectors'\r\nimport { Grid, Typography } from '@mui/material'\r\nimport OptionListItem from '../configuration/Configurator/Options/OptionListItem'\r\nimport { Box } from '@mui/system'\r\n\r\nfunction ConfirmationOptionSelect({ isOpen, message, content, optionsToSelect, optionsToRemove, selectedOption, deselectedOption, cancel, confirm, text }) {\r\n    \r\n    if (!optionsToSelect) optionsToSelect = []\r\n    if (!optionsToRemove) optionsToRemove = []\r\n\r\n    function handleClose() {\r\n        cancel()\r\n    }\r\n\r\n    function handleConfirm() {\r\n        confirm()\r\n    }\r\n\r\n    function renderDialogContent() {\r\n        if (optionsToSelect.length > 0 || optionsToRemove.length > 0) {\r\n            return (\r\n                <div>\r\n                    <Box marginBottom={2}>\r\n                        {renderDialogContentHeader()}\r\n                    </Box>\r\n                    {renderDialogContentOptions(optionsToSelect)}\r\n                    {renderDialogContentOptions(optionsToRemove, false)}\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <>\r\n                <DialogContentText>\r\n                    {message}\r\n                </DialogContentText>\r\n                {content}\r\n            </>\r\n        )\r\n    }\r\n    function renderDialogContentHeader() {\r\n        return (\r\n            <>\r\n                <Typography variant=\"body1\">\r\n                    {selectedOption ? \r\n                        `${text.youWantToSelect}: `\r\n                        :\r\n                        `${text.youWantToRemove}: `\r\n                    }\r\n\r\n                </Typography>\r\n                <Grid container justifyContent=\"center\">\r\n                    <OptionListItem optionId={selectedOption || deselectedOption} highlight=\"add\"></OptionListItem>\r\n                </Grid>\r\n            </>\r\n        )\r\n    }\r\n    function renderDialogContentOptions(options, selected = true) {\r\n        if (options.length > 0) {\r\n            return (\r\n                <Box>\r\n                    <Typography variant=\"body1\">\r\n                        {selected ? \r\n                            `${text.youAlsoNeedToSelect}: `\r\n                            :\r\n                            `${text.theseOptionsWillBeRemoved}: `\r\n                        }\r\n                    </Typography>\r\n                    <Grid container direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                        {options.map(optionId => (\r\n                            <OptionListItem key={optionId} optionId={optionId} highlight={selected ? 'add' : 'remove'}></OptionListItem>\r\n                        ))}\r\n                    </Grid>\r\n                </Box>\r\n            )\r\n        }\r\n        return ''\r\n    }\r\n\r\n\r\n    return (\r\n        <Dialog\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            scroll=\"paper\"\r\n            aria-labelledby=\"responsive-dialog-title\"\r\n            fullWidth\r\n        >\r\n            <DialogTitle id=\"responsive-dialog-title\">\r\n                {text.confirmationPrompt}\r\n            </DialogTitle>\r\n\r\n            <DialogContent dividers={true}>\r\n                {renderDialogContent()}\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Button autoFocus onClick={handleClose}>\r\n                    {text.cancel}\r\n                </Button>\r\n                <Button autoFocus onClick={handleConfirm}>\r\n                    {text.confirm}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const language = selectLanguage(state)\r\n    return {\r\n        content: confirmDialogGetBody(),\r\n        message: selectConfirmDialogMessage(state),\r\n        isOpen: selectIsConfirmDialogOpen(state),\r\n        selectedOption: selectConfirmDialogData(state).selected,\r\n        deselectedOption: selectConfirmDialogData(state).deselected,\r\n        optionsToSelect: selectConfirmDialogData(state).optionsToSelect,\r\n        optionsToRemove: selectConfirmDialogData(state).optionsToRemove,\r\n        text: {\r\n            cancel: translate('cancel', language),\r\n            confirm: translate('confirm', language),\r\n            confirmationPrompt: translate('confirmationPrompt', language),\r\n            youWantToSelect: translate('youWantToSelect', language),\r\n            youWantToRemove: translate('youWantToRemove', language),\r\n            theseOptionsWillBeRemoved: translate('theseOptionsWillBeRemoved', language),\r\n            youAlsoNeedToSelect: translate('youAlsoNeedToSelect', language)\r\n        }\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    cancel: confirmDialogCancel,\r\n    confirm: confirmDialogConfirm,\r\n\r\n    // cancel: useConfirmationDialog.cancel,\r\n    // confirm: useConfirmationDialog.confirm,\r\n\r\n    // openedDialog: openConfirmDialog,\r\n    // closedDialog: closeConfirmDialog\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ConfirmationOptionSelect)","import { Button, Checkbox, Dialog, DialogActions, DialogContent, DialogTitle, FormControlLabel, TextField } from '@mui/material'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { translate } from '../../lang'\r\nimport { selectInputDialogData, selectInputDialogHeaderMessage, selectIsInputDialogOpen } from '../../state/inputDialog/inputDialogSelectors'\r\nimport { inputDialogCancel, inputDialogConfirm, inputDialogSetData } from '../../state/inputDialog/inputDialogSlice'\r\nimport { selectLanguage } from '../../state/language/languageSelectors'\r\n\r\nfunction InputDialog({ isOpen, dialogTitle, inputData, cancel, confirm, setInputData, text }) {\r\n    \r\n    const [localData, setLocalData] = useState({...inputData})\r\n    useEffect(() => {\r\n        setLocalData({...inputData})\r\n    }, [inputData])\r\n\r\n    function valuesChanged(key, value) {\r\n        setLocalData(prevData => ({\r\n            ...prevData,\r\n            [key]: {\r\n                ...prevData[key],\r\n                value // data[key][value]\r\n            }\r\n        }))\r\n    }\r\n    \r\n    function handleClose() {\r\n        cancel()\r\n    }\r\n\r\n    function handleConfirm() {\r\n        // check if every field has an input\r\n        let valid = true\r\n        for (const key in localData) {\r\n            if (!localData[key].value && !localData[key].isCheckBox) valid = false\r\n        }\r\n        if (!valid) return\r\n\r\n        setInputData(localData)\r\n        confirm()\r\n    }\r\n\r\n    function renderInputField(inputdata, key, index) {\r\n        const data = inputdata[key]\r\n\r\n        if (data.isCheckBox) {\r\n            return (\r\n                <FormControlLabel\r\n                    key={index}\r\n                    label={data.name}\r\n                    labelPlacement=\"start\"\r\n                    control={\r\n                        <Checkbox\r\n                            checked={localData[key].value}\r\n                            onChange={(event) => {\r\n                                valuesChanged(key, !localData[key].value)\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n            )\r\n        }\r\n        return (\r\n            <TextField\r\n                key={index}\r\n                autoFocus\r\n                autoComplete={inputData[key].isPassword ? \"current-password\" : \"text\"}\r\n                margin=\"dense\"\r\n                label={inputData[key].name}\r\n                type={inputData[key].isEmail ? 'email' : inputData[key].isPassword ? 'password' : 'text'}\r\n                fullWidth\r\n                variant=\"standard\"\r\n                value={localData[key].value}\r\n                error={!localData[key].value}\r\n                onChange={(event) => valuesChanged(key, event.target.value)}\r\n            />\r\n        )\r\n    }\r\n\r\n    function renderDialogContent() {\r\n        // if there is no data (or not yet), return no content\r\n        if (Object.keys(localData).length === 0) return (<></>)\r\n\r\n        return (\r\n            <form>\r\n                {Object.keys(inputData).map((key, index) => {\r\n                    return renderInputField(inputData, key, index)\r\n                })}\r\n            </form>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={isOpen}\r\n                onClose={handleClose}\r\n                scroll=\"paper\"\r\n                aria-labelledby=\"responsive-dialog-title\"\r\n            >\r\n                <DialogTitle id=\"responsive-dialog-title\">\r\n                    {dialogTitle}\r\n                </DialogTitle>\r\n\r\n                <DialogContent dividers={true}>\r\n                    {renderDialogContent()}\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleClose}>\r\n                        {text.cancel}\r\n                    </Button>\r\n                    <Button autoFocus onClick={handleConfirm}>\r\n                        {text.submit}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const language = selectLanguage(state)\r\n    return {\r\n        inputData: selectInputDialogData(state),\r\n        isOpen: selectIsInputDialogOpen(state),\r\n        dialogTitle: selectInputDialogHeaderMessage(state), // already translated\r\n        text: { // so that the text is not translated at every render\r\n            cancel: translate('cancel', language),\r\n            submit: translate('submit', language),\r\n        }\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    cancel: inputDialogCancel,\r\n    confirm: inputDialogConfirm,\r\n    setInputData: inputDialogSetData\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(InputDialog)","import { alertStatus } from './alertSlice'\r\n\r\nexport const selectIsAlertOpen = (state) =>         state.alert.status === alertStatus.OPEN\r\nexport const selectCurrentAlert = (state) =>        state.alert.alerts[0]","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { selectCurrentAlert, selectIsAlertOpen } from '../../state/alert/alertSelectors'\r\nimport { closeAlert } from '../../state/alert/alertSlice'\r\nimport Swal from 'sweetalert2'\r\n\r\nfunction GenericAlert({ isOpen, alert, close }) {\r\n\r\n    // Alert settings\r\n    const Toast = Swal.mixin({\r\n        toast: true,\r\n        position: 'top-end',\r\n        showConfirmButton: false,\r\n        timer: 3000,\r\n        timerProgressBar: true,\r\n        didOpen: (toast) => {\r\n            toast.addEventListener('mouseenter', Swal.stopTimer)\r\n            toast.addEventListener('mouseleave', Swal.resumeTimer)\r\n        },\r\n        didClose: () => {\r\n            close()\r\n        }\r\n    })\r\n\r\n    const renderAlert = () => {\r\n        // dont fire an alert, if the alert is not open, there is no alert data or the alert is already visible\r\n        if (!isOpen)            return\r\n        if (!alert)             return\r\n        if (Toast.isVisible())  return\r\n\r\n        Toast.fire({\r\n            icon: alert.type,\r\n            title: alert.message\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {renderAlert()}\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    isOpen: selectIsAlertOpen(state),\r\n    alert: selectCurrentAlert(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    close: closeAlert\r\n}\r\nexport default connect(\r\n    mapStateToProps, \r\n    mapDispatchToProps\r\n)(GenericAlert)\r\n","export const selectProducts = state =>                      state.product.products\r\nexport const selectProductError = state =>                  state.product.error\r\nexport const selectProductStatus = state =>                 state.product.status\r\n\r\nexport const extractIdFromProduct = product =>              product.configId\r\nexport const extractNameFromProduct = product =>            product.name\r\nexport const extractDescriptionFromProduct = product =>     product.description\r\nexport const extractImagesFromProduct = product =>          product.images","import React from 'react'\r\nimport { ImageListItem, ImageListItemBar } from '@mui/material'\r\nimport { useNavigate } from 'react-router'\r\nimport { extractDescriptionFromProduct, extractIdFromProduct, extractImagesFromProduct, extractNameFromProduct } from '../../state/product/productSelector'\r\nimport { getImageSource } from '../../App'\r\n\r\nexport default function Product({ product }) {\r\n    const navigate = useNavigate()\r\n\r\n    const configId = extractIdFromProduct(product)\r\n    const name = extractNameFromProduct(product)\r\n    const description = extractDescriptionFromProduct(product)\r\n    const images = extractImagesFromProduct(product)\r\n\r\n    const image = images[0]\r\n\r\n    const imageSource = getImageSource(image)\r\n    \r\n    function handleClick() {\r\n        console.log(`clicked on: ${name} (id ${configId})`)\r\n        navigate(`/configuration/${configId}`)\r\n    }\r\n\r\n    return (\r\n        <ImageListItem key={imageSource} sx={{width: '100%', ':hover': {cursor: 'pointer'}}} onClick={handleClick}>\r\n            <img\r\n                width=\"100%\"\r\n                src={`${imageSource}?w=248&fit=crop&auto=format`}\r\n                srcSet={`${imageSource}?w=248&fit=crop&auto=format&dpr=2 2x`}\r\n                alt={name}\r\n                loading=\"lazy\"\r\n            />\r\n            <ImageListItemBar\r\n                title={name}\r\n                subtitle={description}\r\n            />\r\n        </ImageListItem>\r\n    )\r\n}","import React from 'react'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Route,\r\n    Routes\r\n} from 'react-router-dom'\r\nimport { ThemeProvider } from '@mui/material/styles'\r\nimport { Container, Typography } from '@mui/material'\r\nimport Header from './components/header/Header'\r\nimport ConfirmationOptionSelect from './components/dialog/ConfirmationDialog'\r\nimport InputDialog from './components/dialog/InputDialog'\r\nimport GenericAlert from './components/alert/GenericAlert'\r\nimport ProductView from './components/products/ProductView'\r\nimport AccountView from './components/account/AccountView'\r\nimport ConfigurationBuilderView from './components/configuration/Builder/ConfigurationBuilderView'\r\nimport ConfigurationView from './components/configuration/Configurator/ConfigurationView'\r\nimport theme from './Theme'\r\n\r\nfunction App() {\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Container sx={{padding: 0}} maxWidth=\"xl\" className=\"App\">\r\n                <Router>\r\n                    <Header></Header>\r\n                    <ConfirmationOptionSelect></ConfirmationOptionSelect>\r\n                    <InputDialog></InputDialog>\r\n                    <GenericAlert></GenericAlert>\r\n\r\n                    <Routes>\r\n\r\n                        <Route exact path=\"/\" element={\r\n                            <ProductView></ProductView>\r\n                        }>\r\n                        </Route>\r\n\r\n                        <Route exact path=\"/account/:tab\" element={<AccountView></AccountView>}></Route>\r\n                        <Route exact path=\"/account\" element={<AccountView></AccountView>}></Route>\r\n\r\n                        <Route exact path=\"/configuration/:id\" element={\r\n                            <ConfigurationView></ConfigurationView>\r\n                        }>\r\n                        </Route>\r\n\r\n                        <Route exact path=\"/create\" element={\r\n                            <ConfigurationBuilderView></ConfigurationBuilderView>\r\n                        }>\r\n                        </Route>\r\n\r\n                        <Route path=\"*\" element={\r\n                            <Typography variant=\"h2\">Not Found!</Typography>\r\n                        }>\r\n                        </Route>\r\n\r\n                    </Routes>\r\n                </Router>\r\n            </Container>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport function getImageSource(image) {\r\n    let imageSource = ''\r\n\r\n    try {\r\n        const src = require(`./assets/img/${image.replace('./', '')}`)\r\n        imageSource = src.default\r\n    } catch (err) {\r\n        console.log(`image '${image}' no found!`)\r\n        const src = require(`./assets/img/notfound.jpg`)\r\n        imageSource = src.default\r\n    } finally {\r\n        return imageSource\r\n    }\r\n}\r\n\r\nexport function writeToLocalStorage(data, key) {\r\n    try {\r\n        data = JSON.stringify(data)\r\n        localStorage.setItem(key, data)\r\n        // console.log('Saved to storage!')\r\n        // console.log(data)\r\n    } catch(err) {\r\n        console.log('Can not save the to local storage!')\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport function readFromLocalStorage(key) {\r\n    let data = null\r\n    try {\r\n        data = JSON.parse(localStorage.getItem(key))\r\n    } catch(err) {\r\n        console.log('Can not load from local storage!')\r\n        console.log(err)\r\n    }\r\n\r\n    return data\r\n}\r\n\r\nexport default App","import axios from 'axios'\r\nimport { baseURL, LOCAL_DATA } from './general'\r\n\r\nexport const fetchAll = () => {\r\n    if (LOCAL_DATA) {\r\n        return fetchApiTest()\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(`${baseURL}/products`)\r\n        .then(res => {\r\n            if (!res.data) {\r\n                console.log('no response data')\r\n                resolve([])\r\n            }\r\n            console.log(res.data)\r\n            resolve(res.data)\r\n        })\r\n        .catch(err => {\r\n            console.log(err.toString())\r\n            reject(err.toString())\r\n        })\r\n    })\r\n}\r\n\r\nexport const postOrderConfiguredProduct = (configurationId, name, selectedOptions, price, model = '') => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        if (LOCAL_DATA) {\r\n            reject('Ordering not available in test mode!')\r\n            // resolve()\r\n        }\r\n        \r\n\r\n        const data = {\r\n            configurationName: name,\r\n            options: selectedOptions,\r\n            price: price,\r\n            model\r\n        }\r\n        console.log(data)\r\n\r\n        axios.post(`${baseURL}/products/${configurationId}`, data)\r\n        .then(res => {\r\n            resolve(res.data)\r\n        })\r\n        .catch(err => {\r\n            reject('API not reachable')\r\n        })\r\n\r\n    })\r\n}\r\n\r\n\r\n// A mock function to mimic making an async request for data\r\nfunction fetchApiTest(amount = products.length) {\r\n    return new Promise((resolve, reject) =>\r\n        // setTimeout(() => reject('AUTHENTICATION_FAILED'), 500)\r\n        setTimeout(() => resolve(products), 500)\r\n    )\r\n}\r\n\r\nconst products = [\r\n    {\r\n        configId: '0',\r\n        name: 'Auto',\r\n        description: 'Das Auto der nächsten Generation',\r\n        images: ['vw-golf-r-2021.jpg']\r\n    },\r\n    // {\r\n    //     configId: 1,\r\n    //     name: 'Computer',\r\n    //     description: 'high end computer',\r\n    //     images: ['Computer0.jpg']\r\n    // },\r\n    // {\r\n    //     configId: 2,\r\n    //     name: 'watch',\r\n    //     description: 'entry level watch',\r\n    //     images: ['Watch0.jpg']\r\n    // },\r\n    // {\r\n    //     configId: 3,\r\n    //     name: 'watch',\r\n    //     description: 'entry level watch',\r\n    //     images: ['Watch0.jpg']\r\n    // },\r\n    // {\r\n    //     configId: 4,\r\n    //     name: 'watch',\r\n    //     description: 'entry level watch',\r\n    //     images: ['Watch0.jpg']\r\n    // },\r\n    // {\r\n    //     configId: 5,\r\n    //     name: 'Computer',\r\n    //     description: 'high end computer',\r\n    //     images: ['Computer0123.jpg']\r\n    // }\r\n]","import { createSlice } from '@reduxjs/toolkit'\r\nimport { fetchAll } from '../../api/productsAPI'\r\nimport { alertTypes, openAlert } from '../alert/alertSlice'\r\n\r\nconst initialState = {\r\n    products: [],\r\n    status: 'idle', // | 'loading' | 'succeeded' | 'failed'\r\n    error: null\r\n}\r\n\r\nexport const productSlice = createSlice({\r\n    name: 'product',\r\n    initialState,\r\n    reducers: {\r\n        loadingStarted: (state) => {\r\n            console.log('fetching products...')\r\n            state.status = 'loading'\r\n        },\r\n        loadingSucceeded: (state, action) => {\r\n            console.log('products loaded:', action.payload)\r\n            state.status = 'succeeded'\r\n            state.products = action.payload\r\n        },\r\n        loadingFailed: (state, action) => {\r\n            console.log('products loading failed:', action.payload)\r\n            state.status = 'failed'\r\n            state.error = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nexport const fetchProducts = () => async (dispatch) => {\r\n    dispatch(loadingStarted())\r\n\r\n    fetchAll()\r\n    .then(res => {\r\n        dispatch(loadingSucceeded(res))\r\n    })\r\n    .catch(err => {\r\n        dispatch(openAlert(err, alertTypes.ERROR))\r\n        dispatch(loadingFailed(err))\r\n    })\r\n}\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { loadingStarted, loadingSucceeded, loadingFailed } = productSlice.actions\r\n\r\nexport default productSlice.reducer","import { Typography } from '@mui/material'\r\nimport React from 'react'\r\n\r\nexport default function Loader() {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h2\">\r\n                Loading...\r\n            </Typography>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport Product from './Product'\r\nimport { connect } from 'react-redux'\r\nimport { Grid, Typography } from '@mui/material'\r\nimport { fetchProducts } from '../../state/product/productSlice'\r\nimport { selectProductError, selectProducts, selectProductStatus } from '../../state/product/productSelector'\r\nimport { selectLanguage } from '../../state/language/languageSelectors'\r\nimport { translate } from '../../lang'\r\nimport Loader from '../Loader'\r\n\r\nfunction ProductView({ products = [], status, error, fetchProducts, language }) {\r\n\r\n    const isEmpty = products.length === 0 ? true : false\r\n\r\n    useEffect(() => {\r\n        if (isEmpty) {\r\n            console.log('calling to fetch products...')\r\n            fetchProducts()\r\n        }\r\n    }, [fetchProducts, isEmpty])\r\n\r\n    function render() {\r\n        switch (status) {\r\n            case 'loading':\r\n                return renderLoadingProducts()\r\n            case 'succeeded':\r\n                return (isEmpty ? renderEmptyProducts() : renderProducts())\r\n            case 'failed':\r\n                return renderApiFailed(error)\r\n            default:\r\n                return renderLoadingProducts()\r\n        }\r\n    }\r\n\r\n    function renderLoadingProducts() {\r\n        return (\r\n            <Loader></Loader>\r\n        )\r\n    }\r\n\r\n    function renderEmptyProducts() {\r\n        return (\r\n            <Typography variant=\"h2\">{translate('noProductsFound', language)}</Typography>\r\n        )\r\n    }\r\n    function renderProducts() {\r\n        return (\r\n            <Grid container columns={12} spacing={2} sx={{paddingTop: 2, marginRight: 4}}>\r\n                {products.map((product, index) => (\r\n                    <Grid item sm={12} md={6} lg={4} xl={3} width=\"100%\" key={index}>\r\n                        <Product product={product}></Product>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    function renderApiFailed(errorMessage) {\r\n        return (\r\n            <div>\r\n                <Typography variant=\"h2\">{translate('failedToLoadProducts', language)}</Typography>\r\n                <Typography variant=\"body1\">{translate(errorMessage, language)}</Typography>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        render()\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    products: selectProducts(state),\r\n    status: selectProductStatus(state),\r\n    error: selectProductError(state),\r\n    language: selectLanguage(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    fetchProducts\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ProductView)","import axios from 'axios'\r\nimport { baseURL, LOCAL_DATA } from './general'\r\n\r\nexport const fetchId = (productId) => {\r\n    if (LOCAL_DATA) {\r\n        return fetchApiTest(productId)\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(`${baseURL}/configuration/${productId}`)\r\n        \r\n        // axios.get(`${baseURL}/configuration/Golf`)\r\n        .then(res => {\r\n            resolve(res.data)\r\n        })\r\n        .catch(err => {\r\n            reject(err.toString())\r\n        })\r\n    })\r\n}\r\n\r\nexport const postConfiguration = (newConfiguration) => {\r\n    return new Promise((resolve, reject) => {\r\n        if (LOCAL_DATA) {\r\n            reject('Posting a new configuration not available in test mode!')\r\n            return\r\n        }\r\n\r\n        const data = {\r\n            ...newConfiguration\r\n        }\r\n        console.log(data)\r\n        axios.post(`${baseURL}/configuration`, data)\r\n        .then(res => {\r\n            resolve(res.data)\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n            reject('Api unreachable')\r\n        })\r\n    })\r\n}\r\n\r\n// A mock api request function to mimic making an async request for data\r\nconst testDelay = 0;\r\nfunction fetchApiTest(configId) {\r\n    return new Promise((resolve, reject) =>\r\n        setTimeout(() => {\r\n\r\n            const conf = configurations.find(c => c.configId === configId)\r\n            if (!conf) {\r\n                reject('NO_CONFIGURATION_FOUND')\r\n                return\r\n            }\r\n            else if (!conf.options || !conf.optionGroups || !conf.optionSections || !conf.rules) {\r\n                reject('CONFIGURATION_INVALID')\r\n                return\r\n            }\r\n\r\n            resolve(conf)\r\n\r\n        }, testDelay)\r\n    )\r\n}\r\n\r\nconst configurations = [\r\n    {\r\n        configId: '0',\r\n        name: 'Auto',\r\n        description: 'Das Auto der nächsten Generation',\r\n        images: [], // 'vw-golf-r-2021.jpg', 'vw-golf-r-2021.jpg', 'vw-golf-r-2021.jpg'\r\n        options: [\r\n            {\r\n                id: 'BLUE',\r\n                name: 'Blau',\r\n                description: 'Blaue Außenfarbe',\r\n            },\r\n            {\r\n                id: 'YELLOW',\r\n                name: 'Gelb',\r\n                description: 'Gelbe Außenfarbe',\r\n            },\r\n            {\r\n                id: 'GREEN',\r\n                name: 'Grün',\r\n                description: 'Grüne Außenfarbe',\r\n            },\r\n            {\r\n                id: 'DIESEL',\r\n                name: 'Dieselmotor',\r\n                description: 'Motor mit Diesel Treibstoff',\r\n            },\r\n            {\r\n                id: 'PETROL',\r\n                name: 'Benzinmotor',\r\n                description: 'Motor mit Benzin Treibstoff',\r\n            },\r\n            {\r\n                id: 'D150',\r\n                name: '150 PS Dieselmotor',\r\n                description: 'Ein V4 Dieselmotor mit 150 PS',\r\n            },\r\n            {\r\n                id: 'D250',\r\n                name: '250 PS Diesel Motor',\r\n                description: 'Ein V6 Dieselmotor mit 250 PS',\r\n            },\r\n            {\r\n                id: 'P220',\r\n                name: '220 PS Petrol Motor',\r\n                description: 'Ein V6 Benzinmotor mit 220 PS',\r\n            },\r\n            {\r\n                id: 'P450',\r\n                name: '450 PS Petrol Motor',\r\n                description: 'Ein V8 Benzinmotor mit 450 PS',\r\n            },\r\n            {\r\n                id: 'PANORAMAROOF',\r\n                name: 'Panoramadach',\r\n                description: 'Panoramadach',\r\n            },\r\n            {\r\n                id: 'PANORAMASMALL',\r\n                name: 'Panorama Klein',\r\n                description: 'Ein kleines Glasdach',\r\n            },\r\n            {\r\n                id: 'PANORAMALARGE',\r\n                name: 'Panorama Groß',\r\n                description: 'Ein großes Glasdach',\r\n            },\r\n            {\r\n                id: 'HEATED_SEATS',\r\n                name: 'Sitzheitzung',\r\n                description: 'Vordersitze sind beheizt',\r\n            }, \r\n            {\r\n                id:  'HIGH_QUALITY_SOUND_SYSTEM',\r\n                name: 'Premium Soundsystem',\r\n                description: 'Premium Soundsystem',\r\n            }, \r\n            {\r\n                id: 'DRIVE_ASSISTENCE',\r\n                name: 'Fahrassistenz',\r\n                description: 'Extra Fahrassistenz inklusive cruise control, adaptive Tempomat und Spurhalteassistent',\r\n            }\r\n        ],\r\n        optionSections: [\r\n            {\r\n                id: 'EXTERIOR',\r\n                name: 'Außenbereich',\r\n                optionGroupIds: [\r\n                    'COLOR_GROUP'\r\n                ]\r\n            },\r\n            {\r\n                id: 'MOTOR_SECTION',\r\n                name: 'Motor',\r\n                optionGroupIds: [\r\n                    'MOTORTYPE_GROUP', 'MOTOR_GROUP'\r\n                ]\r\n            },\r\n            {\r\n                id: 'PANORAMA_SECTION',\r\n                name: 'Panorama',\r\n                optionGroupIds: [\r\n                    'PANORAMA_GROUP', 'PANORAMATYPE_GROUP'\r\n                ]\r\n            },\r\n            {\r\n                id: 'EXTRAS',\r\n                name: 'Extras',\r\n                optionGroupIds: [\r\n                    'EXTRAS_GROUP'\r\n                ]\r\n            }\r\n        ],\r\n        optionGroups: [\r\n            {\r\n                id: 'COLOR_GROUP',\r\n                name: 'Farbe',\r\n                description: 'Die Außenfarbe des Autos',\r\n                optionIds: [\r\n                    'BLUE', 'YELLOW', 'GREEN'\r\n                ],\r\n                required: true\r\n            },\r\n            {\r\n                id: 'MOTORTYPE_GROUP',\r\n                name: 'Motortyp',\r\n                description: 'Art des Motors',\r\n                optionIds: [\r\n                    'DIESEL', 'PETROL'\r\n                ],\r\n                required: true\r\n            },\r\n            {\r\n                id: 'MOTOR_GROUP',\r\n                name: 'Motor',\r\n                description: 'Spezifischer Motor',\r\n                optionIds: [\r\n                    'D150', 'D250', 'P220', 'P450'\r\n                ],\r\n                required: true\r\n            },\r\n            {\r\n                id: 'PANORAMA_GROUP',\r\n                name: 'Panoramadach',\r\n                description: '',\r\n                optionIds: [\r\n                    'PANORAMAROOF'\r\n                ],\r\n                required: false\r\n            },\r\n            {\r\n                id: 'PANORAMATYPE_GROUP',\r\n                name: 'Panoramadachgröße',\r\n                description: 'Art und Größe des Panoramadachs',\r\n                optionIds: [\r\n                    'PANORAMASMALL', 'PANORAMALARGE'\r\n                ],\r\n                required: true\r\n            },\r\n            {\r\n                id: 'EXTRAS_GROUP',\r\n                name: 'Extras',\r\n                description: 'Besonderheiten für dein individuelles Auto',\r\n                optionIds: [\r\n                    'HEATED_SEATS', 'HIGH_QUALITY_SOUND_SYSTEM', 'DRIVE_ASSISTENCE'\r\n                ],\r\n                required: false\r\n            }\r\n        ],\r\n        // options: [\r\n        //     {\r\n        //         id: 'BLUE',\r\n        //         name: 'Blue',\r\n        //         description: 'A blue color',\r\n        //     },\r\n        //     {\r\n        //         id: 'YELLOW',\r\n        //         name: 'Yellow',\r\n        //         description: 'A yellow color',\r\n        //     },\r\n        //     {\r\n        //         id: 'GREEN',\r\n        //         name: 'Green',\r\n        //         description: 'A green color',\r\n        //     },\r\n        //     {\r\n        //         id: 'DIESEL',\r\n        //         name: 'Diesel Motor',\r\n        //         description: 'a motor driven by diesel fuel',\r\n        //     },\r\n        //     {\r\n        //         id: 'PETROL',\r\n        //         name: 'Petrol Motor',\r\n        //         description: 'a motor driven by petrol fuel',\r\n        //     },\r\n        //     {\r\n        //         id: 'D150',\r\n        //         name: '150 PS Diesel Motor',\r\n        //         description: 'a diesel V4 motor with 150 PS',\r\n        //     },\r\n        //     {\r\n        //         id: 'D250',\r\n        //         name: '250 PS Diesel Motor',\r\n        //         description: 'a diesel V6 motor with 250 PS',\r\n        //     },\r\n        //     {\r\n        //         id: 'P220',\r\n        //         name: '220 PS Petrol Motor',\r\n        //         description: 'a petrol V6 motor with 220 PS',\r\n        //     },\r\n        //     {\r\n        //         id: 'P450',\r\n        //         name: '450 PS Petrol Motor',\r\n        //         description: 'a petrol V8 motor with 450 PS',\r\n        //     },\r\n        //     {\r\n        //         id: 'PANORAMAROOF',\r\n        //         name: 'Panoramic Roof',\r\n        //         description: 'a glass roof for an open feeling',\r\n        //     },\r\n        //     {\r\n        //         id: 'PANORAMASMALL',\r\n        //         name: 'Small Panorama',\r\n        //         description: 'a small glass roof',\r\n        //     },\r\n        //     {\r\n        //         id: 'PANORAMALARGE',\r\n        //         name: 'Large Panorama',\r\n        //         description: 'a large glass roof for an amazing open feeling',\r\n        //     },\r\n        //     {\r\n        //         id: 'HEATED_SEATS',\r\n        //         name: 'Heated Seats',\r\n        //         description: 'the two seats in the front can be heated',\r\n        //     }, \r\n        //     {\r\n        //         id:  'HIGH_QUALITY_SOUND_SYSTEM',\r\n        //         name: 'High Quality Sound System',\r\n        //         description: 'premium sound system with high res audio',\r\n        //     }, \r\n        //     {\r\n        //         id: 'DRIVE_ASSISTENCE',\r\n        //         name: 'Drive Assistence',\r\n        //         description: 'extra driving assistence including cruise control, adaptive cruise control and a lane keeping assistent',\r\n        //     }\r\n        // ],\r\n        // optionSections: [\r\n        //     {\r\n        //         id: 'EXTERIOR',\r\n        //         name: 'Exterior',\r\n        //         optionGroupIds: [\r\n        //             'COLOR_GROUP'\r\n        //         ]\r\n        //     },\r\n        //     {\r\n        //         id: 'MOTOR_SECTION',\r\n        //         name: 'Motor',\r\n        //         optionGroupIds: [\r\n        //             'MOTORTYPE_GROUP', 'MOTOR_GROUP'\r\n        //         ]\r\n        //     },\r\n        //     {\r\n        //         id: 'PANORAMA_SECTION',\r\n        //         name: 'Panorama',\r\n        //         optionGroupIds: [\r\n        //             'PANORAMA_GROUP', 'PANORAMATYPE_GROUP'\r\n        //         ]\r\n        //     },\r\n        //     {\r\n        //         id: 'EXTRAS',\r\n        //         name: 'Extras',\r\n        //         optionGroupIds: [\r\n        //             'EXTRAS_GROUP'\r\n        //         ]\r\n        //     }\r\n        // ],\r\n        // optionGroups: [\r\n        //     {\r\n        //         id: 'COLOR_GROUP',\r\n        //         name: 'Color',\r\n        //         description: 'the exterior color of the car',\r\n        //         optionIds: [\r\n        //             'BLUE', 'YELLOW', 'GREEN'\r\n        //         ],\r\n        //         required: true\r\n        //     },\r\n        //     {\r\n        //         id: 'MOTORTYPE_GROUP',\r\n        //         name: 'Motor type',\r\n        //         description: 'type of your motor',\r\n        //         optionIds: [\r\n        //             'DIESEL', 'PETROL'\r\n        //         ],\r\n        //         required: true\r\n        //     },\r\n        //     {\r\n        //         id: 'MOTOR_GROUP',\r\n        //         name: 'Motor',\r\n        //         description: 'specific motor',\r\n        //         optionIds: [\r\n        //             'D150', 'D250', 'P220', 'P450'\r\n        //         ],\r\n        //         required: true\r\n        //     },\r\n        //     {\r\n        //         id: 'PANORAMA_GROUP',\r\n        //         name: 'Panoramic Roof',\r\n        //         description: 'a glass roof for an open feeling',\r\n        //         optionIds: [\r\n        //             'PANORAMAROOF'\r\n        //         ],\r\n        //         required: false\r\n        //     },\r\n        //     {\r\n        //         id: 'PANORAMATYPE_GROUP',\r\n        //         name: 'Panoramic Roof type',\r\n        //         description: 'size of your panorama roof',\r\n        //         optionIds: [\r\n        //             'PANORAMASMALL', 'PANORAMALARGE'\r\n        //         ],\r\n        //         required: true\r\n        //     },\r\n        //     {\r\n        //         id: 'EXTRAS_GROUP',\r\n        //         name: 'Extras',\r\n        //         description: 'Additional Features For Your Car',\r\n        //         optionIds: [\r\n        //             'HEATED_SEATS', 'HIGH_QUALITY_SOUND_SYSTEM', 'DRIVE_ASSISTENCE'\r\n        //         ],\r\n        //         required: false\r\n        //     }\r\n        // ],\r\n        rules: {\r\n            basePrice: 10000,\r\n            // defaultOptions: [],\r\n            // defaultOptions: ['BLUE', 'DIESEL', 'D150'],\r\n\r\n            defaultModel: 'Basic',\r\n            models: [\r\n                {\r\n                    name: 'Basic',\r\n                    options: ['BLUE', 'DIESEL', 'D150', 'DRIVE_ASSISTENCE'],\r\n                    description: \"Standardmodell\"\r\n                },\r\n                {\r\n                    name: 'Sport',\r\n                    options: ['YELLOW', 'PETROL', 'P220', 'HEATED_SEATS', 'HIGH_QUALITY_SOUND_SYSTEM'],\r\n                    description: \"Erweitertes Modell mit großer Leistung\"\r\n                }\r\n            ],\r\n            replacementGroups: {\r\n                COLOR_GROUP: [\r\n                    'BLUE', 'YELLOW', 'GREEN'\r\n                ],\r\n                MOTORTYPE_GROUP: [\r\n                    'DIESEL', 'PETROL'\r\n                ],\r\n                MOTOR_GROUP: [\r\n                    'D150', 'D250', 'P220', 'P450'\r\n                ],\r\n                PANORAMATYPE_GROUP: [\r\n                    'PANORAMASMALL', 'PANORAMALARGE'\r\n                ]\r\n            },\r\n            groupRequirements: {\r\n                PANORAMATYPE_GROUP: ['PANORAMA_GROUP'],\r\n                MOTOR_GROUP: ['MOTORTYPE_GROUP']\r\n            },\r\n            requirements: {\r\n                D150: ['DIESEL'],\r\n                D250: ['DIESEL'],\r\n                P220: ['PETROL'],\r\n                P450: ['PETROL'],\r\n                PANORAMASMALL: ['PANORAMAROOF'],\r\n                PANORAMALARGE: ['PANORAMAROOF']\r\n            },\r\n            incompatibilities: {\r\n                PANORAMAROOF: ['PETROL'],\r\n                PANORAMASMALL: ['BLUE']\r\n            },\r\n            priceList: {\r\n                D150: 8000,\r\n                D250: 11000,\r\n                P220: 9000,\r\n                P450: 16000,\r\n                YELLOW: 200,\r\n                GREEN: 500,\r\n                PANORAMAROOF: 2000,\r\n                PANORAMALARGE: 500,\r\n                HEATED_SEATS: 500, \r\n                HIGH_QUALITY_SOUND_SYSTEM: 250,\r\n                DRIVE_ASSISTENCE: 1500\r\n            }\r\n        }\r\n    },\r\n    {\r\n        configId: '1',\r\n        images: [],\r\n        options: [\r\n            {\r\n                id: 'ALLOY19',\r\n                name: 'ALLOY19',\r\n                description: 'ALLOY19',\r\n                groupId: 'WHEELS'\r\n            },\r\n            {\r\n                id: 'STEEL16',\r\n                name: 'STEEL16',\r\n                description: 'STEEL16',\r\n                groupId: 'WHEELS'\r\n            },\r\n            {\r\n                id: 'RED',\r\n                name: 'RED',\r\n                description: 'RED',\r\n                groupId: 'COLOR_GROUP'\r\n            },\r\n            {\r\n                id: 'BLUE',\r\n                name: 'BLUE',\r\n                description: 'RED',\r\n                groupId: 'COLOR_GROUP'\r\n            }\r\n        ],\r\n        optionSections: [\r\n            {\r\n                id: 'EXTERIOR',\r\n                optionGroupIds: [\r\n                    'WHEELS', 'COLOR_GROUP'\r\n                ]\r\n            }\r\n        ],\r\n        optionGroups: [\r\n            {\r\n                id: 'WHEELS',\r\n                name: 'WHEELS',\r\n                description: 'WHEELS',\r\n                optionIds: [\r\n                    'ALLOY19', 'STEEL16'\r\n                ],\r\n                required: true,\r\n                replacement: true\r\n            },\r\n            {\r\n                id: 'COLOR_GROUP',\r\n                name: 'COLOR_GROUP',\r\n                description: 'Desc',\r\n                optionIds: [\r\n                    'BLUE', 'RED'\r\n                ],\r\n                required: false,\r\n                replacement: false\r\n            }\r\n        ],\r\n        rules: {\r\n            basePrice: 500,\r\n            // defaultOptions: [/*BLUE*/],\r\n            defaultModel: '',\r\n            models: [\r\n                {\r\n                    id: 'Sport',\r\n                    name: 'Sport',\r\n                    description: 'Desc',\r\n                    options: ['ALLOY19', 'RED'],\r\n                },\r\n                {\r\n                    id: 'Basic',\r\n                    name: 'Basic',\r\n                    description: 'Desc',\r\n                    options: ['STEEL16', 'BLUE'],\r\n                }\r\n            ],\r\n            // replacementGroups: {\r\n            //     // COLOR_GROUP: [\r\n            //     //     'BLUE'\r\n            //     // ]\r\n            // },\r\n            groupRequirements: {\r\n                // PANORAMATYPE_GROUP: ['PANORAMA_GROUP']\r\n                // COLOR_GROUP: ['WHEELS'],\r\n                WHEELS: ['COLOR_GROUP']\r\n            },\r\n            requirements: {\r\n                BLUE: ['STEEL16'],\r\n                ALLOY19: ['RED']\r\n            },\r\n            incompatibilities: {\r\n                // PANORAMAROOF: ['PETROL']\r\n                BLUE: ['ALLOY19'],\r\n                STEEL16: ['RED']\r\n            },\r\n            priceList: {\r\n                'BLUE': 200\r\n            }\r\n        }\r\n    }\r\n]","import { createSlice } from '@reduxjs/toolkit'\r\nimport { fetchId } from '../../api/configurationAPI'\r\nimport { readFromLocalStorage, writeToLocalStorage } from '../../App'\r\nimport { alertTypes, openAlert } from '../alert/alertSlice'\r\nimport { confirmDialogOpen } from '../confirmationDialog/confirmationSlice'\r\nimport { extractModelNameFromModel, extractModelOptionsFromModel, getDependentOptionsDeselect, getDependentOptionsSelect, getIsOptionSelected, getModelOptions, getOptionName, getOptionReplacementGroup, selectConfigurationId, selectDefaultModel, selectModels, selectSelectedOptions } from './configurationSelectors'\r\n\r\n// const openDialog = useConfirmationDialog.open\r\n\r\nconst initialState = {\r\n    configuration: {},\r\n    selectedOptions: [],\r\n    selectedModel: '',\r\n    status: 'idle', // | 'loading' | 'succeeded' | 'failed'\r\n    error: null\r\n}\r\n\r\nexport const configurationSlice = createSlice({\r\n    name: 'configuration',\r\n    initialState,\r\n    reducers: {\r\n        selectOption: (state, action) => {\r\n            if (!state.selectedOptions.includes(action.payload)) {\r\n                // console.log('selecting option', action.payload)\r\n                state.selectedOptions.push(action.payload)\r\n            }\r\n        },\r\n        deselectOption: (state, action) => {\r\n            // console.log('deselecting option', action.payload)\r\n            state.selectedOptions = state.selectedOptions.filter(optionId => optionId !== action.payload)\r\n        },\r\n        setSelectedOptions: (state, action) => {\r\n            console.log('setting selected options')\r\n            state.selectedOptions = action.payload\r\n        },\r\n        setSelectedModel: (state, action) => {\r\n            // console.log('setting selected model: ' + action.payload)\r\n            state.selectedModel = action.payload\r\n        },\r\n        reset: (state, action) => {\r\n            console.log('reset active configuration')\r\n            state.selectedOptions = action.payload\r\n        },\r\n        loadingStarted: (state) => {\r\n            console.log('fetching configuration...')\r\n            state.status = 'loading'\r\n        },\r\n        loadingSucceeded: (state, action) => {\r\n            console.log('configuration loaded:', action.payload)\r\n            state.status = 'succeeded'\r\n            state.configuration = action.payload\r\n            state.selectedOptions = loadSelectedOptionsFromStorage(state.configuration.configId) || []\r\n        },\r\n        loadingFailed: (state, action) => {\r\n            console.log('configuration loading failed:', action.payload)\r\n            state.status = 'failed'\r\n            state.error = action.payload.toString()\r\n            state.configuration = {}\r\n            state.selectedOptions = []\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        // builder.addCase(selectOption, (state, action) => {\r\n        //     checkModel()\r\n        // })\r\n    }\r\n})\r\n\r\nexport const fetchConfiguration = (id) => async (dispatch, getState) => {\r\n    dispatch(loadingStarted())\r\n\r\n    fetchId(id)\r\n    .then(res => {\r\n        dispatch(setModel(selectDefaultModel(getState())))\r\n        dispatch(loadingSucceeded(res))\r\n        dispatch(checkModel())\r\n    })\r\n    .catch(error => {\r\n        dispatch(openAlert(error, alertTypes.ERROR))\r\n        dispatch(loadingFailed(error))\r\n    })\r\n}\r\n\r\nconst containsAll = (arr1, arr2) => arr2.every(arr2Item => arr1.includes(arr2Item))\r\nconst sameMembers = (arr1, arr2) => containsAll(arr1, arr2) && containsAll(arr2, arr1)\r\nconst checkModel = () => (dispatch, getState) => {\r\n    const selectedOptions = selectSelectedOptions(getState())\r\n    const models = selectModels(getState())\r\n    \r\n    if (selectedOptions.length === 0) {\r\n        // no option is selected -> unset model\r\n        dispatch(setModel(''))\r\n        return\r\n    }\r\n\r\n    // check if the selected options are part of a model and then set this model as the current one\r\n    for (const model of models) {\r\n        if (sameMembers(extractModelOptionsFromModel(model), selectedOptions)) {\r\n            dispatch(setModel(extractModelNameFromModel(model)))\r\n            return\r\n        }\r\n    }\r\n\r\n    // no model matches the current configuration -> unset model\r\n    dispatch(setModel(''))\r\n\r\n}\r\nexport const setModel = (modelName = '') => (dispatch, getState) => {\r\n    if (modelName) {\r\n        const modelOptions = getModelOptions(getState(), modelName)\r\n        dispatch(setSelectedOptions(modelOptions))\r\n    }\r\n\r\n    dispatch(setSelectedModel(modelName))\r\n}\r\n\r\n// save the currently active configuration to the local storage\r\nexport const saveActiveConfiguration = () => (dispatch, getState) => {\r\n    const id = selectConfigurationId(getState())\r\n    const options = selectSelectedOptions(getState())\r\n    saveConfigurationToStorage(id, options)\r\n}\r\n// save the configuration data (id, options) to the local storage (or append to existing configurations)\r\nexport const saveConfigurationToStorage = (id, options) => {\r\n    let configurations = loadConfigurationsFromStorage()\r\n\r\n    let newConfiguration = configurations.find(c => c.id === id)\r\n    if (newConfiguration) {\r\n        // configuration is already saved -> updated values\r\n        newConfiguration.options = options\r\n    } else {\r\n        // add the new configuration to the array\r\n        newConfiguration = {id, options}\r\n        configurations.push(newConfiguration)\r\n    }\r\n\r\n    // save the updated configurations to the storage\r\n    writeToLocalStorage(configurations, 'configurations')\r\n}\r\n\r\n// get the selected options for the specific configuration (id) from the storage\r\nconst loadSelectedOptionsFromStorage = (id) => {\r\n    console.log('all stored configs:', loadConfigurationsFromStorage())\r\n    console.log(id)\r\n    const configuration = loadConfigurationsFromStorage().find(c => c.id === id)\r\n\r\n    console.log('storage loaded config:', configuration)\r\n\r\n    if (!configuration) return null\r\n\r\n    if (!configuration.options) return null\r\n\r\n    return configuration.options\r\n}\r\nconst loadConfigurationsFromStorage = () => {\r\n    let configurations = readFromLocalStorage('configurations')\r\n    \r\n    if (!configurations) return []\r\n\r\n    return configurations\r\n}\r\n\r\n// reset the active confirguration\r\nexport const resetActiveConfiguration = () => (dispatch, getState) => {\r\n    try {\r\n        // const defaultOptions = selectDefaultOptions(getState())\r\n        // dispatch(reset(defaultOptions))\r\n        const defaultModel = selectDefaultModel(getState())\r\n        dispatch(setModel(defaultModel))\r\n    } catch {\r\n        console.log('Can not reset -> no configuration found')\r\n    }\r\n}\r\n\r\n\r\n\r\n// handle the click on an option\r\nexport const clickedOption = (id) => (dispatch, getState) => {\r\n    // // check if the option is in a replacement group \r\n    // const replacementGroup = getOptionReplacementGroup(getState(), id)\r\n    // if (replacementGroup) {\r\n    //     if (!getIsOptionSelected(getState(), id)) {\r\n    //         dispatch(selectWithDependencies(id))\r\n    //     }\r\n        \r\n    //     // -> deselect all other options\r\n    //     for (const optionId of replacementGroup) {\r\n    //         // dont dispatch the deselect action if its the option that gets selected \r\n    //         if (optionId === id) continue\r\n    //         // dont dispatch if the option is already not selected\r\n    //         if (!getIsOptionSelected(getState(), optionId)) continue\r\n            \r\n    //         dispatch(deselectWithDependencies(optionId))\r\n    //     }\r\n\r\n    //     return\r\n    // }\r\n\r\n    if (getIsOptionSelected(getState(), id)) {\r\n        // option is selected\r\n        dispatch(deselectWithDependencies(id))\r\n    } else {\r\n        // option is not selected\r\n        dispatch(selectWithDependencies(id))\r\n    }\r\n\r\n}\r\n// select an option and look out for dependencies (deselect all that are incompatible with it)\r\nconst selectWithDependencies = (id) => (dispatch, getState) => {\r\n\r\n    // get all options in the replacement group that will be disabled\r\n    let replacementGroupOptionsToDeselect = []\r\n    const replacementGroup = getOptionReplacementGroup(getState(), id)\r\n    if (replacementGroup) {\r\n        for (const optionId of replacementGroup) {\r\n            // ignore if the option is the option that gets selected \r\n            if (optionId === id) continue\r\n\r\n            // ignore if the option is already deselected selected\r\n            if (!getIsOptionSelected(getState(), optionId)) continue\r\n            \r\n            replacementGroupOptionsToDeselect.push(optionId)\r\n        }\r\n    }\r\n\r\n\r\n    // -> deeper options (not in the same group)\r\n    // get all options that cant be used if this option is selected\r\n    const incompatibleOptionsToDeselect = getDependentOptionsSelect(getState(), id)\r\n\r\n    \r\n    // for every option that has to be disabled, get all further dependencies \r\n    const optionsToDeselect = [...replacementGroupOptionsToDeselect, ...incompatibleOptionsToDeselect]\r\n\r\n    let deeperOptionsToDeselect = []\r\n    optionsToDeselect.forEach(option => {\r\n        const dependencies = getDependenciesDeselect(getState(), option)\r\n        if (dependencies) {\r\n            // if the dependencies are not empty, add them to the list\r\n            deeperOptionsToDeselect = [...deeperOptionsToDeselect, ...dependencies]\r\n        }\r\n    })\r\n    deeperOptionsToDeselect = [...incompatibleOptionsToDeselect, ...deeperOptionsToDeselect]\r\n    // <- deeper options (not in the same group)\r\n\r\n\r\n    const allOptionsToDeselect = [...replacementGroupOptionsToDeselect, ...deeperOptionsToDeselect]\r\n\r\n    if (!allOptionsToDeselect || allOptionsToDeselect.length === 0) {\r\n        // no options to deselect if this option is selected -> just select the option\r\n        dispatch(selectAndDeselectOptions([id], null))\r\n        return\r\n    }\r\n    \r\n    // console.log(deeperOptionsToDeselect)\r\n    if (deeperOptionsToDeselect.length === 0) {\r\n        // no confirmation prompt required (deselected options are just from replacementgroup)\r\n        dispatch(selectAndDeselectOptions([id], allOptionsToDeselect))\r\n        return\r\n    }\r\n    \r\n    // confirmation prompt for incompatibilities with the selected option\r\n    const incompatibleOptionNames = deeperOptionsToDeselect.map(dependentId => getOptionName(getState(), dependentId))\r\n    const selectedOptionName = getOptionName(getState(), id)\r\n\r\n    const confirmMessage = `By selecting ${selectedOptionName} you will deselect ${incompatibleOptionNames.join(', ')}`\r\n    dispatch(confirmDialogOpen(confirmMessage, {selected: id, deselected: null, optionsToSelect: [], optionsToRemove: deeperOptionsToDeselect}, null, () => {\r\n        // console.log('Confirmed')\r\n        // select the option and deselect all incompatible options\r\n        dispatch(selectAndDeselectOptions([id], allOptionsToDeselect))\r\n    }))\r\n}\r\n// select an option and look out for dependencies (deselect all others that depend on it)\r\nconst deselectWithDependencies = (id) => (dispatch, getState) => {\r\n\r\n    // get all options that can only be used if this option was selected\r\n    const dependentOptions = getDependenciesDeselect(getState(), id)\r\n    \r\n    // if there are no dependent options, just deselect this option\r\n    if (!dependentOptions || dependentOptions.length === 0) {\r\n        dispatch(selectAndDeselectOptions(null, [id]))\r\n        return\r\n    }\r\n\r\n    // console.log('all deselect dependencies: ')\r\n    // console.log(dependentOptions)\r\n\r\n    // confirmation Prompt for deselecting 'deeper dependentOptions'\r\n    const dependentOptionNames = dependentOptions.map(dependentId => getOptionName(getState(), dependentId))\r\n    const deselectedOptionName = getOptionName(getState(), id)\r\n\r\n    const confirmMessage = `By deselecting ${deselectedOptionName} you will also deselect ${dependentOptionNames.join(', ')}`\r\n    dispatch(confirmDialogOpen(confirmMessage, {selected: null, deselected: id, optionsToSelect: [], optionsToRemove: dependentOptions}, null, () => {\r\n        // console.log('Confirmed')\r\n        // deselect the option and all dependent options\r\n        dispatch(selectAndDeselectOptions(null, [id].concat(dependentOptions)))\r\n    }))\r\n\r\n    // deselect this option and all the options that depend on it\r\n    // dispatch(selectAndDeselectOptions(null, [id].concat(dependentOptions)))\r\n}\r\n// dispatches the actions to select (1st parameter) and deselect (2nd parameter) all given options\r\nexport const selectAndDeselectOptions = (optionsToSelect, optionsToDeselect) => (dispatch) => {\r\n    // if the options to select are valid, select all of them\r\n    if (optionsToSelect && optionsToSelect.length >= 1) {\r\n        optionsToSelect.forEach(option => {\r\n            dispatch(selectOption(option))\r\n        })\r\n    }\r\n    // if the options to deselect are valid, deselect all of them\r\n    if (optionsToDeselect && optionsToDeselect.length >= 1) {\r\n        optionsToDeselect.forEach(option => {\r\n            dispatch(deselectOption(option))\r\n        })\r\n    }\r\n\r\n    // after adjusting the current selection -> save the configuration\r\n    dispatch(saveActiveConfiguration())\r\n\r\n    // check if the model changes based on the different selected options\r\n    dispatch(checkModel())\r\n\r\n}\r\n// recursive function to get all options that depend on the deselected option \r\nconst getDependenciesDeselect = (state, id) => {\r\n    // deselect all options that cant be used if this option is deselected\r\n    const dependentOptions = getDependentOptionsDeselect(state, id)\r\n\r\n    if (dependentOptions.length === 0) return null\r\n\r\n    let subDependentOptions = []\r\n\r\n    dependentOptions.forEach(optionId => {\r\n        // recursively get all dependencies from the dependent options\r\n        const x = getDependenciesDeselect(state, optionId)\r\n        if (x != null) {\r\n            subDependentOptions = [...subDependentOptions, ...x]\r\n        }\r\n    })\r\n    return [...dependentOptions, ...subDependentOptions]\r\n}\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { selectOption, deselectOption, setSelectedOptions, setSelectedModel, reset, loadingStarted, loadingSucceeded, loadingFailed } = configurationSlice.actions\r\n\r\nexport default configurationSlice.reducer","import { Typography } from '@mui/material'\r\nimport React from 'react'\r\n// import { useSelector } from 'react-redux'\r\nimport { connect } from 'react-redux'\r\nimport { getOption, getOptionPrice } from '../../../../state/configuration/configurationSelectors'\r\n\r\nfunction PriceListItem({state, optionId, name, price}) {\r\n    // console.log('---------')\r\n    // console.log(name + ' rendered new')\r\n    // console.log('---------')\r\n\r\n    if (optionId) {\r\n        name = getOption(state, optionId).name\r\n        price = getOptionPrice(state, optionId)\r\n    }\r\n    \r\n    return (\r\n        <Typography variant=\"body2\">\r\n            {name}{price ? `: ${price}€` : ''}\r\n        </Typography>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        ...ownProps,\r\n        state\r\n    }\r\n    // if (!ownProps.optionId) {\r\n    //     console.log('|||||||||||||||||||\\nbaseprice rendering new\\n|||||||||||||||||||')\r\n    //     return {\r\n    //         ...ownProps\r\n    //     }\r\n    // }\r\n\r\n    // return {\r\n    //     name: getOption(state, ownProps.optionId).name,\r\n    //     price: getOptionPrice(state, ownProps.optionId)\r\n    // }\r\n}\r\nconst mapDispatchToProps = {\r\n    \r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(PriceListItem)\r\n","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Box } from '@mui/system'\r\nimport { Accordion, AccordionDetails, AccordionSummary, Divider, Stack, Typography } from '@mui/material'\r\nimport PriceListItem from './PriceListItem'\r\nimport { getCurrentPrice, selectBasePrice, selectConfigurationId, selectConfigurationStatus, selectOptionGroups, selectOptions, selectOptionSections } from '../../../../state/configuration/configurationSelectors'\r\nimport { translate } from '../../../../lang'\r\nimport { selectLanguage } from '../../../../state/language/languageSelectors'\r\nimport { fetchConfiguration, setSelectedOptions } from '../../../../state/configuration/configurationSlice'\r\nimport { ExpandMoreOutlined } from '@mui/icons-material'\r\n\r\nfunction Summary({ configurationId, selectedOptions, status, loadedConfigurationId, sections, groups, basePrice, currentPrice, fetchConfiguration, setSelectedOptions, language }) {\r\n\r\n    useEffect(() => {\r\n        // if the selectedoptions or the loaded configuration changes, set the selected options again\r\n        console.log('summary: setting selected options')\r\n        setSelectedOptions(selectedOptions)\r\n    }, [loadedConfigurationId, selectedOptions, setSelectedOptions])\r\n\r\n    useEffect(() => {\r\n        if (configurationId !== loadedConfigurationId) {\r\n            // no configuration or a different configuration is loaded -> load correct configuration\r\n            console.log('summary: fetching configuration')\r\n            fetchConfiguration(configurationId)\r\n        }\r\n    }, [configurationId, loadedConfigurationId, fetchConfiguration])\r\n\r\n\r\n    function renderSectionContent(section) {\r\n        const sectionGroups = groups.filter(g => section.optionGroupIds.includes(g.id))\r\n        const groupOptions = (group) => selectedOptions.filter(o => group.optionIds.includes(o))\r\n\r\n        return (\r\n            sectionGroups.map((group, index) => (\r\n                <Box key={index}>\r\n                    {groupOptions(group).length > 0 ?\r\n                        <>\r\n                            <Typography vairant=\"body1\">{group.name}</Typography>\r\n                            \r\n                            {groupOptions(group).map((option, index) => (\r\n                                <PriceListItem\r\n                                key={index}\r\n                                optionId={option}\r\n                                >\r\n                                </PriceListItem>\r\n                            ))}\r\n        \r\n                            <Divider sx={{marginTop: 1, marginBottom: 1}} />\r\n\r\n                        </> : ''\r\n                    }\r\n                </Box>\r\n            ))\r\n        )\r\n    }\r\n\r\n    function renderSummary() {\r\n        if (status !== 'succeeded') {\r\n            return (<></>)\r\n        }\r\n\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"h3\">\r\n                    {translate('price', language)}: {currentPrice}€\r\n                </Typography>\r\n\r\n                <Stack spacing={1}>\r\n                    <PriceListItem\r\n                        name={translate('basePrice', language)}\r\n                        price={basePrice}\r\n                    >\r\n                    </PriceListItem>\r\n\r\n                    {sections.map((section, index) => (\r\n                        <Accordion key={index}>\r\n                            <AccordionSummary\r\n                                expandIcon={<ExpandMoreOutlined />}\r\n                                aria-controls=\"panel1a-content\"\r\n                                id=\"panel1a-header\"\r\n                            >\r\n                                <Typography variant=\"h4\">{section.name}</Typography>\r\n                            </AccordionSummary>\r\n                            <AccordionDetails>\r\n                                {renderSectionContent(section)}\r\n                            </AccordionDetails>\r\n                        </Accordion>\r\n                    ))}\r\n                        {/* <Box key={index}>\r\n                            <Typography variant=\"h4\">{section.name}</Typography>\r\n                            {groups.filter(g => section.optionGroupIds.includes(g.id)).map((group, index) => (\r\n                                <Box key={index}>\r\n                                    <Typography vairant=\"body1\">{group.name}</Typography>\r\n\r\n                                    {selectedOptions.filter(o => group.optionIds.includes(o)).map((option, index) => (\r\n                                        <PriceListItem\r\n                                            key={index}\r\n                                            optionId={option}\r\n                                        >\r\n                                        </PriceListItem>\r\n                                    ))}\r\n                                </Box>\r\n                            ))}\r\n                        </Box> */}\r\n                    \r\n                    {/* <Typography>{translate('priceList', language)}</Typography>\r\n                    <PriceListItem\r\n                        name='Base Price'\r\n                        price={basePrice}\r\n                    >\r\n                    </PriceListItem>\r\n\r\n                    {selectedOptions.map((optionId, index) => (\r\n                        <PriceListItem\r\n                            key={index}\r\n                            optionId={optionId}\r\n                            name={optionId}\r\n                            price={0}\r\n                        >\r\n                        </PriceListItem>\r\n                    ))} */}\r\n                </Stack>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    return (\r\n        renderSummary()\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        sections: selectOptionSections(state),\r\n        groups: selectOptionGroups(state),\r\n        status: selectConfigurationStatus(state),\r\n        loadedConfigurationId: selectConfigurationId(state),\r\n        options: selectOptions(state),\r\n        basePrice: selectBasePrice(state),\r\n        currentPrice: getCurrentPrice(state),\r\n        language: selectLanguage(state)\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    fetchConfiguration: fetchConfiguration,\r\n    setSelectedOptions: setSelectedOptions\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Summary)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Box, Grid, IconButton, Typography } from '@mui/material'\r\nimport { Delete, Edit, Preview } from '@mui/icons-material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { saveConfigurationToStorage } from '../../state/configuration/configurationSlice'\r\nimport Summary from '../configuration/Configurator/SidePanel/Summary'\r\nimport { confirmDialogOpen } from '../../state/confirmationDialog/confirmationSlice'\r\nimport { requestDeleteSavedConfiguration } from '../../api/userAPI'\r\nimport { alertTypes, openAlert } from '../../state/alert/alertSlice'\r\nimport { translate } from '../../lang'\r\nimport { selectLanguage } from '../../state/language/languageSelectors'\r\nimport { extractDateFromConfiguration, extractIdFromConfiguration, extractNameFromConfiguration, extractOptionsFromConfiguration, extractUsernameFromConfiguration } from '../../state/user/userSelector'\r\n\r\nfunction ConfigurationList({ configurations, openConfirm, isOrdered = false, isAdminView = false, openAlert, language }) {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    function handleEditClick(id, options) {\r\n        navigate(`/configuration/${id}`)\r\n        saveConfigurationToStorage(id, options)\r\n    }\r\n\r\n    function handleDeleteClicked(id, name) {\r\n        requestDeleteSavedConfiguration(id, name)\r\n        .then(res => {\r\n            openAlert(`${translate('successfullyRemoved', language)} ${name}!`, alertTypes.SUCCESS)\r\n            // refresh\r\n            navigate(`/account/saved`)\r\n        })\r\n        .catch(err => {\r\n            openAlert(`Error: ${err}`, alertTypes.ERROR)\r\n        })\r\n    }\r\n\r\n    function handleShowSummaryClicked(id, options) {\r\n        openConfirm('', {}, <Summary configurationId={id} selectedOptions={options}></Summary>, () => {\r\n\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            <Grid container justifyContent=\"center\">\r\n                {configurations.map((config, index) => {\r\n                    const id = extractIdFromConfiguration(config)\r\n                    const options = extractOptionsFromConfiguration(config)\r\n                    const name = extractNameFromConfiguration(config)\r\n                    const date = extractDateFromConfiguration(config)\r\n                    const username = extractUsernameFromConfiguration(config)\r\n\r\n                    return (\r\n                        <Box key={index} margin={2}>\r\n                            <Box display=\"flex\" alignItems=\"center\">\r\n                                <Typography variant=\"body1\">{name}</Typography>\r\n                                <IconButton onClick={() => handleEditClick(id, options)}>\r\n                                    <Edit></Edit>\r\n                                </IconButton>\r\n                                {!isOrdered ? \r\n                                <IconButton onClick={() => handleDeleteClicked(id, name)}>\r\n                                    <Delete></Delete>\r\n                                </IconButton>\r\n                                : ''}\r\n                                {isOrdered ?\r\n                                <IconButton onClick={() => handleShowSummaryClicked(id, options)}>\r\n                                    <Preview></Preview>\r\n                                </IconButton>\r\n                                : ''}\r\n                            </Box>\r\n\r\n                            <Typography variant=\"body2\">{name}</Typography>\r\n\r\n                            <Typography variant=\"body2\">{new Date(date).toLocaleTimeString()}</Typography>\r\n\r\n                            {isAdminView ? \r\n                            <Typography variant=\"body2\">From: {username}</Typography>\r\n                            : ''}\r\n                        </Box>\r\n                    )\r\n                })}\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    language: selectLanguage(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    openConfirm: confirmDialogOpen,\r\n    openAlert: openAlert\r\n}\r\nexport default connect(\r\n    mapStateToProps, \r\n    mapDispatchToProps\r\n)(ConfigurationList)","import { Box, Tab, Tabs } from '@mui/material'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { translate } from '../../lang'\r\nimport { selectLanguage } from '../../state/language/languageSelectors'\r\nimport { selectAllOrderedConfigurations, selectIsAdmin, selectOrderedConfigurations, selectSavedConfigurations } from '../../state/user/userSelector'\r\nimport ConfigurationList from './ConfigurationList'\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box sx={{ p: 3 }}>\r\n                    {children}\r\n                </Box>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst tabNames = [\r\n    {name: 'saved', value: 0},\r\n    {name: 'ordered', value: 1},\r\n    {name: 'allordered', value: 2, forAdmin: true}\r\n]\r\n\r\nfunction ConfigurationTabs({ isAdmin, savedConfigurations, orderedConfigurations, allOrderedConfigurations, language }) {\r\n\r\n    const navigate = useNavigate()\r\n    const { tab } = useParams()\r\n\r\n    const foundTab = tabNames.find(t => t.name === tab)\r\n    let tabName = foundTab\r\n\r\n    if (foundTab && tabName.forAdmin && !isAdmin) {\r\n        // the tab is only for admins and the user is not an admin\r\n        tabName = null\r\n    }\r\n\r\n    useEffect(() => {\r\n        // if the dynamic path tabname does not correspond to any of tabnames array -> update route by navigating\r\n        if (!tabName) {\r\n            navigate(`/account/${tabNames[0].name}`)\r\n        }\r\n    }, [tabName, navigate])\r\n\r\n    const tabIndex = tabName ? tabName.value : 0\r\n\r\n    const [value, setValue] = useState(tabIndex)\r\n\r\n    const handleChange = (event, newValue) => {\r\n        const tabName = tabNames.find(t => t.value === newValue)\r\n        if (tabName) {\r\n            setValue(tabName.value)\r\n            navigate(`/account/${tabName.name}`)\r\n        }\r\n    }\r\n\r\n    function tabProps(index) {\r\n        return {\r\n            id: `simple-tab-${index}`,\r\n            'aria-controls': `simple-tabpanel-${index}`,\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box width=\"100%\">\r\n            <Tabs \r\n                scrollButtons=\"auto\"\r\n                variant=\"scrollable\" \r\n                allowScrollButtonsMobile\r\n                value={value}\r\n                onChange={handleChange} \r\n                aria-label=\"configurationstabs\"\r\n            >\r\n                <Tab label={translate('savedConfigurations', language)} {...tabProps(0)} />\r\n                <Tab label={translate('orderedConfigurations', language)} {...tabProps(1)} />\r\n                {isAdmin ? <Tab label={translate('allOrderedConfigurations', language)} {...tabProps(2)} /> : ''}\r\n            </Tabs>\r\n            <TabPanel value={value} path={tabNames[0].name} index={0}>\r\n                <ConfigurationList configurations={savedConfigurations}></ConfigurationList>\r\n            </TabPanel>\r\n            <TabPanel value={value} path={tabNames[1].name} index={1}>\r\n                <ConfigurationList configurations={orderedConfigurations} isOrdered={true}></ConfigurationList>\r\n            </TabPanel>\r\n            {isAdmin ?\r\n                <TabPanel value={value} path={tabNames[1].name} index={2}>\r\n                    <ConfigurationList configurations={allOrderedConfigurations} isOrdered={true} isAdminView={true}></ConfigurationList>\r\n                </TabPanel>\r\n                : ''\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAdmin: selectIsAdmin(state),\r\n    savedConfigurations: selectSavedConfigurations(state),\r\n    orderedConfigurations: selectOrderedConfigurations(state),\r\n    allOrderedConfigurations: selectAllOrderedConfigurations(state),\r\n    language: selectLanguage(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    \r\n}\r\nexport default connect(\r\n    mapStateToProps, \r\n    mapDispatchToProps\r\n)(ConfigurationTabs)","import { Typography } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { selectIsAdmin, selectIsAuthenticated, selectUserEmail, selectUserName } from '../../state/user/userSelector'\r\nimport { getAllOrderedConfigurations, getSavedConfigurations } from '../../state/user/userSlice'\r\nimport ConfigurationTabs from './ConfigurationTabs'\r\n\r\n\r\nfunction AccountView({ username, email, isLoggedIn, isAdmin, getSavedConfigurations, getAllOrderedConfigurations }) {\r\n\r\n    const adminActions = (\r\n        <></>\r\n    )\r\n\r\n    const userActions = (\r\n        <></>\r\n    )\r\n\r\n    // every time the logged in state changes -> reload the saved configurations\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            getSavedConfigurations()\r\n        }\r\n    \r\n        if (isAdmin) {\r\n            getAllOrderedConfigurations()\r\n        }\r\n    }, [isLoggedIn, isAdmin, getSavedConfigurations, getAllOrderedConfigurations])\r\n\r\n    \r\n    function renderUserActions() {\r\n        return (\r\n            <Box>\r\n                {userActions}\r\n                {isAdmin ? adminActions : ''}\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    function renderUserDetails() {\r\n        return (\r\n            <Box className=\"userdetails\" paddingTop={2} paddingBottom={4} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n                <Typography variant=\"h2\">{username}</Typography>\r\n                <Typography variant=\"body1\">{email}</Typography>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    function renderLoggedIn() {\r\n        return (\r\n            <>\r\n                {renderUserDetails()}\r\n                {renderUserActions()}\r\n                <ConfigurationTabs></ConfigurationTabs>\r\n            </>\r\n        )\r\n    }\r\n\r\n    function renderLoggedOut() {\r\n        return (\r\n            <Box>\r\n                <Typography variant=\"h2\">Log in to access this page!</Typography>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Box className=\"accountpage\" display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n            {isLoggedIn ? renderLoggedIn() : renderLoggedOut()}\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isLoggedIn: selectIsAuthenticated(state),\r\n    isAdmin: selectIsAdmin(state),\r\n    username: selectUserName(state),\r\n    email: selectUserEmail(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    getSavedConfigurations: getSavedConfigurations,\r\n    getAllOrderedConfigurations: getAllOrderedConfigurations\r\n}\r\nexport default connect(\r\n    mapStateToProps, \r\n    mapDispatchToProps\r\n)(AccountView)\r\n","import { createSelector } from '@reduxjs/toolkit'\r\n\r\nconst selectBuilderLanguages = (state) =>                       state.builder.configuration.languages\r\nconst selectCurrentBuilderLanguage = (state) =>                 state.builder.currentLanguage\r\n\r\nexport const selectBuilderConfiguration = (state) =>            state.builder.configuration\r\nexport const selectBuilderStatus = (state) =>                   state.builder.status\r\nexport const selectBuilderError = (state) =>                    state.builder.error\r\nexport const selectBuilderInputLanguage = (state) =>            state.builder.currentLanguage\r\n\r\nexport const selectBuilderSections = (state) =>                 state.builder.configuration.optionSections\r\nexport const selectBuilderGroups = (state) =>                   state.builder.configuration.optionGroups\r\nexport const selectBuilderOptions = (state) =>                  state.builder.configuration.options\r\nexport const selectBuilderModels = (state) =>                   state.builder.configuration.rules.models\r\nexport const selectBuilderDefaultModel = (state) =>             state.builder.configuration.rules.defaultModel\r\nexport const selectBuilderBasePrice = (state) =>                state.builder.configuration.rules.basePrice\r\nexport const selectBuilderPriceList = (state) =>                state.builder.configuration.rules.priceList\r\nexport const selectBuilderOptionRequirements = (state) =>       state.builder.configuration.rules.requirements\r\nexport const selectBuilderOptionIncompatibilities = (state) =>  state.builder.configuration.rules.incompatibilities\r\nexport const selectBuilderGroupRequirements = (state) =>        state.builder.configuration.rules.groupRequirements || []\r\n\r\nconst selectBuilderName = (state) =>                                    state.builder.configuration.languages[state.builder.currentLanguage].name || ''\r\nconst selectBuilderDescription = (state) =>                             state.builder.configuration.languages[state.builder.currentLanguage].description || ''\r\nexport const selectBuilderOptionsFromCurrentLanguage = (state) =>       state.builder.configuration.languages[state.builder.currentLanguage].options || []\r\nexport const selectBuilderGroupsFromCurrentLanguage = (state) =>        state.builder.configuration.languages[state.builder.currentLanguage].optionGroups || []\r\nexport const selectBuilderSectionsFromCurrentLanguage = (state) =>      state.builder.configuration.languages[state.builder.currentLanguage].optionSections || []\r\n\r\nconst selectName = (state, name) =>                             name\r\n\r\n// also updates cached value when builder language changes\r\nexport const getBuilderName = createSelector([selectBuilderName, selectCurrentBuilderLanguage], (builderName, lang) => {\r\n    return builderName ? builderName : ''\r\n})\r\n// also updates cached value when builder language changes\r\nexport const getBuilderDescription = createSelector([selectBuilderDescription, selectCurrentBuilderLanguage], (builderDescription, lang) => {\r\n    return builderDescription ? builderDescription : ''\r\n})\r\n\r\nexport const getBuilderOptionById = createSelector([selectName, selectBuilderOptionsFromCurrentLanguage], (optionId, options) => {\r\n    const option = options.find(o => o.id === optionId)\r\n    return option ? option : null\r\n})\r\nexport const getBuilderOptionPrice = createSelector([selectName, selectBuilderPriceList], (optionId, priceList) => {\r\n    const price = priceList[optionId]\r\n    return price ? price : 0\r\n})\r\nexport const getBuilderOptionRequirementsByOptionId = createSelector([selectName, selectBuilderOptionRequirements], (optionId, requirements) => {\r\n    const optionReq = requirements[optionId]\r\n    return optionReq ? optionReq : []\r\n})\r\nexport const getBuilderOptionIncompatibilitiesByOptionId = createSelector([selectName, selectBuilderOptionIncompatibilities], (optionId, incompatibilities) => {\r\n    const optionIncomp = incompatibilities[optionId]\r\n    return optionIncomp ? optionIncomp : []\r\n})\r\n\r\nexport const getBuilderSectionById = createSelector([selectName, selectBuilderSections], (sectionId, sections) => {\r\n    const section = sections.find(s => s.id === sectionId)\r\n    return section ? section : null\r\n})\r\nexport const getBuilderGroupsInSection = createSelector([selectName, selectBuilderSections], (sectionId, sections) => {\r\n    const section = sections.find(s => s.id === sectionId)\r\n    return section ? section.optionGroupIds : []\r\n})\r\n\r\nexport const getBuilderGroupById = createSelector([selectName, selectBuilderGroups], (groupId, groups) => {\r\n    const group = groups.find(g => g.id === groupId)\r\n    return group ? group : null\r\n})\r\nexport const getBuilderGroupNameByOptionId = createSelector([selectName, selectBuilderGroups, selectBuilderGroupsFromCurrentLanguage], (optionId, groups, groupLangObj) => {\r\n    const group = groups.find(g => g.optionIds.includes(optionId))\r\n    return group ? groupLangObj.find(g => g.id === group.id).name : ''\r\n})\r\nexport const getBuilderGroupRequirementsByGroupId = createSelector([selectName, selectBuilderGroupRequirements], (groupId, requirements) => {\r\n    const groupReq = requirements[groupId]\r\n    return groupReq ? groupReq : []\r\n})\r\n\r\nconst getBuilderLanguageObject = createSelector([selectBuilderLanguages, selectCurrentBuilderLanguage], (languages, language) => {\r\n    return languages[language]\r\n})\r\n\r\n\r\nexport const getDoesSectionExist = createSelector([selectBuilderSections, selectName], (sections, sectionName) => {\r\n    return sections.find(s => s.id.toUpperCase() === sectionName.toUpperCase()) ? true : false\r\n})\r\nexport const getDoesGroupdExist = createSelector([selectBuilderGroups, selectName], (groups, groupName) => {\r\n    return groups.find(g => g.id.toUpperCase() === groupName.toUpperCase()) ? true : false\r\n})\r\nexport const getDoesOptionExist = createSelector([selectBuilderOptions, selectName], (options, optionName) => {\r\n    return options.find(o => o.id.toUpperCase() === optionName.toUpperCase()) ? true : false\r\n})\r\n\r\nconst getGroupPropertiesFromBuilderGroup = createSelector([getBuilderLanguageObject, selectName], (langObj, groupId) => {\r\n    const group = langObj.optionGroups.find(g => g.id === groupId)\r\n    return group || null\r\n})\r\nexport const getGroupNameFromBuilderGroup = createSelector([getGroupPropertiesFromBuilderGroup], (group) => group ? group.name : '')\r\nexport const getGroupDescriptionFromBuilderGroup = createSelector([getGroupPropertiesFromBuilderGroup], (group) => group ? group.description : '')\r\n\r\nconst getModelPropertiesFromBuilderModel = createSelector([getBuilderLanguageObject, selectName], (langObj, modelObj) => {\r\n    const model = langObj.models.find(m => m.id === modelObj.id)\r\n    return model || null\r\n})\r\nexport const getModelNameFromBuilderModel = createSelector([getModelPropertiesFromBuilderModel], (model) => model ? model.name : 'c')\r\nexport const getModelDescriptionFromBuilderModel = createSelector([getModelPropertiesFromBuilderModel], (model) => model ? model.description : 'c')\r\n\r\nexport const extractModelNameFromBuilderModel = (model) =>          model.name || ''\r\nexport const extractGroupNameFromBuilderGroupId = (group) =>        group.name || ''\r\n\r\nexport const extractOptionsFromBuilderGroup = (group) =>            group.optionIds || []\r\nexport const extractGroupsFromBuilderSection = (section) =>         section.optionGroupIds || []\r\nexport const extractModelOptionsFromBuilderModel = (model) =>       model.options || []\r\nexport const extractGroupIdFromBuilderOption = (option) =>          option.groupId || ''","import { createSlice } from '@reduxjs/toolkit'\r\nimport { postConfiguration } from '../../api/configurationAPI'\r\nimport { readFromLocalStorage, writeToLocalStorage } from '../../App'\r\nimport { defaultLang } from '../../lang'\r\nimport { extractGroupsFromBuilderSection, extractModelNameFromBuilderModel, extractModelOptionsFromBuilderModel, extractOptionsFromBuilderGroup, getBuilderGroupById, getBuilderSectionById, getDoesGroupdExist, getDoesOptionExist, getDoesSectionExist, selectBuilderGroupRequirements, selectBuilderModels, selectBuilderOptionIncompatibilities, selectBuilderOptionRequirements, selectBuilderConfiguration } from './builderSelectors'\r\n\r\n\r\nconst initialConfiguration = {\r\n    configId: '',\r\n    images: [],\r\n    options: [],\r\n    optionSections: [],\r\n    optionGroups: [],\r\n    rules: {\r\n        basePrice: 0,\r\n        defaultModel: '',\r\n        models: [],\r\n        groupRequirements: {\r\n            // PANORAMATYPE_GROUP: ['PANORAMA_GROUP']\r\n        },\r\n        requirements: {\r\n            // BLUE: ['STEEL16'],\r\n        },\r\n        incompatibilities: {\r\n            // PANORAMAROOF: ['PETROL']\r\n        },\r\n        priceList: {\r\n            // BLUE: 200\r\n        }\r\n    },\r\n    languages: {\r\n        en: {\r\n            name: '',\r\n            description: '',\r\n            options: [],\r\n            optionSections: [],\r\n            optionGroups: [],\r\n            models: []\r\n        },\r\n        de: {\r\n            name: '',\r\n            description: '',\r\n            options: [],\r\n            optionSections: [],\r\n            optionGroups: [],\r\n            models: []\r\n        },\r\n        fr: {\r\n            name: '',\r\n            description: '',\r\n            options: [],\r\n            optionSections: [],\r\n            optionGroups: [],\r\n            models: []\r\n        }\r\n    }\r\n}\r\n\r\nconst testConfiguration = {\r\n    configId: 'TestNeueKonfig_-_ENTitle',\r\n    images: [],\r\n    options: [\r\n        {\r\n            id: 'ALLOY19',\r\n            groupId: 'WHEELS2'\r\n        },\r\n        {\r\n            id: 'STEEL16',\r\n            groupId: 'WHEELS2'\r\n        },\r\n        {\r\n            id: 'RED',\r\n            groupId: 'COLOR_GROUP2'\r\n        },\r\n        {\r\n            id: 'BLUE222',\r\n            groupId: 'COLOR_GROUP2'\r\n        }\r\n    ],\r\n    optionSections: [\r\n        {\r\n            id: 'EXTERIOR2',\r\n            optionGroupIds: [\r\n                'WHEELS2', 'COLOR_GROUP2'\r\n            ]\r\n        }\r\n    ],\r\n    optionGroups: [\r\n        {\r\n            id: 'WHEELS2',\r\n            optionIds: [\r\n                'ALLOY19', 'STEEL16'\r\n            ],\r\n            required: true,\r\n            replacement: true\r\n        },\r\n        {\r\n            id: 'COLOR_GROUP2',\r\n            optionIds: [\r\n                'BLUE222', 'RED'\r\n            ],\r\n            required: false,\r\n            replacement: false\r\n        }\r\n    ],\r\n    rules: {\r\n        basePrice: 500,\r\n        defaultModel: '',\r\n        models: [\r\n            {\r\n                id: 'Sport',\r\n                options: ['ALLOY19', 'RED'],\r\n            },\r\n            {\r\n                id: 'Basic',\r\n                options: ['STEEL16', 'BLUE222'],\r\n            }\r\n        ],\r\n        // replacementGroups: {\r\n        //     // COLOR_GROUP2: [\r\n        //     //     'BLUE222'\r\n        //     // ]\r\n        // },\r\n        groupRequirements: {\r\n            // PANORAMATYPE_GROUP: ['PANORAMA_GROUP']\r\n            COLOR_GROUP2: ['WHEELS2'],\r\n            WHEELS2: ['COLOR_GROUP2']\r\n        },\r\n        requirements: {\r\n            BLUE222: ['STEEL16'],\r\n            ALLOY19: ['RED']\r\n        },\r\n        incompatibilities: {\r\n            // PANORAMAROOF: ['PETROL']\r\n            BLUE222: ['ALLOY19'],\r\n            STEEL16: ['RED']\r\n        },\r\n        priceList: {\r\n            'BLUE222': 200\r\n        }\r\n    },\r\n    languages: {\r\n        en: {\r\n            name: 'TestNeueKonfig - ENTitle',\r\n            description: 'test en desc',\r\n            options: [\r\n                {\r\n                    id: 'ALLOY19',\r\n                    name: '19 inch Alloy',\r\n                    description: 'description',\r\n                },\r\n                {\r\n                    id: 'STEEL16',\r\n                    name: '16 inch Steel',\r\n                    description: 'description',\r\n                },\r\n                {\r\n                    id: 'RED',\r\n                    name: 'red',\r\n                    description: 'Farbe rot',\r\n                },\r\n                {\r\n                    id: 'BLUE222',\r\n                    name: 'blue',\r\n                    description: 'Farbe blau',\r\n                }\r\n            ],\r\n            optionSections: [\r\n                {\r\n                    id: 'EXTERIOR2',\r\n                    name: 'Exterior'\r\n                }\r\n            ],\r\n            optionGroups: [\r\n                {\r\n                    id: 'WHEELS2',\r\n                    name: 'Wheels',\r\n                    description: 'round stuff'\r\n                },\r\n                {\r\n                    id: 'COLOR_GROUP2',\r\n                    name: 'Color',\r\n                    description: 'of the car',\r\n                }\r\n            ],\r\n            models: [\r\n                {\r\n                    id: 'Sport',\r\n                    name: 'Sport',\r\n                    description: 'en description, description, description, description, description, description, description, description, description, description, description, description, description, description, description, description,'\r\n                },\r\n                {\r\n                    id: 'Basic',\r\n                    name: 'Basic',\r\n                    description: 'en description, description, description, description, description, description, description, description, '\r\n                }\r\n            ]\r\n        },\r\n        de: {\r\n            name: 'TestNeueKonfig - DETitle',\r\n            description: 'test de desc',\r\n            options: [\r\n                {\r\n                    id: 'ALLOY19',\r\n                    name: '19 zoll Alo',\r\n                    description: 'Beschreibung',\r\n                },\r\n                {\r\n                    id: 'STEEL16',\r\n                    name: '16 zoll Stahl',\r\n                    description: 'Beschreibung',\r\n                },\r\n                {\r\n                    id: 'RED',\r\n                    name: 'red',\r\n                    description: 'Farbe rot',\r\n                },\r\n                {\r\n                    id: 'BLUE222',\r\n                    name: 'blau',\r\n                    description: 'Farbe blau',\r\n                }\r\n            ],\r\n            optionSections: [\r\n                {\r\n                    id: 'EXTERIOR2',\r\n                    name: 'Außen'\r\n                }\r\n            ],\r\n            optionGroups: [\r\n                {\r\n                    id: 'WHEELS2',\r\n                    name: 'Reifen',\r\n                    description: 'Reifen halt'\r\n                },\r\n                {\r\n                    id: 'COLOR_GROUP2',\r\n                    name: 'Farbe',\r\n                    description: 'Farbe vom Auto'\r\n                }\r\n            ],\r\n            models: [\r\n                {\r\n                    id: 'Sport',\r\n                    name: 'Sport',\r\n                    description: 'Beschreibung Sport'\r\n                },\r\n                {\r\n                    id: 'Basic',\r\n                    name: 'Standard',\r\n                    description: 'Beschreibung Standard'\r\n                }\r\n            ]\r\n        },\r\n        fr: {\r\n            name: 'TestNeueKonfig - FRTitle',\r\n            description: 'test fr desc',\r\n            options: [\r\n                {\r\n                    id: 'ALLOY19',\r\n                    name: '19 inch Alloy',\r\n                    description: 'description',\r\n                },\r\n                {\r\n                    id: 'STEEL16',\r\n                    name: '16 inch Steel',\r\n                    description: 'description',\r\n                },\r\n                {\r\n                    id: 'RED',\r\n                    name: 'red',\r\n                    description: 'Farbe rot',\r\n                },\r\n                {\r\n                    id: 'BLUE222',\r\n                    name: 'blue',\r\n                    description: 'Farbe blau',\r\n                }\r\n            ],\r\n            optionSections: [\r\n                {\r\n                    id: 'EXTERIOR2',\r\n                    name: 'Exterior'\r\n                }\r\n            ],\r\n            optionGroups: [\r\n                {\r\n                    id: 'WHEELS2',\r\n                    name: 'Wheels',\r\n                    description: 'round stuff'\r\n                },\r\n                {\r\n                    id: 'COLOR_GROUP2',\r\n                    name: 'Color',\r\n                    description: 'of the car',\r\n                }\r\n            ],\r\n            models: [\r\n                {\r\n                    id: 'Sport',\r\n                    name: 'Sport',\r\n                    description: 'description fr'\r\n                },\r\n                {\r\n                    id: 'Basic',\r\n                    name: 'Basic',\r\n                    description: 'description fr'\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    configuration: initialConfiguration, // testConfiguration\r\n    currentLanguage: defaultLang,\r\n    status: 'idle', // | 'loading' | 'succeeded' | 'failed'\r\n    error: null\r\n}\r\n\r\nexport const builderSlice = createSlice({\r\n    name: 'builder',\r\n    initialState: {\r\n        ...initialState, \r\n        configuration: readFromLocalStorage('builder') || initialState.configuration\r\n    },\r\n    reducers: {\r\n        addSection: (state, action) => {\r\n            const name = action.payload\r\n\r\n            // add to sections\r\n            state.configuration.optionSections.push({\r\n                id: name,\r\n                // name: name,\r\n                optionGroupIds: []\r\n            })\r\n\r\n            // add to every language\r\n            const newSection = { id: name, name }\r\n            for (const lang in state.configuration.languages) {\r\n                const langObj = state.configuration.languages[lang]\r\n                const sections = langObj.optionSections\r\n                sections.push(newSection)\r\n            }\r\n            // const section = sections.find(s => s.id === name)\r\n            // if (section) section.name = name\r\n            // else sections.push({id: name, name: name})\r\n\r\n            // const sections = state.configuration.languages[language].optionSections\r\n            // const section = sections.find(s => s.id === name)\r\n            // if (section) section.name = name\r\n            // else sections.push({id: name, name: name})\r\n\r\n            // state.configuration.languages[language].optionSections[name] = {name: name}\r\n        },\r\n        changeSectionProperties: (state, action) => {\r\n            const { sectionId, newName } = action.payload\r\n\r\n            const section = state.configuration.languages[state.currentLanguage].optionSections.find(s => s.id === sectionId)\r\n            if (section) {\r\n                section.name = newName || section.name\r\n            }\r\n        },\r\n        removeSection: (state, action) => {\r\n            const sectionId = action.payload\r\n\r\n            // remove from sections\r\n            state.configuration.optionSections = state.configuration.optionSections.filter(s => s.id !== sectionId)\r\n            \r\n            // remove from all languages\r\n            for (const lang in state.configuration.languages) {\r\n                const langObj = state.configuration.languages[lang]\r\n                langObj.optionSections = langObj.optionSections.filter(s => s.id !== sectionId)\r\n            }\r\n        },\r\n        addOptionGroup: (state, action) => {\r\n            const { sectionId, groupId, name, description, isRequired, isReplacementGroup } = action.payload\r\n\r\n            state.configuration.optionGroups.push({\r\n                id: groupId,\r\n                // name: name,\r\n                // description: description,\r\n                required: isRequired,\r\n                replacement: isReplacementGroup,\r\n                optionIds: []\r\n            })\r\n\r\n            // add to every language\r\n            const newGroup = {\r\n                id: groupId, \r\n                name, \r\n                description\r\n            }\r\n            for (const lang in state.configuration.languages) {\r\n                const langObj = state.configuration.languages[lang]\r\n                const groups = langObj.optionGroups\r\n                groups.push(newGroup)\r\n            }\r\n            \r\n            // add to language\r\n            // const groups = state.configuration.languages[state.currentLanguage].optionGroups\r\n            // let group = groups.find(g => g.id === groupId)\r\n            // const updatedGroup = {\r\n            //     id: groupId, \r\n            //     name, \r\n            //     description\r\n            // }\r\n            // if (group) group = updatedGroup\r\n            // else groups.push(updatedGroup)\r\n\r\n            // add to section\r\n            const section = state.configuration.optionSections.find(s => s.id === sectionId)\r\n            if (section) section.optionGroupIds.push(groupId)\r\n        },\r\n        changeGroupProperties: (state, action) => {\r\n            const { groupId, newName, newDescription } = action.payload\r\n\r\n            const group = state.configuration.languages[state.currentLanguage].optionGroups.find(g => g.id === groupId)\r\n            if (group) {\r\n                group.name = newName || group.name\r\n                group.description = newDescription || group.description\r\n            }\r\n        },\r\n        setGroupRequirements: (state, action) => {\r\n            const { groupId, requirements } = action.payload\r\n\r\n            state.configuration.rules.groupRequirements[groupId] = requirements\r\n\r\n            // cleanup empty requirements (remove dictionary entry if the option array is empty)\r\n            for (const gId in state.configuration.rules.groupRequirements) {\r\n                if (state.configuration.rules.groupRequirements[gId].length === 0) {\r\n                    delete state.configuration.rules.groupRequirements[gId]\r\n                }\r\n            }\r\n        },\r\n        setGroupIsRequired: (state, action) => {\r\n            const { groupId, required } = action.payload\r\n\r\n            const group = state.configuration.optionGroups.find(g => g.id === groupId)\r\n            if (group) group.required = required\r\n        },\r\n        setGroupIsReplacement: (state, action) => {\r\n            const { groupId, replacement } = action.payload\r\n\r\n            const group = state.configuration.optionGroups.find(g => g.id === groupId)\r\n            if (group) group.replacement = replacement\r\n        },\r\n        removeOptionGroup: (state, action) => {\r\n            const { groupId, sectionId } = action.payload\r\n\r\n            // remove group requirements\r\n            if (state.configuration.rules.groupRequirements[groupId]) delete state.configuration.rules.groupRequirements[groupId]\r\n\r\n            // remove group from group list\r\n            state.configuration.optionGroups = state.configuration.optionGroups.filter(g => g.id !== groupId)\r\n\r\n            // remove from all languages\r\n            for (const lang in state.configuration.languages) {\r\n                const langObj = state.configuration.languages[lang]\r\n                langObj.optionGroups = langObj.optionGroups.filter(g => g.id !== groupId)\r\n            }\r\n\r\n            // remove group from section\r\n            const section = state.configuration.optionSections.find(s => s.id === sectionId)\r\n            if (section) section.optionGroupIds = section.optionGroupIds.filter(g => g !== groupId)\r\n        },\r\n        addOption: (state, action) => {\r\n            const { groupId, optionId, name, description, price } = action.payload\r\n\r\n            // add option to options list\r\n            state.configuration.options.push({\r\n                id: optionId,\r\n                // name: name,\r\n                // description: description,\r\n                groupId: groupId\r\n            })\r\n\r\n            // add to every language\r\n            const newOption = {\r\n                id: optionId, \r\n                name, \r\n                description\r\n            }\r\n            for (const lang in state.configuration.languages) {\r\n                const langObj = state.configuration.languages[lang]\r\n                const options = langObj.options\r\n                options.push(newOption)\r\n            }\r\n\r\n            // add to language\r\n            // const options = state.configuration.languages[language].options\r\n            // let option = options.find(o => o.id === optionId)\r\n            // const updatedOption = {\r\n            //     id: optionId,\r\n            //     name,\r\n            //     description\r\n            // }\r\n            // if (option) option = updatedOption\r\n            // else options.push(updatedOption)\r\n\r\n            // add option to group\r\n            const group = state.configuration.optionGroups.find(g => g.id === groupId)\r\n            if (group) group.optionIds.push(optionId)\r\n\r\n            // add option price to pricelist in rules\r\n            if (price) state.configuration.rules.priceList[optionId] = price\r\n        },\r\n        changeOptionProperties: (state, action) => {\r\n            const { optionId, newName, newDescription } = action.payload\r\n\r\n            const option = state.configuration.languages[state.currentLanguage].options.find(o => o.id === optionId)\r\n            if (option) {\r\n                option.name = newName || option.name\r\n                option.description = newDescription || option.description\r\n            }\r\n        },\r\n        setOptionPrice: (state, action) => {\r\n            const { optionId, price } = action.payload\r\n\r\n            state.configuration.rules.priceList[optionId] = price\r\n        },\r\n        setOptionRequirements: (state, action) => {\r\n            const { optionId, requirements } = action.payload\r\n\r\n            state.configuration.rules.requirements[optionId] = requirements\r\n\r\n            // cleanup empty requirements (remove dictionary entry if the option array is empty)\r\n            for (const oId in state.configuration.rules.requirements) {\r\n                if (state.configuration.rules.requirements[oId].length === 0) {\r\n                    delete state.configuration.rules.requirements[oId]\r\n                }\r\n            }\r\n        },\r\n        setOptionIncompatibilities: (state, action) => {\r\n            const { optionId, incompatibilities } = action.payload\r\n\r\n            state.configuration.rules.incompatibilities[optionId] = incompatibilities\r\n\r\n            // cleanup empty incompatitbilities (remove dictionary entry if the option array is empty)\r\n            for (const oId in state.configuration.rules.incompatibilities) {\r\n                if (state.configuration.rules.incompatibilities[oId].length === 0) {\r\n                    delete state.configuration.rules.incompatibilities[oId]\r\n                }\r\n            }\r\n        },\r\n        removeOption: (state, action) => {\r\n            const { groupId, optionId } = action.payload\r\n\r\n            // remove option from option list\r\n            state.configuration.options = state.configuration.options.filter(o => o.id !== optionId)\r\n\r\n            // remove option from group\r\n            const group = state.configuration.optionGroups.find(g => g.id === groupId)\r\n            if (group) group.optionIds = group.optionIds.filter(o => o !== optionId)\r\n\r\n            // remove from all languages\r\n            for (const lang in state.configuration.languages) {\r\n                const langObj = state.configuration.languages[lang]\r\n                langObj.options = langObj.options.filter(o => o.id !== optionId)\r\n            }\r\n\r\n            // remove option requirements\r\n            if (state.configuration.rules.requirements[optionId]) delete state.configuration.rules.requirements[optionId]\r\n\r\n            // remove option incompatibilities\r\n            if (state.configuration.rules.incompatibilities[optionId]) delete state.configuration.rules.incompatibilities[optionId]\r\n\r\n            // remove option price from pricelist\r\n            if (state.configuration.rules.priceList[optionId]) delete state.configuration.rules.priceList[optionId]\r\n        },\r\n        addModel: (state, action) => {\r\n            const { modelName, options, description } = action.payload\r\n\r\n            state.configuration.rules.models.push({\r\n                id: modelName, \r\n                options, \r\n            })\r\n\r\n            // add to every language\r\n            const newModel = {\r\n                id: modelName,\r\n                name: modelName,\r\n                description\r\n            }\r\n            for (const lang in state.configuration.languages) {\r\n                const langObj = state.configuration.languages[lang]\r\n                const models = langObj.models\r\n                models.push(newModel)\r\n            }\r\n\r\n            // add to language\r\n            // const models = state.configuration.languages[state.currentLanguage].models\r\n            // let model = models.find(m => m.id === modelName)\r\n            // const updatedModel = {\r\n            //     id: modelName,\r\n            //     name: modelName,\r\n            //     description\r\n            // }\r\n            // if (model) model = updatedModel\r\n            // else models.push(updatedModel)\r\n        },\r\n        changeModelProperties: (state, action) => {\r\n            const { modelId, newName, newDescription } = action.payload\r\n\r\n            const model = state.configuration.languages[state.currentLanguage].models.find(m => m.id === modelId)\r\n            if (model) {\r\n                model.name = newName || model.name\r\n                model.description = newDescription || model.description\r\n            }\r\n        },\r\n        setDefaultModel: (state, action) => {\r\n            state.configuration.rules.defaultModel = action.payload\r\n        },\r\n        setModelOptions: (state, action) => {\r\n            const { modelId, options } = action.payload\r\n            \r\n            const model = state.configuration.rules.models.find(m => m.id === modelId)\r\n            if (model) model.options = options\r\n        },\r\n        removeModel: (state, action) => {\r\n            const modelId  = action.payload\r\n\r\n            // remove from models\r\n            state.configuration.rules.models = state.configuration.rules.models.filter(m => m.id !== modelId)\r\n\r\n            // remove from languages\r\n            for (const lang in state.configuration.languages) {\r\n                const langObj = state.configuration.languages[lang]\r\n                langObj.models = langObj.models.filter(m => m.id !== modelId)\r\n            }\r\n        },\r\n        setBasePrice: (state, action) => {\r\n            state.configuration.rules.basePrice = action.payload\r\n        },\r\n        setDescription: (state, action) => {\r\n            const description = action.payload\r\n\r\n            state.configuration.languages[state.currentLanguage].description = description\r\n        },\r\n        setName: (state, action) => {\r\n            const name = action.payload\r\n\r\n            state.configuration.languages[state.currentLanguage].name = name\r\n            if (!state.configuration.languages[defaultLang].name) {\r\n                // also set the name to the default lang if its empty\r\n                state.configuration.languages[defaultLang].name = name\r\n            }\r\n        },\r\n        changeInputLanguage: (state, action) => {\r\n            const newLanguage = action.payload\r\n\r\n            state.currentLanguage = newLanguage\r\n        },\r\n        resetBuild: (state, action) => {\r\n            state.configuration = initialConfiguration\r\n        },\r\n        loadingStarted: (state) => {\r\n            state.status = 'loading'\r\n        },\r\n        loadingSucceeded: (state, action) => {\r\n            state.status = 'succeeded'\r\n        },\r\n        loadingFailed: (state, action) => {\r\n            state.status = 'failed'\r\n            state.error = action.payload\r\n        },\r\n        loadingHandled: (state, action) => {\r\n            state.status = 'idle'\r\n            state.error = null\r\n        }\r\n    },\r\n    // extraReducers: (builder) => {\r\n    //     builder\r\n    //         .addCase(loadingSucceeded, (state, action) => {\r\n    //         })\r\n    // }\r\n})\r\n\r\nexport const saveBuilderToStorage = () => (dispatch, getState) => {\r\n    writeToLocalStorage(selectBuilderConfiguration(getState()), 'builder')\r\n}\r\n\r\nexport const createSection = (sectionName) => (dispatch, getState) => {\r\n    // check if section doesn't already exist\r\n    const sectionExists = getDoesSectionExist(getState(), sectionName)\r\n    if (sectionExists) {\r\n        return false\r\n    }\r\n\r\n    dispatch(addSection(sectionName))\r\n    return true\r\n}\r\nexport const deleteSection = (sectionId) => (dispatch, getState) => {\r\n    const section = getBuilderSectionById(getState(), sectionId)\r\n\r\n    if (!section) {\r\n        console.log('Could not delete section -> no section matches the id: ' + sectionId)\r\n        return\r\n    }\r\n    \r\n    // remove associated groups\r\n    const groups = extractGroupsFromBuilderSection(section)\r\n    groups.forEach(groupId => {\r\n        dispatch(deleteOptionGroup(groupId))\r\n    })\r\n\r\n    // remove section\r\n    dispatch(removeSection(sectionId))\r\n}\r\n\r\nexport const createGroup = (sectionId, name, description, isRequired, isReplacementGroup) => (dispatch, getState) => {\r\n\r\n    const groupId = name.replace(' ', '_')\r\n\r\n    // check if section doesn't already exist\r\n    const groupExists = getDoesGroupdExist(getState(), groupId)\r\n    if (groupExists) {\r\n        return false\r\n    }\r\n\r\n    dispatch(addOptionGroup({sectionId, groupId, name, description, isRequired, isReplacementGroup}))\r\n    return true\r\n}\r\nexport const deleteOptionGroup = (groupId, sectionId) => (dispatch, getState) => {\r\n    const group = getBuilderGroupById(getState(), groupId)\r\n\r\n    if (!group) {\r\n        console.log('Could not delete group -> no group matches the id: ' + groupId)\r\n        return\r\n    }\r\n\r\n    // remove associated options\r\n    const options = extractOptionsFromBuilderGroup(group)\r\n    options.forEach(optionId => {\r\n        dispatch(deleteOption(groupId, optionId))\r\n    })\r\n\r\n    // remove group from other group requirements\r\n    const groups = selectBuilderGroupRequirements(getState())\r\n    for (const gId in groups) {\r\n        const requirements = groups[gId].filter(req => req !== groupId)\r\n        dispatch(setGroupRequirements({groupId: gId, requirements}))\r\n    }\r\n\r\n    // remove group\r\n    dispatch(removeOptionGroup({groupId, sectionId}))\r\n}\r\n\r\nexport const createOption = (groupId, name, description, price = 0) => (dispatch, getState) => {\r\n    const optionId = `${name}_${groupId}`.replace(' ', '_')\r\n\r\n    // check if option doesn't already exist\r\n    const optionExists = getDoesOptionExist(getState(), optionId)\r\n    if (optionExists) {\r\n        return false\r\n    }\r\n\r\n    dispatch(addOption({groupId, optionId, name, description, price}))\r\n    return true\r\n}\r\nexport const deleteOption = (groupId, name) => (dispatch, getState) => {\r\n    // remove option from models\r\n    const models = selectBuilderModels(getState())\r\n    models.forEach(model => {\r\n        const newOptions = extractModelOptionsFromBuilderModel(model).filter(optionId => optionId !== name) // get the models options and filter out the option that gets removed\r\n        dispatch(changeModelOptions(model.id, newOptions))\r\n    })\r\n\r\n    // remove option from other requirements\r\n    const allRequirements = selectBuilderOptionRequirements(getState())\r\n    for (const oId in allRequirements) {\r\n        const requirements = allRequirements[oId].filter(req => req !== name)\r\n        dispatch(setOptionRequirements({optionId: oId, requirements}))\r\n    }\r\n\r\n    // remove option from other incompatibilities\r\n    const allIncompatibilities = selectBuilderOptionIncompatibilities(getState())\r\n    for (const oId in allIncompatibilities) {\r\n        const incompatibilities = allIncompatibilities[oId].filter(req => req !== name)\r\n        dispatch(setOptionIncompatibilities({optionId: oId, incompatibilities}))\r\n    }\r\n    \r\n    dispatch(removeOption({groupId, optionId: name}))\r\n}\r\n\r\nexport const createModel = (modelName, description, options = []) => (dispatch) => {\r\n    dispatch(addModel({\r\n        modelName,\r\n        options,\r\n        description\r\n    }))\r\n}\r\nexport const createDefaultModel = (modelName) => (dispatch) => {\r\n    dispatch(setDefaultModel(modelName))\r\n}\r\nexport const changeModelOptions = (modelId, options) => (dispatch) => {\r\n    dispatch(setModelOptions({\r\n        modelId,\r\n        options\r\n    }))\r\n}\r\n\r\nexport const finishConfigurationBuild = () => async (dispatch, getState) => {\r\n    dispatch(loadingStarted())\r\n\r\n    let configuration = selectBuilderConfiguration(getState())\r\n    \r\n    writeToLocalStorage(initialState, 'builder')\r\n\r\n    postConfiguration(configuration)\r\n    .then(res => {\r\n        dispatch(loadingSucceeded(res))\r\n    })\r\n    .catch(error => {\r\n        dispatch(loadingFailed(error))\r\n    })\r\n}\r\n\r\n\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { \r\n    addSection, changeSectionProperties, removeSection,\r\n    addOptionGroup, changeGroupProperties, setGroupRequirements, setGroupIsRequired, setGroupIsReplacement, removeOptionGroup,\r\n    addOption, changeOptionProperties, setOptionPrice, setOptionRequirements, setOptionIncompatibilities, removeOption,\r\n    addModel, changeModelProperties, setDefaultModel, setModelOptions, removeModel,\r\n    setBasePrice, setDescription, setName, changeInputLanguage,\r\n    resetBuild,\r\n    loadingStarted, loadingSucceeded, loadingFailed, loadingHandled\r\n} = builderSlice.actions\r\n\r\nexport default builderSlice.reducer","import { Grid, InputAdornment, TextField, Typography } from '@mui/material'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { translate } from '../../../lang'\r\nimport { getBuilderDescription, getBuilderName, selectBuilderBasePrice } from '../../../state/configurationBuilder/builderSelectors'\r\nimport { setBasePrice, setDescription, setName } from '../../../state/configurationBuilder/builderSlice'\r\nimport { selectLanguage } from '../../../state/language/languageSelectors'\r\n\r\nfunction ConfigurationProperties({ name, description, basePrice, setName, setDescription, setPrice, language }) {\r\n\r\n    const [priceError, setPriceError] = useState(false)\r\n    const [nameInput, setNameInput] = useState(name)\r\n    const [descriptionInput, setDescriptionInput] = useState(description)\r\n    \r\n    useEffect(() => {\r\n        // when the description updates, also update the value for the input field\r\n        // -> language could change so the value for the other languages name might be different\r\n        setNameInput(name)\r\n    }, [name, setNameInput])\r\n    \r\n    useEffect(() => {\r\n        setDescriptionInput(description)\r\n    }, [description, setNameInput])\r\n\r\n    function handleNameChanged(event) {\r\n        if (nameInput) setName(nameInput)\r\n    }\r\n\r\n    function handleDescriptionChanged(event) {\r\n        if (descriptionInput) setDescription(descriptionInput)\r\n    }\r\n\r\n    function handleBasePriceChanged(event) {\r\n        const price = Number(event.target.value)\r\n\r\n        if (price || price === 0) {\r\n            setPriceError(false)\r\n            setPrice(price)\r\n        } else {\r\n            setPriceError(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid item container rowGap={2}>\r\n            <Grid item>\r\n                <Typography variant=\"h3\">{translate('productProperties', language)}</Typography>\r\n            </Grid>\r\n\r\n            <Grid item container rowSpacing={2} columnSpacing={2}>\r\n                <Grid item xs={12} sm={8} md={3}>\r\n                    <TextField \r\n                        fullWidth\r\n                        label={translate('configurationName', language)}\r\n                        variant=\"outlined\"\r\n                        value={nameInput}\r\n                        onChange={(e) => setNameInput(e.target.value)}\r\n                        onBlur={handleNameChanged}\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} flexGrow={1} sm={4} md={2}>\r\n                    <TextField\r\n                        fullWidth\r\n                        label={translate('basePrice', language)}\r\n                        variant=\"outlined\"\r\n                        onChange={handleBasePriceChanged}\r\n                        error={priceError}\r\n                        defaultValue={basePrice}\r\n                        type=\"number\"\r\n                        InputProps={{\r\n                            inputProps: {\r\n                                min: 0\r\n                            },\r\n                            startAdornment: <InputAdornment position='start'>€</InputAdornment>\r\n                        }}\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item flexGrow={1}>\r\n                    <TextField \r\n                        fullWidth\r\n                        label={translate('description', language)}\r\n                        variant=\"outlined\"\r\n                        value={descriptionInput}\r\n                        onChange={(e) => setDescriptionInput(e.target.value)}\r\n                        onBlur={handleDescriptionChanged} // opnly change description when done (if called on every change -> there would be too many state calls that would result in lag)\r\n                        multiline\r\n                        maxRows={4}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    name: getBuilderName(state),\r\n    description: getBuilderDescription(state),\r\n    basePrice: selectBuilderBasePrice(state),\r\n    language: selectLanguage(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    setName: setName,\r\n    setDescription: setDescription,\r\n    setPrice: setBasePrice\r\n}\r\nexport default connect(\r\n    mapStateToProps, \r\n    mapDispatchToProps\r\n)(ConfigurationProperties)\r\n","import { Edit } from '@mui/icons-material'\r\nimport { Button, IconButton, Tooltip } from '@mui/material'\r\nimport React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { inputDialogOpen } from '../../../state/inputDialog/inputDialogSlice'\r\n\r\nfunction EditButton({ title, propertyName = '', oldValue = '', textButton = false, valueChangedCallback, openInputDialog }) {\r\n\r\n    function handleClick() {\r\n        const data = {\r\n            item: {name: propertyName || 'new value', value: oldValue }\r\n        }\r\n        openInputDialog(`${title}`, data, (data) => {\r\n            valueChangedCallback(data.item.value)\r\n        })\r\n    }\r\n\r\n    function renderTextButton() {\r\n        return (\r\n            <Button onClick={handleClick}>{`${title}`}</Button>\r\n        )\r\n    }\r\n\r\n    function renderIconButton() {\r\n        return (\r\n            <Tooltip title={title}>\r\n                <IconButton sx={{display: 'inline'}} onClick={handleClick}>\r\n                    <Edit />\r\n                </IconButton>\r\n            </Tooltip>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {textButton ? renderTextButton() : renderIconButton()}\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n\r\n})\r\nconst mapDispatchToProps = {\r\n    openInputDialog: inputDialogOpen\r\n}\r\nexport default connect(\r\n    mapStateToProps, \r\n    mapDispatchToProps\r\n)(EditButton)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Checkbox, FormControl, Grid, IconButton, InputLabel, ListItemText, MenuItem, OutlinedInput, Select, Tooltip, Typography } from '@mui/material'\r\nimport { changeModelOptions, changeModelProperties, removeModel } from '../../../../state/configurationBuilder/builderSlice'\r\nimport { Delete } from '@mui/icons-material'\r\nimport { confirmDialogOpen } from '../../../../state/confirmationDialog/confirmationSlice'\r\nimport { translate } from '../../../../lang'\r\nimport { selectLanguage } from '../../../../state/language/languageSelectors'\r\nimport { getBuilderGroupNameByOptionId, getModelDescriptionFromBuilderModel, getModelNameFromBuilderModel, selectBuilderOptionsFromCurrentLanguage } from '../../../../state/configurationBuilder/builderSelectors'\r\nimport EditButton from '../EditButton'\r\n\r\nfunction Model({ model, name, description, allOptions, getBuilderGroupNameByOptionId, removeModel, changeModelProperties, setModelOptions, openConfirmDialog, language }) {\r\n\r\n    const { options } = model\r\n    const modelId = model.id\r\n\r\n    function handleDelete() {\r\n        openConfirmDialog(`${translate('removeModelConfirmation', language)}: '${name}'?`, {}, null, () => {\r\n            removeModel(modelId)\r\n        })\r\n    }\r\n\r\n    function handleChangeOptions(event) {\r\n        const {\r\n            target: { value },\r\n        } = event\r\n\r\n        // On autofill we get a stringified value. \r\n        const newOptions = typeof value === 'string' ? value.split(',') : value\r\n\r\n        setModelOptions(name, newOptions)\r\n    }\r\n\r\n    return (\r\n        <Grid container>\r\n            {/* Info */}\r\n            <Grid \r\n                item xs={12} sm={10} xl={9}\r\n            >\r\n                <Grid item container alignItems=\"center\">\r\n                    <Typography variant=\"body1\">\r\n                        {name}\r\n                    </Typography>\r\n\r\n                    <EditButton \r\n                        title={`${translate('editModelName', language)}`} \r\n                            propertyName={translate('modelName', language)} \r\n                            oldValue={name} \r\n                        valueChangedCallback={(newValue) => {changeModelProperties({modelId, newName: newValue})}}\r\n                    ></EditButton>\r\n\r\n                </Grid>\r\n                <Grid item container alignItems=\"center\">\r\n                    <Typography variant=\"body2\">\r\n                        {description}\r\n                        <EditButton\r\n                            title={`${translate('editModelDescription', language)}`} \r\n                            propertyName={translate('modelDescription', language)} \r\n                            oldValue={description} \r\n                            valueChangedCallback={(newValue) => {changeModelProperties({modelId, newDescription: newValue})}}\r\n                        ></EditButton>\r\n                    </Typography>\r\n\r\n\r\n                </Grid>\r\n            </Grid>\r\n\r\n            {/* Actions */}\r\n            <Grid \r\n                item container xs={12} sm={2} xl={1} \r\n                justifyContent={{xs: 'center', sm: 'flex-end'}}\r\n            >\r\n                \r\n\r\n                <Tooltip title={`${translate('remove', language)} '${name}'`}>\r\n                    <IconButton onClick={handleDelete}>\r\n                        <Delete />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </Grid>\r\n\r\n            {/* Option Select */}\r\n            <Grid\r\n                item container xs={12} xl={2}\r\n                justifyContent={{xs: 'center', xl: 'flex-end'}}\r\n            >\r\n                <FormControl sx={{ m: 1, width: 300 }}>\r\n                    <InputLabel id={`options-label-${name}`}>{translate('options', language)}</InputLabel>\r\n                    <Select\r\n                        labelId=\"options-label\"\r\n                        multiple\r\n                        value={options}\r\n                        onChange={handleChangeOptions}\r\n                        input={<OutlinedInput label={translate('options', language)} />}\r\n                        renderValue={(selectedIds) => {\r\n                                const selectedOptions = allOptions.filter(o => selectedIds.includes(o.id))\r\n                                return selectedOptions.map(o => o.name).join(', ')\r\n                            }\r\n                        }\r\n                    >\r\n                        {allOptions.map((option) => (\r\n                            <MenuItem key={option.id} value={option.id}>\r\n                                <Checkbox checked={options.indexOf(option.id) > -1} />\r\n                                <ListItemText primary={`${option.name} (${getBuilderGroupNameByOptionId(option.id)})`} />\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            \r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    name: getModelNameFromBuilderModel(state, ownProps.model),\r\n    description: getModelDescriptionFromBuilderModel(state, ownProps.model),\r\n    allOptions: selectBuilderOptionsFromCurrentLanguage(state),\r\n    getBuilderGroupNameByOptionId: (optionId) => getBuilderGroupNameByOptionId(state, optionId),\r\n    language: selectLanguage(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    removeModel,\r\n    changeModelProperties,\r\n    setModelOptions: changeModelOptions,\r\n    openConfirmDialog: confirmDialogOpen\r\n}\r\nexport default connect(\r\n    mapStateToProps, \r\n    mapDispatchToProps\r\n)(Model)","import { Add } from '@mui/icons-material'\r\nimport { FormControl, Grid, IconButton, InputLabel, MenuItem, Select, Tooltip, Typography } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { translate } from '../../../../lang'\r\nimport { selectBuilderDefaultModel, selectBuilderModels } from '../../../../state/configurationBuilder/builderSelectors'\r\nimport { createDefaultModel, createModel } from '../../../../state/configurationBuilder/builderSlice'\r\nimport { inputDialogOpen } from '../../../../state/inputDialog/inputDialogSlice'\r\nimport { selectLanguage } from '../../../../state/language/languageSelectors'\r\nimport Model from './Model'\r\n\r\nfunction ModelSelector({ models, selectedDefaultModel, setDefaultModel, createModel, openInputDialog, language }) {\r\n\r\n    function handleAddModel() {\r\n        const title = translate(`addModel`, language)\r\n\r\n        const data = {\r\n            modelName: {name: translate('modelName', language), value: '' },\r\n            modelDesc: {name: translate('modelDescription', language), value: '' },\r\n        }\r\n\r\n        openInputDialog(title, data, (data) => {\r\n    \r\n            const name = data.modelName.value\r\n            const description = data.modelDesc.value\r\n            \r\n            createModel(name, description)\r\n\r\n        })\r\n    }\r\n\r\n    function handleSetDefaultModel(event) {\r\n        setDefaultModel(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <Box width=\"100%\">\r\n            <Grid container justifyContent=\"space-between\">\r\n\r\n                <Typography variant=\"h3\">{translate('models', language)}</Typography>\r\n\r\n                <Box sx={{ minWidth: 120 }}>\r\n                    <FormControl variant='standard' \r\n                        fullWidth\r\n                    >\r\n                        <InputLabel id=\"select-default-model-label\">{translate('defaultModel', language)}</InputLabel>\r\n                        <Select\r\n                            labelId='select-default-model-label'\r\n                            value={selectedDefaultModel}\r\n                            autoWidth\r\n                            label=\"Default Model\"\r\n                            onChange={handleSetDefaultModel}\r\n                            >\r\n                            {models.map((model, index) => (\r\n                                <MenuItem key={index} value={model.id}>{model.id}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                </Box>\r\n            </Grid>\r\n\r\n            <Grid container gap={2} marginTop={2} direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n\r\n                {models.map((model, index) => (\r\n                    <Model key={index} model={model} isSelected={model.id === selectedDefaultModel}></Model>\r\n                ))}\r\n\r\n                <Box>\r\n                    <Tooltip title=\"Add Model\">\r\n                        <IconButton onClick={handleAddModel}>\r\n                            <Add />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Box>\r\n\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    models: selectBuilderModels(state),\r\n    selectedDefaultModel: selectBuilderDefaultModel(state),\r\n    language: selectLanguage(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    createModel: createModel,\r\n    setDefaultModel: createDefaultModel,\r\n    openInputDialog: inputDialogOpen\r\n}\r\nexport default connect(\r\n    mapStateToProps, \r\n    mapDispatchToProps\r\n)(ModelSelector)","import { Delete } from '@mui/icons-material'\r\nimport { Box, Checkbox, FormControl, Grid, IconButton, InputAdornment, InputLabel, ListItemText, MenuItem, OutlinedInput, Select, TextField, Tooltip, Typography } from '@mui/material'\r\nimport React from 'react'\r\nimport { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { translate } from '../../../../lang'\r\nimport { getBuilderGroupNameByOptionId, getBuilderOptionById, getBuilderOptionIncompatibilitiesByOptionId, getBuilderOptionPrice, getBuilderOptionRequirementsByOptionId, selectBuilderOptionsFromCurrentLanguage } from '../../../../state/configurationBuilder/builderSelectors'\r\nimport { changeOptionProperties, deleteOption, setOptionIncompatibilities, setOptionPrice, setOptionRequirements } from '../../../../state/configurationBuilder/builderSlice'\r\nimport { confirmDialogOpen } from '../../../../state/confirmationDialog/confirmationSlice'\r\nimport { selectLanguage } from '../../../../state/language/languageSelectors'\r\nimport EditButton from '../EditButton'\r\n\r\nfunction BuilderOption({ optionId, group, option, optionPrice, allOptions, optionReqirements, optionIncompatibilities, getBuilderGroupNameByOptionId, language, remove, setOptionPrice, setOptionRequirements, setOptionIncompatibilities, changeOptionProperties, openConfirmDialog }) {\r\n\r\n    const { name, description } = option\r\n\r\n    const [priceError, setPriceError] = useState(false)\r\n\r\n    function handleDelete() {\r\n        openConfirmDialog(`${translate('removeOptionConfigrmation', language)}: '${name}'?`, {}, null, () => {\r\n            remove(group.id, optionId)\r\n        })\r\n    }\r\n\r\n    const arrayFromMultiSelect = (event) => {\r\n        const {\r\n            target: { value }\r\n        } = event\r\n\r\n        // on autofill we get a stringified value\r\n        return typeof value === 'string' ? value.split(',') : value\r\n    }\r\n\r\n    function handlePriceChanged(event) {\r\n        const price = Number(event.target.value)\r\n\r\n        // check if the price is valid\r\n        if (price < 0) {\r\n            setPriceError(true)\r\n            return\r\n        }\r\n\r\n        setPriceError(false)\r\n        setOptionPrice({optionId, price})\r\n    }\r\n\r\n    function handleSetRequirements(event) {\r\n        const newRequirements = arrayFromMultiSelect(event)\r\n\r\n        setOptionRequirements({optionId, requirements: newRequirements})\r\n    }\r\n\r\n    function handleSetIncompatibilities(event) {\r\n        const newIncomps = arrayFromMultiSelect(event)\r\n\r\n        setOptionIncompatibilities({optionId, incompatibilities: newIncomps})\r\n    }\r\n\r\n    return (\r\n        <Grid container paddingTop={2} paddingLeft={2} paddingBottom={2}>\r\n            <Grid item width=\"100%\">\r\n                <Box display=\"flex\" justifyContent=\"space-between\">\r\n                    {/* Info */}\r\n                    <Box>\r\n                        <Typography variant=\"body1\">\r\n                            {name}\r\n                            <EditButton \r\n                                title={`${translate('editOptionName', language)}`}\r\n                                propertyName={translate('optionName', language)} \r\n                                oldValue={name} \r\n                                valueChangedCallback={(newValue) => {changeOptionProperties({optionId, newName: newValue})}}\r\n                            ></EditButton>\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            {description}\r\n                            <EditButton \r\n                                title={`${translate('editOptionDescription', language)}`}\r\n                                propertyName={translate('optionDescription', language)} \r\n                                oldValue={description} \r\n                                valueChangedCallback={(newValue) => {changeOptionProperties({optionId, newDescription: newValue})}}\r\n                            ></EditButton>\r\n                        </Typography>\r\n                    </Box>\r\n\r\n                    {/* Actions */}\r\n                    <Tooltip title={`${translate('remove', language)} '${name}'`}>\r\n                        <IconButton onClick={handleDelete}>\r\n                            <Delete />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Box>\r\n            </Grid>\r\n\r\n            <Grid item container justifyContent=\"center\">\r\n                <FormControl sx={{ m: 1, width: 300 }}>\r\n                    <TextField \r\n                        fullWidth\r\n                        label={translate('optionPrice', language)}\r\n                        variant=\"outlined\"\r\n                        onChange={handlePriceChanged}\r\n                        error={priceError}\r\n                        defaultValue={optionPrice}\r\n                        type=\"number\"\r\n                        InputProps={{\r\n                            inputProps: {\r\n                                min: 0\r\n                            },\r\n                            startAdornment: <InputAdornment position='start'>€</InputAdornment>\r\n                        }}\r\n                    />\r\n                </FormControl>\r\n                <FormControl sx={{ m: 1, width: 300 }}>\r\n                    {Multiselect(translate('requirements', language), optionReqirements, allOptions.filter(o => o.id !== optionId), getBuilderGroupNameByOptionId, handleSetRequirements)}\r\n                </FormControl>\r\n                <FormControl sx={{ m: 1, width: 300 }}>\r\n                    {Multiselect(translate('incompatibilities', language), optionIncompatibilities, allOptions.filter(o => o.id !== optionId), getBuilderGroupNameByOptionId, handleSetIncompatibilities)}\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst Multiselect = (title, resultOptions, allOptions, getBuilderGroupNameByOptionId, onChangeCallback) => (\r\n    <>\r\n        <InputLabel id={`options-label-${title}`}>{title}</InputLabel>\r\n        <Select\r\n            labelId={`options-label-${title}`}\r\n            multiple\r\n            value={resultOptions}\r\n            onChange={onChangeCallback}\r\n            input={<OutlinedInput label={title} />}\r\n            renderValue={(selectedIds) => {\r\n                    const selectedOptions = allOptions.filter(o => selectedIds.includes(o.id))\r\n                    return selectedOptions.map(o => o.name).join(', ')\r\n                }\r\n            }\r\n        >\r\n            {allOptions.map((option) => {\r\n                return (\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                        <Checkbox checked={resultOptions.indexOf(option.id) > -1} />\r\n                        <ListItemText primary={`${option.name} (${getBuilderGroupNameByOptionId(option.id)})`} />\r\n                    </MenuItem>\r\n                )\r\n            })}\r\n        </Select>\r\n    </>\r\n)\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    option: getBuilderOptionById(state, ownProps.optionId),\r\n    optionPrice: getBuilderOptionPrice(state, ownProps.optionId),\r\n    allOptions: selectBuilderOptionsFromCurrentLanguage(state),\r\n    optionReqirements: getBuilderOptionRequirementsByOptionId(state, ownProps.optionId),\r\n    optionIncompatibilities: getBuilderOptionIncompatibilitiesByOptionId(state, ownProps.optionId),\r\n    getBuilderGroupNameByOptionId: (optionId) => getBuilderGroupNameByOptionId(state, optionId),\r\n    language: selectLanguage(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    remove: deleteOption,\r\n    setOptionRequirements,\r\n    setOptionIncompatibilities,\r\n    setOptionPrice,\r\n    changeOptionProperties,\r\n    openConfirmDialog: confirmDialogOpen\r\n}\r\nexport default connect(\r\n    mapStateToProps, \r\n    mapDispatchToProps\r\n)(BuilderOption)","import { Checkbox, Divider, FormControl, FormControlLabel, Grid, IconButton, InputLabel, ListItemText, MenuItem, OutlinedInput, Select, Tooltip, Typography } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport React from 'react'\r\nimport { selectLanguage } from '../../../../state/language/languageSelectors'\r\nimport { translate } from '../../../../lang'\r\nimport { connect } from 'react-redux'\r\nimport BuilderOption from './BuilderOption'\r\nimport { Add, Delete } from '@mui/icons-material'\r\nimport { alertTypes, openAlert } from '../../../../state/alert/alertSlice'\r\nimport { changeGroupProperties, createOption, deleteOptionGroup, setGroupIsReplacement, setGroupIsRequired, setGroupRequirements } from '../../../../state/configurationBuilder/builderSlice'\r\nimport { inputDialogOpen } from '../../../../state/inputDialog/inputDialogSlice'\r\nimport { confirmDialogOpen } from '../../../../state/confirmationDialog/confirmationSlice'\r\nimport { getBuilderGroupRequirementsByGroupId, getGroupDescriptionFromBuilderGroup, getGroupNameFromBuilderGroup, selectBuilderGroupsFromCurrentLanguage } from '../../../../state/configurationBuilder/builderSelectors'\r\nimport EditButton from '../EditButton'\r\n\r\nfunction OptionGroup({group, name, description, sectionId, allGroups, groupRequirements, createOption, setGroupRequirements, setGroupIsRequired, setGroupIsReplacement, changeGroupProperties, deleteGroup, openInputDialog, openConfirmDialog, openAlert, language}) {\r\n\r\n    const { id, optionIds, required, replacement } = group\r\n\r\n    function handleAddOption() {\r\n        const data = {\r\n            optionName: {name: translate('optionName', language), value: '' },\r\n            optionDescription: {name: translate('optionDescription', language), value: ''},\r\n        }\r\n        openInputDialog(translate('newOption', language), data, (data) => {\r\n            const success = createOption(id, data.optionName.value, data.optionDescription.value)\r\n            if (!success) {\r\n                openAlert('Option already exists!', alertTypes.ERROR)\r\n            }\r\n        })\r\n    }\r\n\r\n    function handleRemoveGroup() {\r\n        openConfirmDialog(`${translate('removeGroupConfirmation', language)}: ${name}?`, {}, null, () => {\r\n            deleteGroup(id, sectionId)\r\n        })\r\n    }\r\n\r\n    function handleSetGroupRequirements(event) {\r\n        const {\r\n            target: { value }\r\n        } = event\r\n\r\n        // on autofill we get a stringified value\r\n        const requirements = typeof value === 'string' ? value.split(',') : value\r\n        setGroupRequirements({groupId: id, requirements: requirements})\r\n    }\r\n\r\n    function handleChangeRequired(event) {\r\n        setGroupIsRequired({groupId: id, required: !required})\r\n    }\r\n\r\n    function handleChangeMultiselect(event) {\r\n        setGroupIsReplacement({groupId: id, replacement: !replacement})\r\n    }\r\n\r\n    return (\r\n        <Box marginBottom={1} padding={1} sx={{border: '1px dashed grey'}}>\r\n            <Box display={'flex'} flexWrap=\"wrap\" justifyContent={'space-between'} alignItems={'center'}>\r\n                <Box>\r\n                    <Typography variant=\"h3\">\r\n                        {name}\r\n                        <EditButton \r\n                            title={`${translate('editGroupName', language)}`}\r\n                            propertyName={translate('groupName', language)} \r\n                            oldValue={name} \r\n                            valueChangedCallback={(newValue) => {changeGroupProperties({groupId: id, newName: newValue})}}\r\n                        ></EditButton>\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle1\">\r\n                        {description}\r\n                        <EditButton \r\n                            title={`${translate('editGroupDescription', language)}`} \r\n                            propertyName={translate('groupDescription', language)} \r\n                            oldValue={description} \r\n                            valueChangedCallback={(newValue) => {changeGroupProperties({groupId: id, newDescription: newValue})}}\r\n                        ></EditButton>\r\n                    </Typography>\r\n                </Box>\r\n\r\n                <Box>\r\n                    <Tooltip title={translate('addOption', language)}>\r\n                        <IconButton onClick={handleAddOption}>\r\n                            <Add />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={`${translate('remove', language)} '${name}'`}>\r\n                        <IconButton onClick={handleRemoveGroup}>\r\n                            <Delete />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Grid item container justifyContent=\"center\">\r\n                <Grid \r\n                    item container justifyContent=\"center\"\r\n                    xs={12} xl={6}\r\n                >\r\n                    {Multiselect(translate('requirements', language), name, groupRequirements, allGroups.filter(g => g.id !== id), handleSetGroupRequirements)}\r\n                </Grid>\r\n                <Grid \r\n                    item container justifyContent=\"center\"\r\n                    xs={12} xl={3} \r\n                >\r\n                    {CheckboxInput(translate('required', language), required, (e) => handleChangeRequired(e))}\r\n                </Grid>\r\n                <Grid \r\n                    item container justifyContent=\"center\"\r\n                    xs={12} xl={3}\r\n                >\r\n                    {CheckboxInput(translate('multiselect', language), !replacement, (e) => handleChangeMultiselect(e))}\r\n                </Grid>\r\n            </Grid>\r\n            \r\n            <Box>\r\n                {optionIds.map(optionId => (\r\n                    <div key={optionId}>\r\n                        <Divider variant=\"middle\" />\r\n                        <BuilderOption key={optionId} group={group} optionId={optionId}></BuilderOption>\r\n                    </div>\r\n                ))}\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst CheckboxInput = (title, checked, callback) => {\r\n    return (\r\n        <FormControl sx={{ m: 1, width: 300 }}>\r\n            <FormControlLabel\r\n                label={title}\r\n                labelPlacement=\"end\"\r\n                control={\r\n                    <Checkbox\r\n                        checked={checked}\r\n                        onChange={(event) => {\r\n                            callback(event)\r\n                        }}\r\n                    />\r\n                }\r\n            />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nconst Multiselect = (title, groupName, resultGroups, allGroups, onChangeCallback) => (\r\n    <FormControl sx={{ m: 1, width: 300 }}>\r\n        <InputLabel id={`${title}-${groupName}`}>{title}</InputLabel>\r\n        <Select\r\n            labelId={`${title}-${groupName}`}\r\n            multiple\r\n            value={resultGroups}\r\n            onChange={onChangeCallback}\r\n            input={<OutlinedInput label={title} />}\r\n            renderValue={(selectedIds) => {\r\n                    const selectedGroups = allGroups.filter(g => selectedIds.includes(g.id))\r\n                    return selectedGroups.map(g => g.name).join(', ')\r\n                }\r\n            }\r\n        >\r\n            {allGroups.map((group) => (\r\n                <MenuItem key={group.id} value={group.id}>\r\n                    <Checkbox checked={resultGroups.indexOf(group.id) > -1} />\r\n                    <ListItemText primary={group.name} />\r\n                </MenuItem>\r\n            ))}\r\n        </Select>\r\n    </FormControl>\r\n)\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    name: getGroupNameFromBuilderGroup(state, ownProps.group.id),\r\n    description: getGroupDescriptionFromBuilderGroup(state, ownProps.group.id),\r\n    allGroups: selectBuilderGroupsFromCurrentLanguage(state),\r\n    groupRequirements: getBuilderGroupRequirementsByGroupId(state, ownProps.group.id),\r\n    language: selectLanguage(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    createOption,\r\n    setGroupRequirements,\r\n    setGroupIsRequired,\r\n    setGroupIsReplacement,\r\n    changeGroupProperties,\r\n    deleteGroup: deleteOptionGroup,\r\n    openInputDialog: inputDialogOpen,\r\n    openConfirmDialog: confirmDialogOpen,\r\n    openAlert\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(OptionGroup)\r\n","import React, { useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\nimport Tabs from '@mui/material/Tabs'\r\nimport Tab from '@mui/material/Tab'\r\nimport Box from '@mui/material/Box'\r\nimport { Button, IconButton, Stack, Tooltip, Typography } from '@mui/material'\r\nimport { Add } from '@mui/icons-material'\r\nimport { connect } from 'react-redux'\r\nimport { changeSectionProperties, createGroup, createSection, deleteSection } from '../../../state/configurationBuilder/builderSlice'\r\nimport { inputDialogOpen } from '../../../state/inputDialog/inputDialogSlice'\r\nimport { selectLanguage } from '../../../state/language/languageSelectors'\r\nimport { alertTypes, openAlert } from '../../../state/alert/alertSlice'\r\nimport { getBuilderGroupsInSection, selectBuilderGroups, selectBuilderSectionsFromCurrentLanguage } from '../../../state/configurationBuilder/builderSelectors'\r\nimport BuilderOptionGroup from './Options/BuilderOptionGroup'\r\nimport { translate } from '../../../lang'\r\nimport { confirmDialogOpen } from '../../../state/confirmationDialog/confirmationSlice'\r\nimport EditButton from './EditButton'\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n            <Box sx={{ p: 3 }}>\r\n                {children}\r\n            </Box>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired\r\n}\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    }\r\n}\r\n\r\n// a tab has to have a children prop\r\nfunction TooltipAsTab({ children, title }) {\r\n    return <Tooltip title={title} children={children} />\r\n}\r\n\r\nfunction SectionTabs({ sections, getOptionGroupsInSection, optionGroups, openInputDialog, openConfirmDialog, createSection, createGroup, changeSectionProperties, deleteSection, openAlert, language }) {\r\n\r\n    const [value, setValue] = useState(0)\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue)\r\n    }\r\n\r\n    const handleAddSection = () => {\r\n        const data = {\r\n            sectionName: {name: translate('sectionName', language), value: '' }\r\n        }\r\n        openInputDialog(translate('newSection', language), data, (data) => {\r\n            const success = createSection(data.sectionName.value)\r\n            if (!success) {\r\n                openAlert('Section already exists!', alertTypes.ERROR)\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleRemoveSection = (sectionId, name) => {\r\n        openConfirmDialog(`${translate('removeSectionConfirmation', language)}: ${name}?`, {}, null, () => {\r\n            deleteSection(sectionId)\r\n            setValue(0)\r\n        })\r\n    }\r\n\r\n    const handleAddGroup = (sectionId) => {\r\n        const data = {\r\n            groupName: {name: translate('groupName', language), value: '' },\r\n            groupDescription: {name: translate('groupDescription', language), value: ''},\r\n            groupIsRequired: {name: translate('required', language), value: false, isCheckBox: true},\r\n            groupIsMultiselect: {name: translate('multiselect', language), value: true, isCheckBox: true}\r\n        }\r\n        openInputDialog(translate('newGroup', language), data, (data) => {\r\n            const isReplacementGroup = !data.groupIsMultiselect.value   // is replacement group if its not a multiselect\r\n            const success = createGroup(sectionId, data.groupName.value, data.groupDescription.value, data.groupIsRequired.value, isReplacementGroup)\r\n            if (!success) {\r\n                openAlert('Group already exists!', alertTypes.ERROR)\r\n            }\r\n        })\r\n    }\r\n\r\n    const renderSectionHeader = (sectionId, sectionName) => {\r\n        return (\r\n            <Box>\r\n                <Button onClick={() => handleAddGroup(sectionId)}>{translate('addOptionGroup', language)}</Button>\r\n                <EditButton \r\n                    title={`${translate('editSectionName', language)}`}\r\n                    propertyName={translate('sectionName', language)}\r\n                    oldValue={sectionName}\r\n                    valueChangedCallback={(newValue) => {changeSectionProperties({sectionId, newName: newValue})}}\r\n                    textButton={true}\r\n                ></EditButton>\r\n                <Button onClick={() => handleRemoveSection(sectionId, sectionName)}>{translate('removeSection', language)}</Button>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ width: '100%' }}>\r\n            <Typography variant=\"h3\">{translate('options', language)}</Typography>\r\n\r\n            <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                <Tabs \r\n                    value={value} \r\n                    scrollButtons=\"auto\"\r\n                    allowScrollButtonsMobile\r\n                    variant=\"scrollable\" \r\n                    onChange={handleChange} \r\n                    aria-label=\"sectiontabs\"\r\n                >\r\n                    {sections.map((section, index) => (\r\n                        <Tab key={section.id} label={section.name} wrapped {...a11yProps(index)} />\r\n                    ))}\r\n\r\n                    <TooltipAsTab title={translate('addSection', language)}>\r\n                        <IconButton onClick={() => handleAddSection()}>\r\n                            <Add />\r\n                        </IconButton>\r\n                    </TooltipAsTab>\r\n                </Tabs>\r\n            </Box>\r\n            \r\n            {sections.map((section, index) => (\r\n                <TabPanel key={section.id} value={value} index={index}>\r\n                    <Stack minHeight={400} mb={10}>\r\n                        {renderSectionHeader(section.id, section.name)}\r\n\r\n                        {optionGroups\r\n                            .filter(group => getOptionGroupsInSection(section.id).includes(group.id))\r\n                            .map((group, index) => (\r\n                                <BuilderOptionGroup key={group.id} group={group} sectionId={section.id}></BuilderOptionGroup>\r\n                        ))}\r\n                    </Stack>\r\n                </TabPanel>\r\n            ))}\r\n\r\n            {/* <TabPanel value={value} index={0}>\r\n                <Typography variant=\"body1\">Item One 1</Typography>\r\n            </TabPanel>\r\n            <TabPanel value={value} index={1}>\r\n                <Typography variant=\"body1\">Item Two</Typography>\r\n            </TabPanel>\r\n            <TabPanel value={value} index={2}>\r\n                <Typography variant=\"body1\">Item Three</Typography>\r\n            </TabPanel> */}\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    sections: selectBuilderSectionsFromCurrentLanguage(state),\r\n    getOptionGroupsInSection: (sectionId) => getBuilderGroupsInSection(state, sectionId),\r\n    optionGroups: selectBuilderGroups(state),\r\n    language: selectLanguage(state),\r\n})\r\nconst mapDispatchToProps = {\r\n    openInputDialog: inputDialogOpen,\r\n    openConfirmDialog: confirmDialogOpen,\r\n    createSection,\r\n    changeSectionProperties,\r\n    deleteSection,\r\n    createGroup,\r\n    openAlert\r\n}\r\nexport default connect(\r\n    mapStateToProps, \r\n    mapDispatchToProps\r\n)(SectionTabs)","import { Delete, Done } from '@mui/icons-material'\r\nimport { FormControl, Grid, IconButton, InputLabel, ListItemText, MenuItem, OutlinedInput, Select, Tooltip, Typography } from '@mui/material'\r\nimport React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { languageNames, translate } from '../../../lang'\r\nimport { alertTypes, openAlert } from '../../../state/alert/alertSlice'\r\nimport { selectBuilderError, selectBuilderInputLanguage, selectBuilderStatus } from '../../../state/configurationBuilder/builderSelectors'\r\nimport { changeInputLanguage, finishConfigurationBuild, loadingHandled, resetBuild, saveBuilderToStorage } from '../../../state/configurationBuilder/builderSlice'\r\nimport { confirmDialogOpen } from '../../../state/confirmationDialog/confirmationSlice'\r\nimport { selectLanguage } from '../../../state/language/languageSelectors'\r\nimport { selectIsAdmin } from '../../../state/user/userSelector'\r\nimport ConfigurationProperties from './ConfigurationProperties'\r\nimport CreateModel from './Model/CreateModel'\r\nimport SectionTabs from './SectionTabs'\r\n\r\nfunction ConfigurationBuilderView({ isAdmin, status, error, inputLanguage, openAlert, openConfirmDialog, changeInputLanguage, saveBuilderToStorage, finish, reset, loadingHandled, language }) {\r\n    \r\n    const autoSave = true\r\n    const autoSaveInterval = 10000\r\n\r\n    const navigate = useNavigate()\r\n\r\n    // open alert and navigate to the home page if the configuration is created\r\n    useEffect(() => {\r\n        if (status === 'succeeded') {\r\n            loadingHandled()\r\n            openAlert(`Successfully created a new configuration!`, alertTypes.SUCCESS)\r\n            navigate('/')\r\n        }\r\n    }, [status, navigate, loadingHandled, openAlert])\r\n\r\n    // open alert if there is an error\r\n    useEffect(() => {\r\n        if (error) {\r\n            loadingHandled()\r\n            console.log('error:', error)\r\n            openAlert(`Error: ${error}`, alertTypes.ERROR)\r\n        }\r\n    }, [error, loadingHandled, openAlert])\r\n\r\n    // if the user is not an admin, navigate to the home page\r\n    useEffect(() => {\r\n        if (!isAdmin) {\r\n            navigate('/')\r\n        }\r\n    }, [isAdmin, navigate])\r\n\r\n\r\n    // start the auto save when the component is initialized\r\n    useEffect(() => {\r\n        if (!autoSave) return\r\n\r\n        let saveBuilderInterval = setInterval(() => {\r\n            console.log('Saving Builder...')\r\n            saveBuilderToStorage()\r\n        }, autoSaveInterval)\r\n\r\n        // clear interval when the component is unmounted\r\n        return () => {clearInterval(saveBuilderInterval)}\r\n    }, [saveBuilderToStorage])\r\n\r\n    const handleFinishClicked = () => {\r\n        openConfirmDialog(translate('createConfiguration', language), {}, null, () => {\r\n            finish()\r\n        })\r\n    }\r\n\r\n    const handleResetClicked = () => {\r\n        openConfirmDialog(translate('resetBuildConfirmation', language), {}, null, () => {\r\n            reset()\r\n        })\r\n    }\r\n\r\n    const handleChangeInputLanguage = (event) => {\r\n        const newLang = event.target.value\r\n        changeInputLanguage(newLang)\r\n    }\r\n\r\n    const renderBuilderBody = () => {\r\n        return (\r\n            <Grid container direction=\"column\" gap={2}>\r\n                <ConfigurationProperties></ConfigurationProperties>\r\n                <CreateModel></CreateModel>\r\n                <SectionTabs></SectionTabs>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid container justifyContent=\"flex-end\">\r\n                {/* Header */}\r\n                <Grid item sx={{flexGrow: 1}}>\r\n                    <Typography variant=\"h2\">{translate('createNewConfiguration', language)}</Typography>\r\n                </Grid>\r\n\r\n                {/* Actions */}\r\n                <Grid item display=\"flex\" alignItems=\"center\" sx={{paddingTop: 2, justifySelf: 'flex-end'}}>\r\n                    \r\n                    <FormControl sx={{width: 150}} >\r\n                        <InputLabel id=\"select-input-lang-label\">Input Language</InputLabel>\r\n                        <Select\r\n                            labelId='select-input-lang-label'\r\n                            value={inputLanguage}\r\n                            autoWidth\r\n                            onChange={handleChangeInputLanguage}\r\n                            input={<OutlinedInput label='Input Language' />}\r\n                        >\r\n                            {Object.keys(languageNames).map((lang, index) => (\r\n                                <MenuItem sx={{width: 150}} key={index} value={languageNames[lang]}>\r\n                                    <ListItemText primary={lang}></ListItemText>\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Tooltip title={translate('finishBuild', language)}>\r\n                        <IconButton \r\n                            variant=\"contained\" \r\n                            onClick={handleFinishClicked}\r\n                            >\r\n                            <Done />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    <Tooltip title={translate('resetBuild', language)}>\r\n                        <IconButton \r\n                            variant=\"contained\" \r\n                            onClick={handleResetClicked}\r\n                            >\r\n                            <Delete />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Grid>\r\n\r\n                {/* Language Select */}\r\n                <Grid item container>\r\n                </Grid>\r\n\r\n                {/* Builder */}\r\n                {renderBuilderBody()}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    isAdmin: selectIsAdmin(state),\r\n    status: selectBuilderStatus(state),\r\n    error: selectBuilderError(state),\r\n    inputLanguage: selectBuilderInputLanguage(state),\r\n    language: selectLanguage(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    openAlert,\r\n    openConfirmDialog: confirmDialogOpen,\r\n    changeInputLanguage,\r\n    saveBuilderToStorage,\r\n    finish: finishConfigurationBuild,\r\n    reset: resetBuild,\r\n    loadingHandled: loadingHandled\r\n\r\n}\r\nexport default connect(\r\n    mapStateToProps, mapDispatchToProps\r\n)(ConfigurationBuilderView)\r\n\r\n\r\n\r\n// export class ConfigurationBuilderView extends Component {\r\n\r\n//     constructor(props) {\r\n//         super(props)\r\n//     }\r\n\r\n//     componentDidUpdate() {\r\n//         this.checkState()\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         this.checkState()\r\n//         this.saveBuilderInterval = setInterval(this.saveBuilder, 10000)\r\n//     }\r\n\r\n//     componentWillUnmount() {\r\n//         clearInterval(this.saveBuilderInterval)\r\n//     }\r\n\r\n//     checkState = () => {\r\n//         console.log('CHECKING STATE')\r\n//         const {navigate} = this.props\r\n\r\n//         const { isAdmin, status, error, openAlert, loadingHandled } = this.props\r\n\r\n//         if (error) {\r\n//             loadingHandled()\r\n//             console.log('error:', error)\r\n//             openAlert(`Error: ${error}`, alertTypes.ERROR)\r\n//         }\r\n\r\n//         if (status === 'succeeded') {\r\n//             loadingHandled()\r\n//             openAlert(`Successfully created a new configuration!`, alertTypes.SUCCESS)\r\n//             navigate('/')\r\n//         }\r\n\r\n//         console.log(isAdmin)\r\n//         if (!isAdmin) {\r\n//             console.log('not admin')\r\n//             console.log(navigate)\r\n//             navigate('/')\r\n//         }\r\n//     }\r\n\r\n//     saveBuilder = () => {\r\n//         const { saveBuilderToStorage } = this.props\r\n//         console.log('Saving Builder...')\r\n//         saveBuilderToStorage()\r\n//     }\r\n\r\n//     handleFinishClicked = () => {\r\n//         const { openInputDialog, finish, language } = this.props\r\n\r\n//         const data = {\r\n//             configurationName: {name: translate('configurationName', language), value: '' }\r\n//         }\r\n//         const title = translate('finishConfiguration', language)\r\n\r\n//         openInputDialog(title, data, (data) => {\r\n//             const configurationName = data.configurationName.value\r\n\r\n//             finish(configurationName)\r\n//         })\r\n//     }\r\n\r\n//     handleResetClicked = () => {\r\n//         const { reset, language } = this.props\r\n        \r\n//         this.openConfirmDialog(translate('resetBuildConfirmation', language), {}, null, () => {\r\n//             reset()\r\n//         })\r\n//     }\r\n\r\n//     renderBuilderBody = () => {\r\n//         return (\r\n//             <Grid container direction=\"column\" gap={2}>\r\n//                 <ConfigurationProperties></ConfigurationProperties>\r\n//                 <CreateModel></CreateModel>\r\n//                 <SectionTabs></SectionTabs>\r\n//             </Grid>\r\n//         )\r\n//     }\r\n\r\n//     render() {\r\n//         const { language } = this.props\r\n        \r\n//         return (\r\n//             <div>\r\n//                 <Grid container justifyContent=\"flex-end\">\r\n//                     <Grid item sx={{flexGrow: 1}}>\r\n//                         <Typography variant=\"h2\">{translate('createNewConfiguration', language)}</Typography>\r\n//                     </Grid>\r\n\r\n//                     <Grid item sx={{paddingTop: 2, justifySelf: 'flex-end'}}>\r\n//                         <Tooltip title={translate('finishBuild', language)}>\r\n//                             <IconButton \r\n//                                 variant=\"contained\" \r\n//                                 onClick={this.handleFinishClicked}\r\n//                                 >\r\n//                                 <Done />\r\n//                             </IconButton>\r\n//                         </Tooltip>\r\n//                         <Tooltip title={translate('resetBuild', language)}>\r\n//                             <IconButton \r\n//                                 variant=\"contained\" \r\n//                                 onClick={this.handleResetClicked}\r\n//                                 >\r\n//                                 <Delete />\r\n//                             </IconButton>\r\n//                         </Tooltip>\r\n//                     </Grid>\r\n//                 </Grid>\r\n\r\n//                 {this.renderBuilderBody()}\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// const mapStateToProps = (state) => ({\r\n//     isAdmin: selectIsAdmin(state),\r\n//     status: selectBuilderStatus(state),\r\n//     error: selectBuilderError(state),\r\n//     language: selectLanguage(state)\r\n// })\r\n// const mapDispatchToProps = {\r\n//     openAlert,\r\n//     openInputDialog: inputDialogOpen,\r\n//     openConfirmDialog: confirmDialogOpen,\r\n//     saveBuilderToStorage: saveBuilderToStorage,\r\n//     finish: finishConfigurationBuild,\r\n//     reset: resetBuild,\r\n//     loadingHandled: loadingHandled\r\n// }\r\n// const ConfigurationBuilderViewConnected = connect(\r\n//     mapStateToProps, \r\n//     mapDispatchToProps\r\n// )(ConfigurationBuilderView)\r\n\r\n// // export default ConfigurationBuilderViewConnected\r\n\r\n// function WithNavigate(props) {\r\n//     const navigate = useNavigate()\r\n//     return <ConfigurationBuilderViewConnected {...props} navigate={navigate}></ConfigurationBuilderViewConnected>\r\n// }\r\n// export default WithNavigate","import { ListItemText } from '@mui/material'\r\nimport React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getOption } from '../../../../state/configuration/configurationSelectors'\r\n\r\nfunction ModelOptionText({ name, description }) {\r\n\r\n    return (\r\n        <ListItemText\r\n            primary={name}\r\n            secondary={description}\r\n        ></ListItemText>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const option = getOption(state, ownProps.optionId)\r\n\r\n    return {\r\n        name: option.name,\r\n        description: option.description\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n\r\n}\r\nexport default connect(\r\n    mapStateToProps, \r\n    mapDispatchToProps\r\n)(ModelOptionText)\r\n","import { ListItem } from '@mui/material'\r\nimport React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getOptionsInSection } from '../../../../state/configuration/configurationSelectors'\r\nimport ModelOptionText from './ModelOptionText'\r\n\r\nfunction SectionOptionList({ allOptions, selectedOptions }) {\r\n\r\n    if (!selectedOptions || !allOptions) {\r\n        console.log(selectedOptions)\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {allOptions.filter(o => selectedOptions.includes(o)).map(optionId => (\r\n                <ListItem sx={{paddingBottom: 0, paddingTop: 0}} key={optionId}>\r\n                    <ModelOptionText optionId={optionId}></ModelOptionText>\r\n                </ListItem>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    allOptions: getOptionsInSection(state, ownProps.sectionId)\r\n})\r\nconst mapDispatchToProps = {\r\n\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps, \r\n    mapDispatchToProps\r\n)(SectionOptionList)\r\n","import { Box, ButtonBase, List, ListSubheader, Typography } from '@mui/material'\r\nimport React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { extractModelDescriptionFromModel, extractModelNameFromModel, extractModelOptionsFromModel, selectOptionSections, selectSelectedOptions } from '../../../../state/configuration/configurationSelectors'\r\nimport { setModel } from '../../../../state/configuration/configurationSlice'\r\nimport SectionOptionList from './SectionOptionList'\r\n\r\nfunction ModelButton({ model, isSelected = false, disabled = false, selectedOptions, selectModel, sections = [] }) {\r\n\r\n    // for the custom model, dont display sections if it is not selected\r\n    if (!model && !isSelected) sections = []\r\n\r\n    const name = model ? extractModelNameFromModel(model) : 'Custom'\r\n    const description = model ? extractModelDescriptionFromModel(model) : ''\r\n    const options = model ? extractModelOptionsFromModel(model) : (isSelected ? selectedOptions : [])\r\n\r\n    const [hover, setHover] = useState(false)\r\n\r\n    const border = isSelected ? '2px solid grey' : hover ? '1px solid grey' : '1px dashed grey'\r\n\r\n\r\n    function handleClick() {\r\n        if (!disabled) {\r\n            selectModel(name)\r\n        }\r\n    }\r\n\r\n    function handleHover(isHovering) {\r\n        setHover(isHovering)\r\n    }\r\n\r\n\r\n    return (\r\n        <ButtonBase \r\n            sx={{width: '100%', height: '100%'}}\r\n            onMouseLeave={() => handleHover(false)} \r\n            onMouseOver={() => handleHover(true)}\r\n            onClick={handleClick} \r\n        >\r\n            <Box padding={2} sx={{ width: '100%', border: border }}>\r\n                \r\n                <Box height=\"80px\">\r\n                    <Typography variant=\"h4\">\r\n                        {name}\r\n                    </Typography>\r\n                    <Typography variant=\"body1\">\r\n                        {description}\r\n                    </Typography>\r\n                </Box>\r\n\r\n                <List\r\n                    dense={true}\r\n                    sx={{\r\n                        position: 'relative',\r\n                        overflow: 'auto',\r\n                        maxHeight: 300,\r\n                        '& ul': { padding: 0 },\r\n                    }}\r\n                    subheader={<li />}\r\n                >\r\n                    {sections.map(section => (\r\n                        <li key={section.id}>\r\n                            <ul>\r\n                                <ListSubheader>{section.name}</ListSubheader>\r\n                                <SectionOptionList sectionId={section.id} selectedOptions={options}></SectionOptionList>\r\n                            </ul>\r\n                        </li>\r\n                    ))}\r\n                </List>\r\n\r\n            </Box>\r\n        </ButtonBase>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    selectedOptions: selectSelectedOptions(state),\r\n    sections: selectOptionSections(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    selectModel: setModel,\r\n}\r\nexport default connect(\r\n    mapStateToProps, \r\n    mapDispatchToProps\r\n)(ModelButton)\r\n","import { Grid, Stack, Typography, useMediaQuery } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { selectModels, selectSelectedModel } from '../../../../state/configuration/configurationSelectors'\r\nimport ModelButton from './ModelButton'\r\n\r\nfunction ModelSelector({ models, selectedModel }) {\r\n\r\n    const isDesktop = useMediaQuery((theme) => theme.breakpoints.up('sm'))\r\n\r\n    function modelSelectGridLayout() {\r\n        return (\r\n            <Grid container spacing={2} alignItems=\"flex-start\">\r\n\r\n                {models.map((model, index) => (\r\n                    <Grid item key={index} xs={12} sm={6} md={4} lg={3}>\r\n                        <ModelButton model={model} isSelected={model.name === selectedModel}></ModelButton>\r\n                    </Grid>\r\n                ))}\r\n\r\n                <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                    <ModelButton model={null} isSelected={!selectedModel} disabled={true}></ModelButton>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    function modelSelectHorizontalScrollLayout() {\r\n        return (\r\n            <Box sx={{overflowX: 'scroll'}}>\r\n                <Stack\r\n                    direction={{xs: 'row', md: 'column'}}\r\n                    justifyContent=\"space-around\"\r\n                    alignItems=\"center\"\r\n                    width={`${(models.length + 1)*90}vw`}\r\n                >\r\n                    {models.map((model, index) => (\r\n                        <Box key={index} width=\"80vw\">\r\n                            <ModelButton model={model} isSelected={model.name === selectedModel}></ModelButton>\r\n                        </Box>\r\n                    ))}\r\n\r\n                    <Box width=\"80vw\">\r\n                        <ModelButton model={null} isSelected={!selectedModel} disabled={true}></ModelButton>\r\n                    </Box>\r\n\r\n                </Stack>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Box marginBottom={4}>\r\n            <Typography variant=\"h3\">Models</Typography>\r\n\r\n            {isDesktop ? \r\n                modelSelectGridLayout()\r\n            :\r\n                modelSelectHorizontalScrollLayout()\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    models: selectModels(state),\r\n    selectedModel: selectSelectedModel(state),\r\n})\r\nconst mapDispatchToProps = {\r\n\r\n}\r\nexport default connect(\r\n    mapStateToProps, \r\n    mapDispatchToProps\r\n)(ModelSelector)\r\n","import React from 'react'\r\nimport { Typography, Box, Button, Tooltip, Zoom } from '@mui/material'\r\nimport { connect } from 'react-redux'\r\nimport { clickedOption } from '../../../../state/configuration/configurationSlice'\r\nimport './Option.css'\r\nimport { getIsOptionSelectable, getIsOptionSelected, getOption, getOptionName, getOptionPrice } from '../../../../state/configuration/configurationSelectors'\r\nimport { translate } from '../../../../lang'\r\nimport { selectLanguage } from '../../../../state/language/languageSelectors'\r\n\r\nfunction Option({ optionId, clickedOption, option, selected, price, selectable, disabledReason, problematicOptions, language }) {\r\n\r\n    const disabled = !selectable\r\n\r\n    function handleClick() {\r\n        clickedOption(optionId)\r\n    }\r\n    \r\n    return (\r\n        <Tooltip \r\n            title={disabled ? `${translate(disabledReason, language)}: ${problematicOptions.join(', ')}` : ''} \r\n            placement=\"top\" \r\n            TransitionComponent={Zoom}\r\n            arrow\r\n            enterTouchDelay={200}\r\n        >\r\n            <Box >\r\n\r\n            <Button style={{width: '100%', height: '100%'}} variant={selected ? \"contained\" : \"outlined\"} disabled={disabled} onClick={handleClick}>\r\n                <Box className=\"Option\">\r\n                    <Typography variant=\"h4\">{option.name}</Typography>\r\n                    <Typography variant=\"body1\">{option.description}</Typography>\r\n                    {price ? \r\n                        <Typography variant=\"body2\">{translate('price', language)}: {price}€</Typography>\r\n                        :\r\n                        <></>\r\n                    }\r\n                </Box>\r\n            </Button>\r\n\r\n            </Box>\r\n        </Tooltip>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const selectableError = getIsOptionSelectable(state, ownProps.optionId)\r\n    let isSelectable = true\r\n    let disabledReason = ''\r\n    let problematicOptions = []\r\n\r\n    if (selectableError) {\r\n        isSelectable = false\r\n        disabledReason = selectableError[0]\r\n        problematicOptions = selectableError[1].map(optionId => getOptionName(state, optionId))\r\n    }\r\n\r\n    return {\r\n        option: getOption(state, ownProps.optionId),\r\n        selected: getIsOptionSelected(state, ownProps.optionId),\r\n        price: getOptionPrice(state, ownProps.optionId),\r\n        selectable: isSelectable,\r\n        disabledReason,\r\n        problematicOptions,\r\n        language: selectLanguage(state)\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    clickedOption\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Option)","import { ErrorOutline } from '@mui/icons-material'\r\nimport { Tooltip } from '@mui/material'\r\nimport React from 'react'\r\n\r\nexport default function GroupInvalidError({errorMessage}) {\r\n    return (\r\n        <Tooltip \r\n            title={errorMessage} \r\n            placement=\"top\"\r\n            arrow\r\n            enterTouchDelay={200}\r\n        >\r\n            <ErrorOutline />\r\n        </Tooltip>\r\n    )\r\n}\r\n","import { Typography } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport React from 'react'\r\nimport Option from './Option'\r\nimport GroupInvalidError from './GroupInvalidError'\r\nimport './OptionGroup.css'\r\nimport { getIsGroupValid } from '../../../../state/configuration/configurationSelectors'\r\nimport { selectLanguage } from '../../../../state/language/languageSelectors'\r\nimport { translate } from '../../../../lang'\r\nimport { connect } from 'react-redux'\r\n\r\nfunction OptionGroup({group, isValid, groupError, language}) {\r\n    const { name, description, optionIds } = group\r\n\r\n    function renderGroupError() {\r\n        if (!isValid) {\r\n            return (\r\n                <GroupInvalidError errorMessage={translate(groupError, language)}></GroupInvalidError>\r\n            )\r\n        } else {\r\n            return\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box className=\"OptionGroup\" marginBottom={1} padding={1}>\r\n            <Box className=\"OptionGroupTitle\" display={'flex'} justifyContent={'space-between'} alignItems={'center'}>\r\n                <Typography variant=\"h3\">\r\n                    {name}\r\n                </Typography>\r\n                {renderGroupError()}\r\n            </Box>\r\n            <Typography variant=\"subtitle2\">{description}</Typography>\r\n            <Box className=\"OptionContainer\">\r\n                {\r\n                    optionIds.map(optionId => (\r\n                        <Option key={optionId} optionId={optionId}></Option>\r\n                        ))\r\n                    }\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const groupError = getIsGroupValid(state, ownProps.group.id)\r\n    const isValid = groupError === null\r\n\r\n    return {\r\n        isValid,\r\n        groupError,\r\n        language: selectLanguage(state)\r\n    }\r\n}\r\nconst mapDispatchToProps = {}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(OptionGroup)\r\n","import React, { useState } from 'react'\r\n\r\nimport OptionGroup from './Options/OptionGroup'\r\nimport PropTypes from 'prop-types'\r\nimport Tabs from '@mui/material/Tabs'\r\nimport Tab from '@mui/material/Tab'\r\nimport Box from '@mui/material/Box'\r\nimport { useSelector } from 'react-redux'\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n            <Box sx={{ p: 3 }}>\r\n                {children}\r\n            </Box>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired\r\n}\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    }\r\n}\r\n\r\nexport default function OptionTabs() {\r\n\r\n    const {configuration} = useSelector(state => state.configuration)\r\n\r\n    const [value, setValue] = useState(0)\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue)\r\n    }\r\n    \r\n    return (\r\n        <Box sx={{ width: '100%' }}>\r\n            <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                <Tabs \r\n                    value={value} \r\n                    scrollButtons=\"auto\"\r\n                    allowScrollButtonsMobile\r\n                    variant=\"scrollable\" \r\n                    onChange={handleChange} \r\n                    aria-label=\"sectiontabs\"\r\n                >\r\n                    {/* <Tab label=\"Item One\" {...a11yProps(0)} />\r\n                    <Tab label=\"Item Two\" {...a11yProps(1)} />\r\n                    <Tab label=\"Item Three\" {...a11yProps(2)} /> */}\r\n\r\n                    {configuration.optionSections.map((section, index) => (\r\n                        <Tab key={section.id} label={section.name} wrapped {...a11yProps(index)} />\r\n                    ))}\r\n                </Tabs>\r\n            </Box>\r\n            {configuration.optionSections.map((section, index) => (\r\n                <TabPanel key={section.id} value={value} index={index}>\r\n                    {configuration.optionGroups\r\n                        .filter(group => section.optionGroupIds.includes(group.id))\r\n                        .map((group, index) => (\r\n                            <OptionGroup key={group.id} group={group}></OptionGroup>\r\n                        ))}\r\n                </TabPanel>\r\n            ))}\r\n            {/* <TabPanel value={value} index={0}>\r\n                Item One 111\r\n            </TabPanel>\r\n            <TabPanel value={value} index={1}>\r\n                Item Two\r\n            </TabPanel>\r\n            <TabPanel value={value} index={2}>\r\n                Item Three\r\n            </TabPanel> */}\r\n        </Box>\r\n    )\r\n}","import { Done, RestartAlt, SaveAs } from '@mui/icons-material'\r\nimport { Box, Grid, IconButton, ImageList, ImageListItem, Tooltip, Typography } from '@mui/material'\r\nimport React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { postOrderConfiguredProduct } from '../../../api/productsAPI'\r\nimport { requestSaveConfiguration } from '../../../api/userAPI'\r\nimport { getImageSource } from '../../../App'\r\nimport { translate } from '../../../lang'\r\nimport { alertTypes, openAlert } from '../../../state/alert/alertSlice'\r\nimport { getCurrentPrice, selectConfigurationDescription, selectConfigurationId, selectConfigurationImages, selectConfigurationName, selectSelectedModel, selectSelectedOptions } from '../../../state/configuration/configurationSelectors'\r\nimport { resetActiveConfiguration } from '../../../state/configuration/configurationSlice'\r\nimport { confirmDialogOpen } from '../../../state/confirmationDialog/confirmationSlice'\r\nimport { inputDialogOpen } from '../../../state/inputDialog/inputDialogSlice'\r\nimport { selectLanguage } from '../../../state/language/languageSelectors'\r\nimport { selectIsAuthenticated } from '../../../state/user/userSelector'\r\nimport { openLogInDialog } from '../../header/LoginButton'\r\nimport { Slide } from 'react-slideshow-image'\r\nimport Loader from '../../Loader'\r\nimport ModelSelector from './ModelSelector/ModelSelector'\r\n\r\nimport OptionTabs from './OptionTabs'\r\nimport Summary from './SidePanel/Summary'\r\nimport 'react-slideshow-image/dist/styles.css'\r\n// import Summary from './SidePanel/Summary'\r\n\r\n\r\n/*\r\n\r\noptionGroups: [\r\n    {\r\n        id: 'COLOR_GROUP',\r\n        name: 'Color',\r\n        description: 'the exterior color of the car',\r\n        optionIds: [\r\n            'BLUE', 'YELLOW', 'GREEN'\r\n        ]\r\n    }\r\n]\r\n\r\n*/\r\n\r\nfunction Configurator({ isLoggedIn, configurationName, configurationDescription, configurationImages, configurationId, selectedOptions, price, model, isLoading, resetConfig, openConfirm, openInputDialog, openLogInDialog, openAlert, language }) {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    function handleSaveClicked() {\r\n        if (!isLoggedIn) {\r\n            openLogInDialog()\r\n            return\r\n        }\r\n\r\n        const data = {\r\n            configurationName: {name: translate('configurationName', language), value: '' }\r\n        }\r\n        const title = translate('saveConfiguration', language)\r\n\r\n        openInputDialog(title, data, (data) => {\r\n            const configurationName = data.configurationName.value\r\n\r\n            requestSaveConfiguration(configurationId, configurationName, selectedOptions)\r\n            .then(res => {\r\n                openAlert(`${translate('savedConfiguration', language)}: ${configurationName}!`, alertTypes.SUCCESS)\r\n                console.log(res)\r\n            })\r\n            .catch(err => {\r\n                openAlert(`Error: ${err}`, alertTypes.ERROR)\r\n                console.log(err)\r\n            })\r\n        })\r\n    }\r\n\r\n    function handleResetClicked() {\r\n        openConfirm(translate('resetConfigurationPrompt', language), {}, null, () => {\r\n            resetConfig()\r\n        })\r\n    }\r\n\r\n    function handleFinishClicked() {\r\n        if (!isLoggedIn) {\r\n            openLogInDialog()\r\n            return\r\n        }\r\n\r\n        // confirm dialog that shows the summary\r\n        openConfirm('', {}, <Summary configurationId={configurationId} selectedOptions={selectedOptions}></Summary>, () => {\r\n            // when confirmed -> prompt with configuration name and then send the request to order the configuration\r\n            promptOrderConfiguration()\r\n        })\r\n    }\r\n    function promptOrderConfiguration() {\r\n        const data = {\r\n            configurationName: {name: translate('configurationName', language), value: '' }\r\n        }\r\n        const title = translate('finishConfiguration', language)\r\n        openInputDialog(title, data, (data) => {\r\n            const configurationName = data.configurationName.value\r\n\r\n            postOrderConfiguredProduct(configurationId, configurationName, selectedOptions, price, model)\r\n            .then(res => {\r\n                openAlert(`${translate('successOrderedConfiguration', language)}!`, alertTypes.SUCCESS)\r\n                console.log(res)\r\n                navigate('/account/ordered')\r\n            })\r\n            .catch(err => {\r\n                openAlert(`Error: ${err}`, alertTypes.ERROR)\r\n                console.log(err)\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    function renderConfigurator() {\r\n\r\n        if (isLoading) {\r\n            return (\r\n                <Loader></Loader>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {/* Configurator header */}\r\n                <Grid container justifyContent=\"flex-end\">\r\n                    <Box sx={{flexGrow: 1}}>\r\n                        <Typography variant=\"h2\">{translate('configureYour', language)} {configurationName}</Typography>\r\n                        <Typography variant=\"subtitle1\">{configurationDescription}</Typography>\r\n                    </Box>\r\n\r\n                    <Grid item sx={{paddingTop: 2, justifySelf: 'flex-end'}}>\r\n                        <Tooltip title={translate('saveConfiguration', language)}>\r\n                            <IconButton \r\n                                variant=\"contained\" \r\n                                onClick={handleSaveClicked}\r\n                                >\r\n                                <SaveAs />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                        <Tooltip title={translate('resetConfiguration', language)}>\r\n                            <IconButton\r\n                                variant=\"contained\" \r\n                                onClick={handleResetClicked}\r\n                            >\r\n                                <RestartAlt />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                        <Tooltip title={translate('finishConfiguration', language)}>\r\n                            <IconButton \r\n                                variant=\"contained\" \r\n                                onClick={handleFinishClicked}\r\n                                >\r\n                                <Done />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {/* Images */}\r\n                {/* <Box mb={4}>\r\n                    <Slide easing=\"ease\">\r\n                        {configurationImages.map((image, index) => (\r\n                            <div key={index} className=\"each-slide\">\r\n                                <div style={{\r\n                                    height: '60vw',\r\n                                    maxHeight: '600px', \r\n                                    backgroundImage: `url(${getImageSource(image)})`,\r\n                                    backgroundSize: 'cover',\r\n                                    backgroundPosition: 'center'\r\n                                }}>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </Slide>\r\n                </Box> */}\r\n\r\n                {/* <ImageList sx={{ width: '100%', height: '350px' }} cols={{sm: 1, lg: 4}} rowHeight={350}>\r\n                    {[...configurationImages, ...configurationImages, ...configurationImages].map((item) => (\r\n                        <ImageListItem key={item}>\r\n                            <img\r\n                                {...srcset(getImageSource(item), '100%', 350, 1, 1)}\r\n                                //src={`${getImageSource(item)}`}\r\n                                //srcSet={`${getImageSource(item)}`}\r\n                                alt={configurationName}\r\n                                loading=\"lazy\"\r\n                            />\r\n                        </ImageListItem>\r\n                    ))}\r\n                </ImageList> */}\r\n\r\n                {/* Models */}\r\n                <ModelSelector></ModelSelector>\r\n\r\n                <Grid container>\r\n                    <OptionTabs></OptionTabs>\r\n                </Grid>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    function srcset(image, width, height, rows = 1, cols = 1) {\r\n        return {\r\n            src: `${image}?w=${width * cols}&h=${height * rows}&fit=crop&auto=format`,\r\n            srcSet: `${image}?w=${width * cols}&h=${height * rows}&fit=crop&auto=format&dpr=2 2x`\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {renderConfigurator()}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    configurationName: selectConfigurationName(state),\r\n    configurationDescription: selectConfigurationDescription(state),\r\n    configurationImages: selectConfigurationImages(state),\r\n    configurationId: selectConfigurationId(state),\r\n    selectedOptions: selectSelectedOptions(state),\r\n    price: getCurrentPrice(state),\r\n    model: selectSelectedModel(state),\r\n    language: selectLanguage(state),\r\n    isLoggedIn: selectIsAuthenticated(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    resetConfig: resetActiveConfiguration,\r\n    openConfirm: confirmDialogOpen,\r\n    openInputDialog: inputDialogOpen,\r\n    openLogInDialog: openLogInDialog,\r\n    openAlert: openAlert\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Configurator)\r\n","import { Typography } from '@mui/material'\r\nimport React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { /*useNavigate,*/ useParams } from 'react-router-dom'\r\nimport { translate } from '../../../lang'\r\n// import { alertTypes, openAlert } from '../../../state/alert/alertSlice'\r\nimport { fetchConfiguration } from '../../../state/configuration/configurationSlice'\r\nimport { selectLanguage } from '../../../state/language/languageSelectors'\r\nimport Configurator from './Configurator'\r\n\r\nfunction ConfigurationView({ fetchConfiguration, /*openAlert,*/ status, error, language }) {\r\n\r\n    // const navigate = useNavigate()\r\n\r\n    // const { configuration, status, error } = useSelector(state => state.configuration)\r\n\r\n    const { id } = useParams()\r\n    \r\n    // const { products/*, status, error*/ } = useSelector(state => state.product)\r\n    // let product = products.find(p => p.configId === id)\r\n    // if (!product && configuration) {\r\n    //     const {id, name, description, image} = configuration\r\n    //     product = {id, name, description, image}\r\n    // }\r\n\r\n    // console.log('loading configuration for product id:', id)\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            fetchConfiguration(id)\r\n        }\r\n    }, [fetchConfiguration, id])\r\n\r\n\r\n    function render() {\r\n        switch (status) {\r\n            case 'loading':\r\n                return renderConfiguration(true)\r\n            case 'succeeded':\r\n                return renderConfiguration()\r\n            case 'failed':\r\n                return renderApiFailed(error)\r\n            default:\r\n                return renderConfiguration(true)\r\n        }\r\n    }\r\n\r\n    function renderConfiguration(isLoading = false) {\r\n        return (\r\n            <div>\r\n                <Configurator isLoading={isLoading}></Configurator>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function renderApiFailed(errorMessage) {\r\n        return (\r\n            <div>\r\n                <Typography variant=\"h2\">{translate('failedToLoadConfiguration', language)}</Typography>\r\n                <Typography vairant=\"body1\">{translate(errorMessage, language)}</Typography>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {render()}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    status: state.configuration.status,\r\n    error: state.configuration.error,\r\n    language: selectLanguage(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    fetchConfiguration,\r\n    // openAlert\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ConfigurationView)","import { createTheme, responsiveFontSizes } from '@mui/material'\r\n\r\nconst theme = responsiveFontSizes(createTheme())\r\n\r\ntheme.palette = {\r\n    ...theme.palette\r\n}\r\n\r\ntheme.typography = {\r\n    ...theme.typography\r\n}\r\n\r\n\r\n// const coef = 0.1\r\n// const modifyRem = (value, coef) => {\r\n//     return `${parseFloat(value) * (1 + coef)}rem`\r\n// }\r\n\r\n// each(theme.typography, (variant, variantName) => {\r\n//     if (typeof variant !== 'object') {\r\n//         return variant\r\n//     }\r\n//     theme.typography[variantName] = {\r\n//         ...variant,\r\n//         fontSize: modifyRem(variant.fontSize, -coef * 5),\r\n//         [theme.breakpoints.up('sm')]: {\r\n//             fontSize: modifyRem(variant.fontSize, -coef * 2.5),\r\n//         },\r\n//         [theme.breakpoints.up('md')]: {\r\n//             fontSize: modifyRem(variant.fontSize, -coef * 1),\r\n//         },\r\n//         [theme.breakpoints.up('lg')]: {\r\n//             fontSize: modifyRem(variant.fontSize, 0),\r\n//         },\r\n//         [theme.breakpoints.up('xl')]: {\r\n//             fontSize: modifyRem(variant.fontSize, coef),\r\n//         },\r\n//     }\r\n// })\r\n\r\nexport default theme","import { configureStore } from '@reduxjs/toolkit'\r\nimport productReducer from './product/productSlice'\r\nimport configurationReducer from './configuration/configurationSlice'\r\nimport languageReducer, { setLanguage } from './language/languageSlice'\r\nimport confirmationReducer from './confirmationDialog/confirmationSlice'\r\nimport userReducer, { setCurrentUser } from './user/userSlice'\r\nimport inputDialogReducer from './inputDialog/inputDialogSlice'\r\nimport alertReducer from './alert/alertSlice'\r\nimport builderReducer from './configurationBuilder/builderSlice'\r\nimport jwt from 'jsonwebtoken'\r\nimport { setAuthorizationToken } from '../api/general'\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        product: productReducer,\r\n        configuration: configurationReducer,\r\n        language: languageReducer,\r\n        confirmation: confirmationReducer,\r\n        user: userReducer,\r\n        inputDialog: inputDialogReducer,\r\n        alert: alertReducer,\r\n        builder: builderReducer\r\n    }\r\n})\r\n\r\n// set user if there is a user token saved to the local storage\r\nconst authToken = localStorage.jwtToken\r\nif (authToken) {\r\n    setAuthorizationToken(authToken)\r\n    store.dispatch(setCurrentUser(jwt.decode(authToken)))\r\n}\r\n\r\n// set language if there is a language saved to the local storage\r\nconst localStorageLang = localStorage.language\r\nif (localStorageLang) {\r\n    console.log('storage lang:', localStorageLang)\r\n    store.dispatch(setLanguage(localStorageLang))\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { Provider } from 'react-redux'\r\nimport { store } from './state/store'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}